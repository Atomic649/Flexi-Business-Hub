
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Member
 * 
 */
export type Member = $Result.DefaultSelection<Prisma.$MemberPayload>
/**
 * Model BusinessAcc
 * 
 */
export type BusinessAcc = $Result.DefaultSelection<Prisma.$BusinessAccPayload>
/**
 * Model Bill
 * 
 */
export type Bill = $Result.DefaultSelection<Prisma.$BillPayload>
/**
 * Model AdsCost
 * 
 */
export type AdsCost = $Result.DefaultSelection<Prisma.$AdsCostPayload>
/**
 * Model Expence
 * 
 */
export type Expence = $Result.DefaultSelection<Prisma.$ExpencePayload>
/**
 * Model Platform
 * 
 */
export type Platform = $Result.DefaultSelection<Prisma.$PlatformPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserRole: {
  owner: 'owner',
  marketing: 'marketing',
  acccountance: 'acccountance',
  sales: 'sales'
};

export type UserRole = (typeof UserRole)[keyof typeof UserRole]


export const taxType: {
  Juristic: 'Juristic',
  Individual: 'Individual'
};

export type taxType = (typeof taxType)[keyof typeof taxType]


export const Gender: {
  Female: 'Female',
  Male: 'Male'
};

export type Gender = (typeof Gender)[keyof typeof Gender]


export const Payment: {
  COD: 'COD',
  Transfer: 'Transfer',
  CaditCard: 'CaditCard'
};

export type Payment = (typeof Payment)[keyof typeof Payment]


export const SocialMedia: {
  Facebook: 'Facebook',
  Line: 'Line',
  Tiktok: 'Tiktok',
  Shopee: 'Shopee',
  Lazada: 'Lazada'
};

export type SocialMedia = (typeof SocialMedia)[keyof typeof SocialMedia]

}

export type UserRole = $Enums.UserRole

export const UserRole: typeof $Enums.UserRole

export type taxType = $Enums.taxType

export const taxType: typeof $Enums.taxType

export type Gender = $Enums.Gender

export const Gender: typeof $Enums.Gender

export type Payment = $Enums.Payment

export const Payment: typeof $Enums.Payment

export type SocialMedia = $Enums.SocialMedia

export const SocialMedia: typeof $Enums.SocialMedia

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.member`: Exposes CRUD operations for the **Member** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Members
    * const members = await prisma.member.findMany()
    * ```
    */
  get member(): Prisma.MemberDelegate<ExtArgs>;

  /**
   * `prisma.businessAcc`: Exposes CRUD operations for the **BusinessAcc** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more BusinessAccs
    * const businessAccs = await prisma.businessAcc.findMany()
    * ```
    */
  get businessAcc(): Prisma.BusinessAccDelegate<ExtArgs>;

  /**
   * `prisma.bill`: Exposes CRUD operations for the **Bill** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bills
    * const bills = await prisma.bill.findMany()
    * ```
    */
  get bill(): Prisma.BillDelegate<ExtArgs>;

  /**
   * `prisma.adsCost`: Exposes CRUD operations for the **AdsCost** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AdsCosts
    * const adsCosts = await prisma.adsCost.findMany()
    * ```
    */
  get adsCost(): Prisma.AdsCostDelegate<ExtArgs>;

  /**
   * `prisma.expence`: Exposes CRUD operations for the **Expence** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Expences
    * const expences = await prisma.expence.findMany()
    * ```
    */
  get expence(): Prisma.ExpenceDelegate<ExtArgs>;

  /**
   * `prisma.platform`: Exposes CRUD operations for the **Platform** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Platforms
    * const platforms = await prisma.platform.findMany()
    * ```
    */
  get platform(): Prisma.PlatformDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.15.0
   * Query Engine version: 12e25d8d06f6ea5a0252864dd9a03b1bb51f3022
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Member: 'Member',
    BusinessAcc: 'BusinessAcc',
    Bill: 'Bill',
    AdsCost: 'AdsCost',
    Expence: 'Expence',
    Platform: 'Platform',
    Product: 'Product'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'member' | 'businessAcc' | 'bill' | 'adsCost' | 'expence' | 'platform' | 'product'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Member: {
        payload: Prisma.$MemberPayload<ExtArgs>
        fields: Prisma.MemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MemberFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MemberFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findFirst: {
            args: Prisma.MemberFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MemberFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          findMany: {
            args: Prisma.MemberFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          create: {
            args: Prisma.MemberCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          createMany: {
            args: Prisma.MemberCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MemberCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>[]
          }
          delete: {
            args: Prisma.MemberDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          update: {
            args: Prisma.MemberUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          deleteMany: {
            args: Prisma.MemberDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MemberUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MemberUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MemberPayload>
          }
          aggregate: {
            args: Prisma.MemberAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMember>
          }
          groupBy: {
            args: Prisma.MemberGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.MemberCountArgs<ExtArgs>,
            result: $Utils.Optional<MemberCountAggregateOutputType> | number
          }
        }
      }
      BusinessAcc: {
        payload: Prisma.$BusinessAccPayload<ExtArgs>
        fields: Prisma.BusinessAccFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BusinessAccFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BusinessAccFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload>
          }
          findFirst: {
            args: Prisma.BusinessAccFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BusinessAccFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload>
          }
          findMany: {
            args: Prisma.BusinessAccFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload>[]
          }
          create: {
            args: Prisma.BusinessAccCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload>
          }
          createMany: {
            args: Prisma.BusinessAccCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BusinessAccCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload>[]
          }
          delete: {
            args: Prisma.BusinessAccDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload>
          }
          update: {
            args: Prisma.BusinessAccUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload>
          }
          deleteMany: {
            args: Prisma.BusinessAccDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BusinessAccUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BusinessAccUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BusinessAccPayload>
          }
          aggregate: {
            args: Prisma.BusinessAccAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBusinessAcc>
          }
          groupBy: {
            args: Prisma.BusinessAccGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BusinessAccGroupByOutputType>[]
          }
          count: {
            args: Prisma.BusinessAccCountArgs<ExtArgs>,
            result: $Utils.Optional<BusinessAccCountAggregateOutputType> | number
          }
        }
      }
      Bill: {
        payload: Prisma.$BillPayload<ExtArgs>
        fields: Prisma.BillFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BillFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BillFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload>
          }
          findFirst: {
            args: Prisma.BillFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BillFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload>
          }
          findMany: {
            args: Prisma.BillFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload>[]
          }
          create: {
            args: Prisma.BillCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload>
          }
          createMany: {
            args: Prisma.BillCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.BillCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload>[]
          }
          delete: {
            args: Prisma.BillDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload>
          }
          update: {
            args: Prisma.BillUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload>
          }
          deleteMany: {
            args: Prisma.BillDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BillUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BillUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BillPayload>
          }
          aggregate: {
            args: Prisma.BillAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBill>
          }
          groupBy: {
            args: Prisma.BillGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BillGroupByOutputType>[]
          }
          count: {
            args: Prisma.BillCountArgs<ExtArgs>,
            result: $Utils.Optional<BillCountAggregateOutputType> | number
          }
        }
      }
      AdsCost: {
        payload: Prisma.$AdsCostPayload<ExtArgs>
        fields: Prisma.AdsCostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AdsCostFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AdsCostFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload>
          }
          findFirst: {
            args: Prisma.AdsCostFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AdsCostFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload>
          }
          findMany: {
            args: Prisma.AdsCostFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload>[]
          }
          create: {
            args: Prisma.AdsCostCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload>
          }
          createMany: {
            args: Prisma.AdsCostCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AdsCostCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload>[]
          }
          delete: {
            args: Prisma.AdsCostDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload>
          }
          update: {
            args: Prisma.AdsCostUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload>
          }
          deleteMany: {
            args: Prisma.AdsCostDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AdsCostUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AdsCostUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AdsCostPayload>
          }
          aggregate: {
            args: Prisma.AdsCostAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAdsCost>
          }
          groupBy: {
            args: Prisma.AdsCostGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AdsCostGroupByOutputType>[]
          }
          count: {
            args: Prisma.AdsCostCountArgs<ExtArgs>,
            result: $Utils.Optional<AdsCostCountAggregateOutputType> | number
          }
        }
      }
      Expence: {
        payload: Prisma.$ExpencePayload<ExtArgs>
        fields: Prisma.ExpenceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExpenceFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExpenceFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload>
          }
          findFirst: {
            args: Prisma.ExpenceFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExpenceFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload>
          }
          findMany: {
            args: Prisma.ExpenceFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload>[]
          }
          create: {
            args: Prisma.ExpenceCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload>
          }
          createMany: {
            args: Prisma.ExpenceCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ExpenceCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload>[]
          }
          delete: {
            args: Prisma.ExpenceDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload>
          }
          update: {
            args: Prisma.ExpenceUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload>
          }
          deleteMany: {
            args: Prisma.ExpenceDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExpenceUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExpenceUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExpencePayload>
          }
          aggregate: {
            args: Prisma.ExpenceAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExpence>
          }
          groupBy: {
            args: Prisma.ExpenceGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExpenceGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExpenceCountArgs<ExtArgs>,
            result: $Utils.Optional<ExpenceCountAggregateOutputType> | number
          }
        }
      }
      Platform: {
        payload: Prisma.$PlatformPayload<ExtArgs>
        fields: Prisma.PlatformFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlatformFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlatformFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          findFirst: {
            args: Prisma.PlatformFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlatformFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          findMany: {
            args: Prisma.PlatformFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>[]
          }
          create: {
            args: Prisma.PlatformCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          createMany: {
            args: Prisma.PlatformCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlatformCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>[]
          }
          delete: {
            args: Prisma.PlatformDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          update: {
            args: Prisma.PlatformUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          deleteMany: {
            args: Prisma.PlatformDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlatformUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlatformUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlatformPayload>
          }
          aggregate: {
            args: Prisma.PlatformAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlatform>
          }
          groupBy: {
            args: Prisma.PlatformGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlatformGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlatformCountArgs<ExtArgs>,
            result: $Utils.Optional<PlatformCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    business: number
    member: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | UserCountOutputTypeCountBusinessArgs
    member?: boolean | UserCountOutputTypeCountMemberArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBusinessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessAccWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
  }


  /**
   * Count Type MemberCountOutputType
   */

  export type MemberCountOutputType = {
    business: number
    bill: number
    adsCost: number
    expence: number
    product: number
  }

  export type MemberCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | MemberCountOutputTypeCountBusinessArgs
    bill?: boolean | MemberCountOutputTypeCountBillArgs
    adsCost?: boolean | MemberCountOutputTypeCountAdsCostArgs
    expence?: boolean | MemberCountOutputTypeCountExpenceArgs
    product?: boolean | MemberCountOutputTypeCountProductArgs
  }

  // Custom InputTypes
  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the MemberCountOutputType
     */
    select?: MemberCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountBusinessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessAccWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountBillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountAdsCostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdsCostWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountExpenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenceWhereInput
  }

  /**
   * MemberCountOutputType without action
   */
  export type MemberCountOutputTypeCountProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }


  /**
   * Count Type BusinessAccCountOutputType
   */

  export type BusinessAccCountOutputType = {
    billRecord: number
    expenceRecord: number
    adsCostRecord: number
  }

  export type BusinessAccCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    billRecord?: boolean | BusinessAccCountOutputTypeCountBillRecordArgs
    expenceRecord?: boolean | BusinessAccCountOutputTypeCountExpenceRecordArgs
    adsCostRecord?: boolean | BusinessAccCountOutputTypeCountAdsCostRecordArgs
  }

  // Custom InputTypes
  /**
   * BusinessAccCountOutputType without action
   */
  export type BusinessAccCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAccCountOutputType
     */
    select?: BusinessAccCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * BusinessAccCountOutputType without action
   */
  export type BusinessAccCountOutputTypeCountBillRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillWhereInput
  }

  /**
   * BusinessAccCountOutputType without action
   */
  export type BusinessAccCountOutputTypeCountExpenceRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenceWhereInput
  }

  /**
   * BusinessAccCountOutputType without action
   */
  export type BusinessAccCountOutputTypeCountAdsCostRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdsCostWhereInput
  }


  /**
   * Count Type PlatformCountOutputType
   */

  export type PlatformCountOutputType = {
    platformId: number
  }

  export type PlatformCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platformId?: boolean | PlatformCountOutputTypeCountPlatformIdArgs
  }

  // Custom InputTypes
  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlatformCountOutputType
     */
    select?: PlatformCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PlatformCountOutputType without action
   */
  export type PlatformCountOutputTypeCountPlatformIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdsCostWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    biilRecord: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    biilRecord?: boolean | ProductCountOutputTypeCountBiilRecordArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountBiilRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    createAt: Date | null
    updatedAt: Date | null
    phone: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    email: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    createAt: Date | null
    updatedAt: Date | null
    phone: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    firstName: number
    lastName: number
    avatar: number
    createAt: number
    updatedAt: number
    phone: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    avatar?: true
    createAt?: true
    updatedAt?: true
    phone?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    avatar?: true
    createAt?: true
    updatedAt?: true
    phone?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    firstName?: true
    lastName?: true
    avatar?: true
    createAt?: true
    updatedAt?: true
    phone?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    email: string
    password: string
    firstName: string
    lastName: string
    avatar: string | null
    createAt: Date
    updatedAt: Date
    phone: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    createAt?: boolean
    updatedAt?: boolean
    phone?: boolean
    business?: boolean | User$businessArgs<ExtArgs>
    member?: boolean | User$memberArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    createAt?: boolean
    updatedAt?: boolean
    phone?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    createAt?: boolean
    updatedAt?: boolean
    phone?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    business?: boolean | User$businessArgs<ExtArgs>
    member?: boolean | User$memberArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      business: Prisma.$BusinessAccPayload<ExtArgs>[]
      member: Prisma.$MemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      email: string
      password: string
      firstName: string
      lastName: string
      avatar: string | null
      createAt: Date
      updatedAt: Date
      phone: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends UserCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    business<T extends User$businessArgs<ExtArgs> = {}>(args?: Subset<T, User$businessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findMany'> | Null>;

    member<T extends User$memberArgs<ExtArgs> = {}>(args?: Subset<T, User$memberArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly firstName: FieldRef<"User", 'String'>
    readonly lastName: FieldRef<"User", 'String'>
    readonly avatar: FieldRef<"User", 'String'>
    readonly createAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly phone: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.business
   */
  export type User$businessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    where?: BusinessAccWhereInput
    orderBy?: BusinessAccOrderByWithRelationInput | BusinessAccOrderByWithRelationInput[]
    cursor?: BusinessAccWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessAccScalarFieldEnum | BusinessAccScalarFieldEnum[]
  }

  /**
   * User.member
   */
  export type User$memberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    cursor?: MemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Member
   */

  export type AggregateMember = {
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  export type MemberAvgAggregateOutputType = {
    userId: number | null
  }

  export type MemberSumAggregateOutputType = {
    userId: number | null
  }

  export type MemberMinAggregateOutputType = {
    uniqueId: string | null
    role: $Enums.UserRole | null
    permission: string | null
    createAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type MemberMaxAggregateOutputType = {
    uniqueId: string | null
    role: $Enums.UserRole | null
    permission: string | null
    createAt: Date | null
    updatedAt: Date | null
    userId: number | null
  }

  export type MemberCountAggregateOutputType = {
    uniqueId: number
    role: number
    permission: number
    createAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type MemberAvgAggregateInputType = {
    userId?: true
  }

  export type MemberSumAggregateInputType = {
    userId?: true
  }

  export type MemberMinAggregateInputType = {
    uniqueId?: true
    role?: true
    permission?: true
    createAt?: true
    updatedAt?: true
    userId?: true
  }

  export type MemberMaxAggregateInputType = {
    uniqueId?: true
    role?: true
    permission?: true
    createAt?: true
    updatedAt?: true
    userId?: true
  }

  export type MemberCountAggregateInputType = {
    uniqueId?: true
    role?: true
    permission?: true
    createAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type MemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Member to aggregate.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Members
    **/
    _count?: true | MemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: MemberAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: MemberSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MemberMaxAggregateInputType
  }

  export type GetMemberAggregateType<T extends MemberAggregateArgs> = {
        [P in keyof T & keyof AggregateMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMember[P]>
      : GetScalarType<T[P], AggregateMember[P]>
  }




  export type MemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MemberWhereInput
    orderBy?: MemberOrderByWithAggregationInput | MemberOrderByWithAggregationInput[]
    by: MemberScalarFieldEnum[] | MemberScalarFieldEnum
    having?: MemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MemberCountAggregateInputType | true
    _avg?: MemberAvgAggregateInputType
    _sum?: MemberSumAggregateInputType
    _min?: MemberMinAggregateInputType
    _max?: MemberMaxAggregateInputType
  }

  export type MemberGroupByOutputType = {
    uniqueId: string
    role: $Enums.UserRole
    permission: string
    createAt: Date
    updatedAt: Date
    userId: number
    _count: MemberCountAggregateOutputType | null
    _avg: MemberAvgAggregateOutputType | null
    _sum: MemberSumAggregateOutputType | null
    _min: MemberMinAggregateOutputType | null
    _max: MemberMaxAggregateOutputType | null
  }

  type GetMemberGroupByPayload<T extends MemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MemberGroupByOutputType[P]>
            : GetScalarType<T[P], MemberGroupByOutputType[P]>
        }
      >
    >


  export type MemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uniqueId?: boolean
    role?: boolean
    permission?: boolean
    createAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    business?: boolean | Member$businessArgs<ExtArgs>
    bill?: boolean | Member$billArgs<ExtArgs>
    adsCost?: boolean | Member$adsCostArgs<ExtArgs>
    expence?: boolean | Member$expenceArgs<ExtArgs>
    product?: boolean | Member$productArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    uniqueId?: boolean
    role?: boolean
    permission?: boolean
    createAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["member"]>

  export type MemberSelectScalar = {
    uniqueId?: boolean
    role?: boolean
    permission?: boolean
    createAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type MemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    business?: boolean | Member$businessArgs<ExtArgs>
    bill?: boolean | Member$billArgs<ExtArgs>
    adsCost?: boolean | Member$adsCostArgs<ExtArgs>
    expence?: boolean | Member$expenceArgs<ExtArgs>
    product?: boolean | Member$productArgs<ExtArgs>
    _count?: boolean | MemberCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type MemberIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $MemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Member"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      business: Prisma.$BusinessAccPayload<ExtArgs>[]
      bill: Prisma.$BillPayload<ExtArgs>[]
      adsCost: Prisma.$AdsCostPayload<ExtArgs>[]
      expence: Prisma.$ExpencePayload<ExtArgs>[]
      product: Prisma.$ProductPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      uniqueId: string
      role: $Enums.UserRole
      permission: string
      createAt: Date
      updatedAt: Date
      userId: number
    }, ExtArgs["result"]["member"]>
    composites: {}
  }

  type MemberGetPayload<S extends boolean | null | undefined | MemberDefaultArgs> = $Result.GetResult<Prisma.$MemberPayload, S>

  type MemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MemberCountAggregateInputType | true
    }

  export interface MemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Member'], meta: { name: 'Member' } }
    /**
     * Find zero or one Member that matches the filter.
     * @param {MemberFindUniqueArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MemberFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MemberFindUniqueArgs<ExtArgs>>
    ): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Member that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {MemberFindUniqueOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MemberFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Member that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MemberFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberFindFirstArgs<ExtArgs>>
    ): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Member that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindFirstOrThrowArgs} args - Arguments to find a Member
     * @example
     * // Get one Member
     * const member = await prisma.member.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MemberFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Members that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Members
     * const members = await prisma.member.findMany()
     * 
     * // Get first 10 Members
     * const members = await prisma.member.findMany({ take: 10 })
     * 
     * // Only select the `uniqueId`
     * const memberWithUniqueIdOnly = await prisma.member.findMany({ select: { uniqueId: true } })
     * 
    **/
    findMany<T extends MemberFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Member.
     * @param {MemberCreateArgs} args - Arguments to create a Member.
     * @example
     * // Create one Member
     * const Member = await prisma.member.create({
     *   data: {
     *     // ... data to create a Member
     *   }
     * })
     * 
    **/
    create<T extends MemberCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MemberCreateArgs<ExtArgs>>
    ): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Members.
     * @param {MemberCreateManyArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends MemberCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Members and returns the data saved in the database.
     * @param {MemberCreateManyAndReturnArgs} args - Arguments to create many Members.
     * @example
     * // Create many Members
     * const member = await prisma.member.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Members and only return the `uniqueId`
     * const memberWithUniqueIdOnly = await prisma.member.createManyAndReturn({ 
     *   select: { uniqueId: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends MemberCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Member.
     * @param {MemberDeleteArgs} args - Arguments to delete one Member.
     * @example
     * // Delete one Member
     * const Member = await prisma.member.delete({
     *   where: {
     *     // ... filter to delete one Member
     *   }
     * })
     * 
    **/
    delete<T extends MemberDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MemberDeleteArgs<ExtArgs>>
    ): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Member.
     * @param {MemberUpdateArgs} args - Arguments to update one Member.
     * @example
     * // Update one Member
     * const member = await prisma.member.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MemberUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MemberUpdateArgs<ExtArgs>>
    ): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Members.
     * @param {MemberDeleteManyArgs} args - Arguments to filter Members to delete.
     * @example
     * // Delete a few Members
     * const { count } = await prisma.member.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MemberDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MemberDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Members
     * const member = await prisma.member.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MemberUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MemberUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Member.
     * @param {MemberUpsertArgs} args - Arguments to update or create a Member.
     * @example
     * // Update or create a Member
     * const member = await prisma.member.upsert({
     *   create: {
     *     // ... data to create a Member
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Member we want to update
     *   }
     * })
    **/
    upsert<T extends MemberUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MemberUpsertArgs<ExtArgs>>
    ): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Members.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberCountArgs} args - Arguments to filter Members to count.
     * @example
     * // Count the number of Members
     * const count = await prisma.member.count({
     *   where: {
     *     // ... the filter for the Members we want to count
     *   }
     * })
    **/
    count<T extends MemberCountArgs>(
      args?: Subset<T, MemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MemberAggregateArgs>(args: Subset<T, MemberAggregateArgs>): Prisma.PrismaPromise<GetMemberAggregateType<T>>

    /**
     * Group by Member.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MemberGroupByArgs['orderBy'] }
        : { orderBy?: MemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Member model
   */
  readonly fields: MemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Member.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    business<T extends Member$businessArgs<ExtArgs> = {}>(args?: Subset<T, Member$businessArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findMany'> | Null>;

    bill<T extends Member$billArgs<ExtArgs> = {}>(args?: Subset<T, Member$billArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'findMany'> | Null>;

    adsCost<T extends Member$adsCostArgs<ExtArgs> = {}>(args?: Subset<T, Member$adsCostArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'findMany'> | Null>;

    expence<T extends Member$expenceArgs<ExtArgs> = {}>(args?: Subset<T, Member$expenceArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'findMany'> | Null>;

    product<T extends Member$productArgs<ExtArgs> = {}>(args?: Subset<T, Member$productArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Member model
   */ 
  interface MemberFieldRefs {
    readonly uniqueId: FieldRef<"Member", 'String'>
    readonly role: FieldRef<"Member", 'UserRole'>
    readonly permission: FieldRef<"Member", 'String'>
    readonly createAt: FieldRef<"Member", 'DateTime'>
    readonly updatedAt: FieldRef<"Member", 'DateTime'>
    readonly userId: FieldRef<"Member", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Member findUnique
   */
  export type MemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findUniqueOrThrow
   */
  export type MemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member findFirst
   */
  export type MemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findFirstOrThrow
   */
  export type MemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Member to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Members.
     */
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member findMany
   */
  export type MemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter, which Members to fetch.
     */
    where?: MemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Members to fetch.
     */
    orderBy?: MemberOrderByWithRelationInput | MemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Members.
     */
    cursor?: MemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Members from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Members.
     */
    skip?: number
    distinct?: MemberScalarFieldEnum | MemberScalarFieldEnum[]
  }

  /**
   * Member create
   */
  export type MemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to create a Member.
     */
    data: XOR<MemberCreateInput, MemberUncheckedCreateInput>
  }

  /**
   * Member createMany
   */
  export type MemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Member createManyAndReturn
   */
  export type MemberCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Members.
     */
    data: MemberCreateManyInput | MemberCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Member update
   */
  export type MemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The data needed to update a Member.
     */
    data: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
    /**
     * Choose, which Member to update.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member updateMany
   */
  export type MemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Members.
     */
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyInput>
    /**
     * Filter which Members to update
     */
    where?: MemberWhereInput
  }

  /**
   * Member upsert
   */
  export type MemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * The filter to search for the Member to update in case it exists.
     */
    where: MemberWhereUniqueInput
    /**
     * In case the Member found by the `where` argument doesn't exist, create a new Member with this data.
     */
    create: XOR<MemberCreateInput, MemberUncheckedCreateInput>
    /**
     * In case the Member was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MemberUpdateInput, MemberUncheckedUpdateInput>
  }

  /**
   * Member delete
   */
  export type MemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
    /**
     * Filter which Member to delete.
     */
    where: MemberWhereUniqueInput
  }

  /**
   * Member deleteMany
   */
  export type MemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Members to delete
     */
    where?: MemberWhereInput
  }

  /**
   * Member.business
   */
  export type Member$businessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    where?: BusinessAccWhereInput
    orderBy?: BusinessAccOrderByWithRelationInput | BusinessAccOrderByWithRelationInput[]
    cursor?: BusinessAccWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BusinessAccScalarFieldEnum | BusinessAccScalarFieldEnum[]
  }

  /**
   * Member.bill
   */
  export type Member$billArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    where?: BillWhereInput
    orderBy?: BillOrderByWithRelationInput | BillOrderByWithRelationInput[]
    cursor?: BillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * Member.adsCost
   */
  export type Member$adsCostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    where?: AdsCostWhereInput
    orderBy?: AdsCostOrderByWithRelationInput | AdsCostOrderByWithRelationInput[]
    cursor?: AdsCostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdsCostScalarFieldEnum | AdsCostScalarFieldEnum[]
  }

  /**
   * Member.expence
   */
  export type Member$expenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    where?: ExpenceWhereInput
    orderBy?: ExpenceOrderByWithRelationInput | ExpenceOrderByWithRelationInput[]
    cursor?: ExpenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenceScalarFieldEnum | ExpenceScalarFieldEnum[]
  }

  /**
   * Member.product
   */
  export type Member$productArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Member without action
   */
  export type MemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Member
     */
    select?: MemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MemberInclude<ExtArgs> | null
  }


  /**
   * Model BusinessAcc
   */

  export type AggregateBusinessAcc = {
    _count: BusinessAccCountAggregateOutputType | null
    _avg: BusinessAccAvgAggregateOutputType | null
    _sum: BusinessAccSumAggregateOutputType | null
    _min: BusinessAccMinAggregateOutputType | null
    _max: BusinessAccMaxAggregateOutputType | null
  }

  export type BusinessAccAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BusinessAccSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type BusinessAccMinAggregateOutputType = {
    id: number | null
    businessName: string | null
    vatId: string | null
    businessType: string | null
    taxType: $Enums.taxType | null
    userId: number | null
    memberId: string | null
  }

  export type BusinessAccMaxAggregateOutputType = {
    id: number | null
    businessName: string | null
    vatId: string | null
    businessType: string | null
    taxType: $Enums.taxType | null
    userId: number | null
    memberId: string | null
  }

  export type BusinessAccCountAggregateOutputType = {
    id: number
    businessName: number
    vatId: number
    businessType: number
    taxType: number
    userId: number
    memberId: number
    _all: number
  }


  export type BusinessAccAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BusinessAccSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type BusinessAccMinAggregateInputType = {
    id?: true
    businessName?: true
    vatId?: true
    businessType?: true
    taxType?: true
    userId?: true
    memberId?: true
  }

  export type BusinessAccMaxAggregateInputType = {
    id?: true
    businessName?: true
    vatId?: true
    businessType?: true
    taxType?: true
    userId?: true
    memberId?: true
  }

  export type BusinessAccCountAggregateInputType = {
    id?: true
    businessName?: true
    vatId?: true
    businessType?: true
    taxType?: true
    userId?: true
    memberId?: true
    _all?: true
  }

  export type BusinessAccAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessAcc to aggregate.
     */
    where?: BusinessAccWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessAccs to fetch.
     */
    orderBy?: BusinessAccOrderByWithRelationInput | BusinessAccOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BusinessAccWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessAccs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessAccs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned BusinessAccs
    **/
    _count?: true | BusinessAccCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BusinessAccAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BusinessAccSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BusinessAccMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BusinessAccMaxAggregateInputType
  }

  export type GetBusinessAccAggregateType<T extends BusinessAccAggregateArgs> = {
        [P in keyof T & keyof AggregateBusinessAcc]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBusinessAcc[P]>
      : GetScalarType<T[P], AggregateBusinessAcc[P]>
  }




  export type BusinessAccGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BusinessAccWhereInput
    orderBy?: BusinessAccOrderByWithAggregationInput | BusinessAccOrderByWithAggregationInput[]
    by: BusinessAccScalarFieldEnum[] | BusinessAccScalarFieldEnum
    having?: BusinessAccScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BusinessAccCountAggregateInputType | true
    _avg?: BusinessAccAvgAggregateInputType
    _sum?: BusinessAccSumAggregateInputType
    _min?: BusinessAccMinAggregateInputType
    _max?: BusinessAccMaxAggregateInputType
  }

  export type BusinessAccGroupByOutputType = {
    id: number
    businessName: string
    vatId: string
    businessType: string
    taxType: $Enums.taxType
    userId: number
    memberId: string
    _count: BusinessAccCountAggregateOutputType | null
    _avg: BusinessAccAvgAggregateOutputType | null
    _sum: BusinessAccSumAggregateOutputType | null
    _min: BusinessAccMinAggregateOutputType | null
    _max: BusinessAccMaxAggregateOutputType | null
  }

  type GetBusinessAccGroupByPayload<T extends BusinessAccGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BusinessAccGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BusinessAccGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BusinessAccGroupByOutputType[P]>
            : GetScalarType<T[P], BusinessAccGroupByOutputType[P]>
        }
      >
    >


  export type BusinessAccSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessName?: boolean
    vatId?: boolean
    businessType?: boolean
    taxType?: boolean
    userId?: boolean
    memberId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    bills?: boolean | MemberDefaultArgs<ExtArgs>
    billRecord?: boolean | BusinessAcc$billRecordArgs<ExtArgs>
    expenceRecord?: boolean | BusinessAcc$expenceRecordArgs<ExtArgs>
    adsCostRecord?: boolean | BusinessAcc$adsCostRecordArgs<ExtArgs>
    _count?: boolean | BusinessAccCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessAcc"]>

  export type BusinessAccSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    businessName?: boolean
    vatId?: boolean
    businessType?: boolean
    taxType?: boolean
    userId?: boolean
    memberId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    bills?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["businessAcc"]>

  export type BusinessAccSelectScalar = {
    id?: boolean
    businessName?: boolean
    vatId?: boolean
    businessType?: boolean
    taxType?: boolean
    userId?: boolean
    memberId?: boolean
  }

  export type BusinessAccInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    bills?: boolean | MemberDefaultArgs<ExtArgs>
    billRecord?: boolean | BusinessAcc$billRecordArgs<ExtArgs>
    expenceRecord?: boolean | BusinessAcc$expenceRecordArgs<ExtArgs>
    adsCostRecord?: boolean | BusinessAcc$adsCostRecordArgs<ExtArgs>
    _count?: boolean | BusinessAccCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type BusinessAccIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    bills?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $BusinessAccPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "BusinessAcc"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      bills: Prisma.$MemberPayload<ExtArgs>
      billRecord: Prisma.$BillPayload<ExtArgs>[]
      expenceRecord: Prisma.$ExpencePayload<ExtArgs>[]
      adsCostRecord: Prisma.$AdsCostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      businessName: string
      vatId: string
      businessType: string
      taxType: $Enums.taxType
      userId: number
      memberId: string
    }, ExtArgs["result"]["businessAcc"]>
    composites: {}
  }

  type BusinessAccGetPayload<S extends boolean | null | undefined | BusinessAccDefaultArgs> = $Result.GetResult<Prisma.$BusinessAccPayload, S>

  type BusinessAccCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BusinessAccFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BusinessAccCountAggregateInputType | true
    }

  export interface BusinessAccDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['BusinessAcc'], meta: { name: 'BusinessAcc' } }
    /**
     * Find zero or one BusinessAcc that matches the filter.
     * @param {BusinessAccFindUniqueArgs} args - Arguments to find a BusinessAcc
     * @example
     * // Get one BusinessAcc
     * const businessAcc = await prisma.businessAcc.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BusinessAccFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BusinessAccFindUniqueArgs<ExtArgs>>
    ): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one BusinessAcc that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BusinessAccFindUniqueOrThrowArgs} args - Arguments to find a BusinessAcc
     * @example
     * // Get one BusinessAcc
     * const businessAcc = await prisma.businessAcc.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BusinessAccFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BusinessAccFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first BusinessAcc that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAccFindFirstArgs} args - Arguments to find a BusinessAcc
     * @example
     * // Get one BusinessAcc
     * const businessAcc = await prisma.businessAcc.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BusinessAccFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BusinessAccFindFirstArgs<ExtArgs>>
    ): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first BusinessAcc that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAccFindFirstOrThrowArgs} args - Arguments to find a BusinessAcc
     * @example
     * // Get one BusinessAcc
     * const businessAcc = await prisma.businessAcc.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BusinessAccFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BusinessAccFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more BusinessAccs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAccFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all BusinessAccs
     * const businessAccs = await prisma.businessAcc.findMany()
     * 
     * // Get first 10 BusinessAccs
     * const businessAccs = await prisma.businessAcc.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const businessAccWithIdOnly = await prisma.businessAcc.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BusinessAccFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BusinessAccFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a BusinessAcc.
     * @param {BusinessAccCreateArgs} args - Arguments to create a BusinessAcc.
     * @example
     * // Create one BusinessAcc
     * const BusinessAcc = await prisma.businessAcc.create({
     *   data: {
     *     // ... data to create a BusinessAcc
     *   }
     * })
     * 
    **/
    create<T extends BusinessAccCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BusinessAccCreateArgs<ExtArgs>>
    ): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many BusinessAccs.
     * @param {BusinessAccCreateManyArgs} args - Arguments to create many BusinessAccs.
     * @example
     * // Create many BusinessAccs
     * const businessAcc = await prisma.businessAcc.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends BusinessAccCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BusinessAccCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many BusinessAccs and returns the data saved in the database.
     * @param {BusinessAccCreateManyAndReturnArgs} args - Arguments to create many BusinessAccs.
     * @example
     * // Create many BusinessAccs
     * const businessAcc = await prisma.businessAcc.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many BusinessAccs and only return the `id`
     * const businessAccWithIdOnly = await prisma.businessAcc.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends BusinessAccCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, BusinessAccCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a BusinessAcc.
     * @param {BusinessAccDeleteArgs} args - Arguments to delete one BusinessAcc.
     * @example
     * // Delete one BusinessAcc
     * const BusinessAcc = await prisma.businessAcc.delete({
     *   where: {
     *     // ... filter to delete one BusinessAcc
     *   }
     * })
     * 
    **/
    delete<T extends BusinessAccDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BusinessAccDeleteArgs<ExtArgs>>
    ): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one BusinessAcc.
     * @param {BusinessAccUpdateArgs} args - Arguments to update one BusinessAcc.
     * @example
     * // Update one BusinessAcc
     * const businessAcc = await prisma.businessAcc.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BusinessAccUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BusinessAccUpdateArgs<ExtArgs>>
    ): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more BusinessAccs.
     * @param {BusinessAccDeleteManyArgs} args - Arguments to filter BusinessAccs to delete.
     * @example
     * // Delete a few BusinessAccs
     * const { count } = await prisma.businessAcc.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BusinessAccDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BusinessAccDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more BusinessAccs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAccUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many BusinessAccs
     * const businessAcc = await prisma.businessAcc.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BusinessAccUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BusinessAccUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one BusinessAcc.
     * @param {BusinessAccUpsertArgs} args - Arguments to update or create a BusinessAcc.
     * @example
     * // Update or create a BusinessAcc
     * const businessAcc = await prisma.businessAcc.upsert({
     *   create: {
     *     // ... data to create a BusinessAcc
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the BusinessAcc we want to update
     *   }
     * })
    **/
    upsert<T extends BusinessAccUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BusinessAccUpsertArgs<ExtArgs>>
    ): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of BusinessAccs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAccCountArgs} args - Arguments to filter BusinessAccs to count.
     * @example
     * // Count the number of BusinessAccs
     * const count = await prisma.businessAcc.count({
     *   where: {
     *     // ... the filter for the BusinessAccs we want to count
     *   }
     * })
    **/
    count<T extends BusinessAccCountArgs>(
      args?: Subset<T, BusinessAccCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BusinessAccCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a BusinessAcc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAccAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BusinessAccAggregateArgs>(args: Subset<T, BusinessAccAggregateArgs>): Prisma.PrismaPromise<GetBusinessAccAggregateType<T>>

    /**
     * Group by BusinessAcc.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BusinessAccGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BusinessAccGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BusinessAccGroupByArgs['orderBy'] }
        : { orderBy?: BusinessAccGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BusinessAccGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBusinessAccGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the BusinessAcc model
   */
  readonly fields: BusinessAccFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for BusinessAcc.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BusinessAccClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    bills<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    billRecord<T extends BusinessAcc$billRecordArgs<ExtArgs> = {}>(args?: Subset<T, BusinessAcc$billRecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'findMany'> | Null>;

    expenceRecord<T extends BusinessAcc$expenceRecordArgs<ExtArgs> = {}>(args?: Subset<T, BusinessAcc$expenceRecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'findMany'> | Null>;

    adsCostRecord<T extends BusinessAcc$adsCostRecordArgs<ExtArgs> = {}>(args?: Subset<T, BusinessAcc$adsCostRecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the BusinessAcc model
   */ 
  interface BusinessAccFieldRefs {
    readonly id: FieldRef<"BusinessAcc", 'Int'>
    readonly businessName: FieldRef<"BusinessAcc", 'String'>
    readonly vatId: FieldRef<"BusinessAcc", 'String'>
    readonly businessType: FieldRef<"BusinessAcc", 'String'>
    readonly taxType: FieldRef<"BusinessAcc", 'taxType'>
    readonly userId: FieldRef<"BusinessAcc", 'Int'>
    readonly memberId: FieldRef<"BusinessAcc", 'String'>
  }
    

  // Custom InputTypes
  /**
   * BusinessAcc findUnique
   */
  export type BusinessAccFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    /**
     * Filter, which BusinessAcc to fetch.
     */
    where: BusinessAccWhereUniqueInput
  }

  /**
   * BusinessAcc findUniqueOrThrow
   */
  export type BusinessAccFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    /**
     * Filter, which BusinessAcc to fetch.
     */
    where: BusinessAccWhereUniqueInput
  }

  /**
   * BusinessAcc findFirst
   */
  export type BusinessAccFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    /**
     * Filter, which BusinessAcc to fetch.
     */
    where?: BusinessAccWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessAccs to fetch.
     */
    orderBy?: BusinessAccOrderByWithRelationInput | BusinessAccOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessAccs.
     */
    cursor?: BusinessAccWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessAccs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessAccs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessAccs.
     */
    distinct?: BusinessAccScalarFieldEnum | BusinessAccScalarFieldEnum[]
  }

  /**
   * BusinessAcc findFirstOrThrow
   */
  export type BusinessAccFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    /**
     * Filter, which BusinessAcc to fetch.
     */
    where?: BusinessAccWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessAccs to fetch.
     */
    orderBy?: BusinessAccOrderByWithRelationInput | BusinessAccOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for BusinessAccs.
     */
    cursor?: BusinessAccWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessAccs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessAccs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of BusinessAccs.
     */
    distinct?: BusinessAccScalarFieldEnum | BusinessAccScalarFieldEnum[]
  }

  /**
   * BusinessAcc findMany
   */
  export type BusinessAccFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    /**
     * Filter, which BusinessAccs to fetch.
     */
    where?: BusinessAccWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of BusinessAccs to fetch.
     */
    orderBy?: BusinessAccOrderByWithRelationInput | BusinessAccOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing BusinessAccs.
     */
    cursor?: BusinessAccWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` BusinessAccs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` BusinessAccs.
     */
    skip?: number
    distinct?: BusinessAccScalarFieldEnum | BusinessAccScalarFieldEnum[]
  }

  /**
   * BusinessAcc create
   */
  export type BusinessAccCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    /**
     * The data needed to create a BusinessAcc.
     */
    data: XOR<BusinessAccCreateInput, BusinessAccUncheckedCreateInput>
  }

  /**
   * BusinessAcc createMany
   */
  export type BusinessAccCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many BusinessAccs.
     */
    data: BusinessAccCreateManyInput | BusinessAccCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * BusinessAcc createManyAndReturn
   */
  export type BusinessAccCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many BusinessAccs.
     */
    data: BusinessAccCreateManyInput | BusinessAccCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * BusinessAcc update
   */
  export type BusinessAccUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    /**
     * The data needed to update a BusinessAcc.
     */
    data: XOR<BusinessAccUpdateInput, BusinessAccUncheckedUpdateInput>
    /**
     * Choose, which BusinessAcc to update.
     */
    where: BusinessAccWhereUniqueInput
  }

  /**
   * BusinessAcc updateMany
   */
  export type BusinessAccUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update BusinessAccs.
     */
    data: XOR<BusinessAccUpdateManyMutationInput, BusinessAccUncheckedUpdateManyInput>
    /**
     * Filter which BusinessAccs to update
     */
    where?: BusinessAccWhereInput
  }

  /**
   * BusinessAcc upsert
   */
  export type BusinessAccUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    /**
     * The filter to search for the BusinessAcc to update in case it exists.
     */
    where: BusinessAccWhereUniqueInput
    /**
     * In case the BusinessAcc found by the `where` argument doesn't exist, create a new BusinessAcc with this data.
     */
    create: XOR<BusinessAccCreateInput, BusinessAccUncheckedCreateInput>
    /**
     * In case the BusinessAcc was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BusinessAccUpdateInput, BusinessAccUncheckedUpdateInput>
  }

  /**
   * BusinessAcc delete
   */
  export type BusinessAccDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
    /**
     * Filter which BusinessAcc to delete.
     */
    where: BusinessAccWhereUniqueInput
  }

  /**
   * BusinessAcc deleteMany
   */
  export type BusinessAccDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which BusinessAccs to delete
     */
    where?: BusinessAccWhereInput
  }

  /**
   * BusinessAcc.billRecord
   */
  export type BusinessAcc$billRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    where?: BillWhereInput
    orderBy?: BillOrderByWithRelationInput | BillOrderByWithRelationInput[]
    cursor?: BillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * BusinessAcc.expenceRecord
   */
  export type BusinessAcc$expenceRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    where?: ExpenceWhereInput
    orderBy?: ExpenceOrderByWithRelationInput | ExpenceOrderByWithRelationInput[]
    cursor?: ExpenceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ExpenceScalarFieldEnum | ExpenceScalarFieldEnum[]
  }

  /**
   * BusinessAcc.adsCostRecord
   */
  export type BusinessAcc$adsCostRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    where?: AdsCostWhereInput
    orderBy?: AdsCostOrderByWithRelationInput | AdsCostOrderByWithRelationInput[]
    cursor?: AdsCostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdsCostScalarFieldEnum | AdsCostScalarFieldEnum[]
  }

  /**
   * BusinessAcc without action
   */
  export type BusinessAccDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BusinessAcc
     */
    select?: BusinessAccSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BusinessAccInclude<ExtArgs> | null
  }


  /**
   * Model Bill
   */

  export type AggregateBill = {
    _count: BillCountAggregateOutputType | null
    _avg: BillAvgAggregateOutputType | null
    _sum: BillSumAggregateOutputType | null
    _min: BillMinAggregateOutputType | null
    _max: BillMaxAggregateOutputType | null
  }

  export type BillAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    price: number | null
    businessAcc: number | null
  }

  export type BillSumAggregateOutputType = {
    id: number | null
    amount: number | null
    price: number | null
    businessAcc: number | null
  }

  export type BillMinAggregateOutputType = {
    id: number | null
    createAt: Date | null
    updatedAt: Date | null
    cName: string | null
    cLastname: string | null
    cPhone: string | null
    cGender: $Enums.Gender | null
    cAdress: string | null
    cProvince: string | null
    cPostId: string | null
    product: string | null
    payment: $Enums.Payment | null
    amount: number | null
    purcheseAt: Date | null
    platform: $Enums.SocialMedia | null
    cashStatus: boolean | null
    price: number | null
    imageBill: string | null
    memberId: string | null
    businessAcc: number | null
  }

  export type BillMaxAggregateOutputType = {
    id: number | null
    createAt: Date | null
    updatedAt: Date | null
    cName: string | null
    cLastname: string | null
    cPhone: string | null
    cGender: $Enums.Gender | null
    cAdress: string | null
    cProvince: string | null
    cPostId: string | null
    product: string | null
    payment: $Enums.Payment | null
    amount: number | null
    purcheseAt: Date | null
    platform: $Enums.SocialMedia | null
    cashStatus: boolean | null
    price: number | null
    imageBill: string | null
    memberId: string | null
    businessAcc: number | null
  }

  export type BillCountAggregateOutputType = {
    id: number
    createAt: number
    updatedAt: number
    cName: number
    cLastname: number
    cPhone: number
    cGender: number
    cAdress: number
    cProvince: number
    cPostId: number
    product: number
    payment: number
    amount: number
    purcheseAt: number
    platform: number
    cashStatus: number
    price: number
    imageBill: number
    memberId: number
    businessAcc: number
    _all: number
  }


  export type BillAvgAggregateInputType = {
    id?: true
    amount?: true
    price?: true
    businessAcc?: true
  }

  export type BillSumAggregateInputType = {
    id?: true
    amount?: true
    price?: true
    businessAcc?: true
  }

  export type BillMinAggregateInputType = {
    id?: true
    createAt?: true
    updatedAt?: true
    cName?: true
    cLastname?: true
    cPhone?: true
    cGender?: true
    cAdress?: true
    cProvince?: true
    cPostId?: true
    product?: true
    payment?: true
    amount?: true
    purcheseAt?: true
    platform?: true
    cashStatus?: true
    price?: true
    imageBill?: true
    memberId?: true
    businessAcc?: true
  }

  export type BillMaxAggregateInputType = {
    id?: true
    createAt?: true
    updatedAt?: true
    cName?: true
    cLastname?: true
    cPhone?: true
    cGender?: true
    cAdress?: true
    cProvince?: true
    cPostId?: true
    product?: true
    payment?: true
    amount?: true
    purcheseAt?: true
    platform?: true
    cashStatus?: true
    price?: true
    imageBill?: true
    memberId?: true
    businessAcc?: true
  }

  export type BillCountAggregateInputType = {
    id?: true
    createAt?: true
    updatedAt?: true
    cName?: true
    cLastname?: true
    cPhone?: true
    cGender?: true
    cAdress?: true
    cProvince?: true
    cPostId?: true
    product?: true
    payment?: true
    amount?: true
    purcheseAt?: true
    platform?: true
    cashStatus?: true
    price?: true
    imageBill?: true
    memberId?: true
    businessAcc?: true
    _all?: true
  }

  export type BillAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bill to aggregate.
     */
    where?: BillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bills to fetch.
     */
    orderBy?: BillOrderByWithRelationInput | BillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bills
    **/
    _count?: true | BillCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BillAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BillSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BillMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BillMaxAggregateInputType
  }

  export type GetBillAggregateType<T extends BillAggregateArgs> = {
        [P in keyof T & keyof AggregateBill]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBill[P]>
      : GetScalarType<T[P], AggregateBill[P]>
  }




  export type BillGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BillWhereInput
    orderBy?: BillOrderByWithAggregationInput | BillOrderByWithAggregationInput[]
    by: BillScalarFieldEnum[] | BillScalarFieldEnum
    having?: BillScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BillCountAggregateInputType | true
    _avg?: BillAvgAggregateInputType
    _sum?: BillSumAggregateInputType
    _min?: BillMinAggregateInputType
    _max?: BillMaxAggregateInputType
  }

  export type BillGroupByOutputType = {
    id: number
    createAt: Date
    updatedAt: Date
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    product: string
    payment: $Enums.Payment
    amount: number
    purcheseAt: Date
    platform: $Enums.SocialMedia
    cashStatus: boolean
    price: number
    imageBill: string | null
    memberId: string
    businessAcc: number
    _count: BillCountAggregateOutputType | null
    _avg: BillAvgAggregateOutputType | null
    _sum: BillSumAggregateOutputType | null
    _min: BillMinAggregateOutputType | null
    _max: BillMaxAggregateOutputType | null
  }

  type GetBillGroupByPayload<T extends BillGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BillGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BillGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BillGroupByOutputType[P]>
            : GetScalarType<T[P], BillGroupByOutputType[P]>
        }
      >
    >


  export type BillSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createAt?: boolean
    updatedAt?: boolean
    cName?: boolean
    cLastname?: boolean
    cPhone?: boolean
    cGender?: boolean
    cAdress?: boolean
    cProvince?: boolean
    cPostId?: boolean
    product?: boolean
    payment?: boolean
    amount?: boolean
    purcheseAt?: boolean
    platform?: boolean
    cashStatus?: boolean
    price?: boolean
    imageBill?: boolean
    memberId?: boolean
    businessAcc?: boolean
    productList?: boolean | ProductDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bill"]>

  export type BillSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createAt?: boolean
    updatedAt?: boolean
    cName?: boolean
    cLastname?: boolean
    cPhone?: boolean
    cGender?: boolean
    cAdress?: boolean
    cProvince?: boolean
    cPostId?: boolean
    product?: boolean
    payment?: boolean
    amount?: boolean
    purcheseAt?: boolean
    platform?: boolean
    cashStatus?: boolean
    price?: boolean
    imageBill?: boolean
    memberId?: boolean
    businessAcc?: boolean
    productList?: boolean | ProductDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bill"]>

  export type BillSelectScalar = {
    id?: boolean
    createAt?: boolean
    updatedAt?: boolean
    cName?: boolean
    cLastname?: boolean
    cPhone?: boolean
    cGender?: boolean
    cAdress?: boolean
    cProvince?: boolean
    cPostId?: boolean
    product?: boolean
    payment?: boolean
    amount?: boolean
    purcheseAt?: boolean
    platform?: boolean
    cashStatus?: boolean
    price?: boolean
    imageBill?: boolean
    memberId?: boolean
    businessAcc?: boolean
  }

  export type BillInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productList?: boolean | ProductDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
  }
  export type BillIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    productList?: boolean | ProductDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
  }

  export type $BillPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bill"
    objects: {
      productList: Prisma.$ProductPayload<ExtArgs>
      member: Prisma.$MemberPayload<ExtArgs>
      businessId: Prisma.$BusinessAccPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createAt: Date
      updatedAt: Date
      cName: string
      cLastname: string
      cPhone: string
      cGender: $Enums.Gender
      cAdress: string
      cProvince: string
      cPostId: string
      product: string
      payment: $Enums.Payment
      amount: number
      purcheseAt: Date
      platform: $Enums.SocialMedia
      cashStatus: boolean
      price: number
      imageBill: string | null
      memberId: string
      businessAcc: number
    }, ExtArgs["result"]["bill"]>
    composites: {}
  }

  type BillGetPayload<S extends boolean | null | undefined | BillDefaultArgs> = $Result.GetResult<Prisma.$BillPayload, S>

  type BillCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BillFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BillCountAggregateInputType | true
    }

  export interface BillDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bill'], meta: { name: 'Bill' } }
    /**
     * Find zero or one Bill that matches the filter.
     * @param {BillFindUniqueArgs} args - Arguments to find a Bill
     * @example
     * // Get one Bill
     * const bill = await prisma.bill.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BillFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BillFindUniqueArgs<ExtArgs>>
    ): Prisma__BillClient<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bill that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {BillFindUniqueOrThrowArgs} args - Arguments to find a Bill
     * @example
     * // Get one Bill
     * const bill = await prisma.bill.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BillFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BillFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BillClient<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bill that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillFindFirstArgs} args - Arguments to find a Bill
     * @example
     * // Get one Bill
     * const bill = await prisma.bill.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BillFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BillFindFirstArgs<ExtArgs>>
    ): Prisma__BillClient<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bill that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillFindFirstOrThrowArgs} args - Arguments to find a Bill
     * @example
     * // Get one Bill
     * const bill = await prisma.bill.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BillFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BillFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BillClient<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bills that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bills
     * const bills = await prisma.bill.findMany()
     * 
     * // Get first 10 Bills
     * const bills = await prisma.bill.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const billWithIdOnly = await prisma.bill.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BillFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BillFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bill.
     * @param {BillCreateArgs} args - Arguments to create a Bill.
     * @example
     * // Create one Bill
     * const Bill = await prisma.bill.create({
     *   data: {
     *     // ... data to create a Bill
     *   }
     * })
     * 
    **/
    create<T extends BillCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BillCreateArgs<ExtArgs>>
    ): Prisma__BillClient<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bills.
     * @param {BillCreateManyArgs} args - Arguments to create many Bills.
     * @example
     * // Create many Bills
     * const bill = await prisma.bill.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends BillCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BillCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Bills and returns the data saved in the database.
     * @param {BillCreateManyAndReturnArgs} args - Arguments to create many Bills.
     * @example
     * // Create many Bills
     * const bill = await prisma.bill.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Bills and only return the `id`
     * const billWithIdOnly = await prisma.bill.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends BillCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, BillCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Bill.
     * @param {BillDeleteArgs} args - Arguments to delete one Bill.
     * @example
     * // Delete one Bill
     * const Bill = await prisma.bill.delete({
     *   where: {
     *     // ... filter to delete one Bill
     *   }
     * })
     * 
    **/
    delete<T extends BillDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BillDeleteArgs<ExtArgs>>
    ): Prisma__BillClient<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bill.
     * @param {BillUpdateArgs} args - Arguments to update one Bill.
     * @example
     * // Update one Bill
     * const bill = await prisma.bill.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BillUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BillUpdateArgs<ExtArgs>>
    ): Prisma__BillClient<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bills.
     * @param {BillDeleteManyArgs} args - Arguments to filter Bills to delete.
     * @example
     * // Delete a few Bills
     * const { count } = await prisma.bill.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BillDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BillDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bills
     * const bill = await prisma.bill.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BillUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BillUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bill.
     * @param {BillUpsertArgs} args - Arguments to update or create a Bill.
     * @example
     * // Update or create a Bill
     * const bill = await prisma.bill.upsert({
     *   create: {
     *     // ... data to create a Bill
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bill we want to update
     *   }
     * })
    **/
    upsert<T extends BillUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BillUpsertArgs<ExtArgs>>
    ): Prisma__BillClient<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Bills.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillCountArgs} args - Arguments to filter Bills to count.
     * @example
     * // Count the number of Bills
     * const count = await prisma.bill.count({
     *   where: {
     *     // ... the filter for the Bills we want to count
     *   }
     * })
    **/
    count<T extends BillCountArgs>(
      args?: Subset<T, BillCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BillCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BillAggregateArgs>(args: Subset<T, BillAggregateArgs>): Prisma.PrismaPromise<GetBillAggregateType<T>>

    /**
     * Group by Bill.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BillGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BillGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BillGroupByArgs['orderBy'] }
        : { orderBy?: BillGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BillGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBillGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bill model
   */
  readonly fields: BillFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bill.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BillClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    productList<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    businessId<T extends BusinessAccDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BusinessAccDefaultArgs<ExtArgs>>): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Bill model
   */ 
  interface BillFieldRefs {
    readonly id: FieldRef<"Bill", 'Int'>
    readonly createAt: FieldRef<"Bill", 'DateTime'>
    readonly updatedAt: FieldRef<"Bill", 'DateTime'>
    readonly cName: FieldRef<"Bill", 'String'>
    readonly cLastname: FieldRef<"Bill", 'String'>
    readonly cPhone: FieldRef<"Bill", 'String'>
    readonly cGender: FieldRef<"Bill", 'Gender'>
    readonly cAdress: FieldRef<"Bill", 'String'>
    readonly cProvince: FieldRef<"Bill", 'String'>
    readonly cPostId: FieldRef<"Bill", 'String'>
    readonly product: FieldRef<"Bill", 'String'>
    readonly payment: FieldRef<"Bill", 'Payment'>
    readonly amount: FieldRef<"Bill", 'Int'>
    readonly purcheseAt: FieldRef<"Bill", 'DateTime'>
    readonly platform: FieldRef<"Bill", 'SocialMedia'>
    readonly cashStatus: FieldRef<"Bill", 'Boolean'>
    readonly price: FieldRef<"Bill", 'Int'>
    readonly imageBill: FieldRef<"Bill", 'String'>
    readonly memberId: FieldRef<"Bill", 'String'>
    readonly businessAcc: FieldRef<"Bill", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Bill findUnique
   */
  export type BillFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    /**
     * Filter, which Bill to fetch.
     */
    where: BillWhereUniqueInput
  }

  /**
   * Bill findUniqueOrThrow
   */
  export type BillFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    /**
     * Filter, which Bill to fetch.
     */
    where: BillWhereUniqueInput
  }

  /**
   * Bill findFirst
   */
  export type BillFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    /**
     * Filter, which Bill to fetch.
     */
    where?: BillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bills to fetch.
     */
    orderBy?: BillOrderByWithRelationInput | BillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bills.
     */
    cursor?: BillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bills.
     */
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * Bill findFirstOrThrow
   */
  export type BillFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    /**
     * Filter, which Bill to fetch.
     */
    where?: BillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bills to fetch.
     */
    orderBy?: BillOrderByWithRelationInput | BillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bills.
     */
    cursor?: BillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bills.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bills.
     */
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * Bill findMany
   */
  export type BillFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    /**
     * Filter, which Bills to fetch.
     */
    where?: BillWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bills to fetch.
     */
    orderBy?: BillOrderByWithRelationInput | BillOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bills.
     */
    cursor?: BillWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bills from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bills.
     */
    skip?: number
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * Bill create
   */
  export type BillCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    /**
     * The data needed to create a Bill.
     */
    data: XOR<BillCreateInput, BillUncheckedCreateInput>
  }

  /**
   * Bill createMany
   */
  export type BillCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bills.
     */
    data: BillCreateManyInput | BillCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bill createManyAndReturn
   */
  export type BillCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Bills.
     */
    data: BillCreateManyInput | BillCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Bill update
   */
  export type BillUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    /**
     * The data needed to update a Bill.
     */
    data: XOR<BillUpdateInput, BillUncheckedUpdateInput>
    /**
     * Choose, which Bill to update.
     */
    where: BillWhereUniqueInput
  }

  /**
   * Bill updateMany
   */
  export type BillUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bills.
     */
    data: XOR<BillUpdateManyMutationInput, BillUncheckedUpdateManyInput>
    /**
     * Filter which Bills to update
     */
    where?: BillWhereInput
  }

  /**
   * Bill upsert
   */
  export type BillUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    /**
     * The filter to search for the Bill to update in case it exists.
     */
    where: BillWhereUniqueInput
    /**
     * In case the Bill found by the `where` argument doesn't exist, create a new Bill with this data.
     */
    create: XOR<BillCreateInput, BillUncheckedCreateInput>
    /**
     * In case the Bill was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BillUpdateInput, BillUncheckedUpdateInput>
  }

  /**
   * Bill delete
   */
  export type BillDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    /**
     * Filter which Bill to delete.
     */
    where: BillWhereUniqueInput
  }

  /**
   * Bill deleteMany
   */
  export type BillDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bills to delete
     */
    where?: BillWhereInput
  }

  /**
   * Bill without action
   */
  export type BillDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
  }


  /**
   * Model AdsCost
   */

  export type AggregateAdsCost = {
    _count: AdsCostCountAggregateOutputType | null
    _avg: AdsCostAvgAggregateOutputType | null
    _sum: AdsCostSumAggregateOutputType | null
    _min: AdsCostMinAggregateOutputType | null
    _max: AdsCostMaxAggregateOutputType | null
  }

  export type AdsCostAvgAggregateOutputType = {
    id: number | null
    adsCost: number | null
    platformId: number | null
    businessAcc: number | null
  }

  export type AdsCostSumAggregateOutputType = {
    id: number | null
    adsCost: number | null
    platformId: number | null
    businessAcc: number | null
  }

  export type AdsCostMinAggregateOutputType = {
    id: number | null
    date: Date | null
    createAt: Date | null
    updatedAt: Date | null
    adsCost: number | null
    memberId: string | null
    platformId: number | null
    businessAcc: number | null
  }

  export type AdsCostMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    createAt: Date | null
    updatedAt: Date | null
    adsCost: number | null
    memberId: string | null
    platformId: number | null
    businessAcc: number | null
  }

  export type AdsCostCountAggregateOutputType = {
    id: number
    date: number
    createAt: number
    updatedAt: number
    adsCost: number
    memberId: number
    platformId: number
    businessAcc: number
    _all: number
  }


  export type AdsCostAvgAggregateInputType = {
    id?: true
    adsCost?: true
    platformId?: true
    businessAcc?: true
  }

  export type AdsCostSumAggregateInputType = {
    id?: true
    adsCost?: true
    platformId?: true
    businessAcc?: true
  }

  export type AdsCostMinAggregateInputType = {
    id?: true
    date?: true
    createAt?: true
    updatedAt?: true
    adsCost?: true
    memberId?: true
    platformId?: true
    businessAcc?: true
  }

  export type AdsCostMaxAggregateInputType = {
    id?: true
    date?: true
    createAt?: true
    updatedAt?: true
    adsCost?: true
    memberId?: true
    platformId?: true
    businessAcc?: true
  }

  export type AdsCostCountAggregateInputType = {
    id?: true
    date?: true
    createAt?: true
    updatedAt?: true
    adsCost?: true
    memberId?: true
    platformId?: true
    businessAcc?: true
    _all?: true
  }

  export type AdsCostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdsCost to aggregate.
     */
    where?: AdsCostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdsCosts to fetch.
     */
    orderBy?: AdsCostOrderByWithRelationInput | AdsCostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AdsCostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdsCosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdsCosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AdsCosts
    **/
    _count?: true | AdsCostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AdsCostAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AdsCostSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AdsCostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AdsCostMaxAggregateInputType
  }

  export type GetAdsCostAggregateType<T extends AdsCostAggregateArgs> = {
        [P in keyof T & keyof AggregateAdsCost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAdsCost[P]>
      : GetScalarType<T[P], AggregateAdsCost[P]>
  }




  export type AdsCostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AdsCostWhereInput
    orderBy?: AdsCostOrderByWithAggregationInput | AdsCostOrderByWithAggregationInput[]
    by: AdsCostScalarFieldEnum[] | AdsCostScalarFieldEnum
    having?: AdsCostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AdsCostCountAggregateInputType | true
    _avg?: AdsCostAvgAggregateInputType
    _sum?: AdsCostSumAggregateInputType
    _min?: AdsCostMinAggregateInputType
    _max?: AdsCostMaxAggregateInputType
  }

  export type AdsCostGroupByOutputType = {
    id: number
    date: Date
    createAt: Date
    updatedAt: Date
    adsCost: number
    memberId: string
    platformId: number
    businessAcc: number
    _count: AdsCostCountAggregateOutputType | null
    _avg: AdsCostAvgAggregateOutputType | null
    _sum: AdsCostSumAggregateOutputType | null
    _min: AdsCostMinAggregateOutputType | null
    _max: AdsCostMaxAggregateOutputType | null
  }

  type GetAdsCostGroupByPayload<T extends AdsCostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AdsCostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AdsCostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AdsCostGroupByOutputType[P]>
            : GetScalarType<T[P], AdsCostGroupByOutputType[P]>
        }
      >
    >


  export type AdsCostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    createAt?: boolean
    updatedAt?: boolean
    adsCost?: boolean
    memberId?: boolean
    platformId?: boolean
    businessAcc?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adsCost"]>

  export type AdsCostSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    createAt?: boolean
    updatedAt?: boolean
    adsCost?: boolean
    memberId?: boolean
    platformId?: boolean
    businessAcc?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["adsCost"]>

  export type AdsCostSelectScalar = {
    id?: boolean
    date?: boolean
    createAt?: boolean
    updatedAt?: boolean
    adsCost?: boolean
    memberId?: boolean
    platformId?: boolean
    businessAcc?: boolean
  }

  export type AdsCostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
  }
  export type AdsCostIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
    platform?: boolean | PlatformDefaultArgs<ExtArgs>
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
  }

  export type $AdsCostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AdsCost"
    objects: {
      member: Prisma.$MemberPayload<ExtArgs>
      platform: Prisma.$PlatformPayload<ExtArgs>
      businessId: Prisma.$BusinessAccPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      createAt: Date
      updatedAt: Date
      adsCost: number
      memberId: string
      platformId: number
      businessAcc: number
    }, ExtArgs["result"]["adsCost"]>
    composites: {}
  }

  type AdsCostGetPayload<S extends boolean | null | undefined | AdsCostDefaultArgs> = $Result.GetResult<Prisma.$AdsCostPayload, S>

  type AdsCostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AdsCostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AdsCostCountAggregateInputType | true
    }

  export interface AdsCostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AdsCost'], meta: { name: 'AdsCost' } }
    /**
     * Find zero or one AdsCost that matches the filter.
     * @param {AdsCostFindUniqueArgs} args - Arguments to find a AdsCost
     * @example
     * // Get one AdsCost
     * const adsCost = await prisma.adsCost.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AdsCostFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AdsCostFindUniqueArgs<ExtArgs>>
    ): Prisma__AdsCostClient<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one AdsCost that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AdsCostFindUniqueOrThrowArgs} args - Arguments to find a AdsCost
     * @example
     * // Get one AdsCost
     * const adsCost = await prisma.adsCost.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AdsCostFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdsCostFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AdsCostClient<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first AdsCost that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdsCostFindFirstArgs} args - Arguments to find a AdsCost
     * @example
     * // Get one AdsCost
     * const adsCost = await prisma.adsCost.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AdsCostFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AdsCostFindFirstArgs<ExtArgs>>
    ): Prisma__AdsCostClient<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first AdsCost that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdsCostFindFirstOrThrowArgs} args - Arguments to find a AdsCost
     * @example
     * // Get one AdsCost
     * const adsCost = await prisma.adsCost.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AdsCostFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AdsCostFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AdsCostClient<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more AdsCosts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdsCostFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AdsCosts
     * const adsCosts = await prisma.adsCost.findMany()
     * 
     * // Get first 10 AdsCosts
     * const adsCosts = await prisma.adsCost.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const adsCostWithIdOnly = await prisma.adsCost.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AdsCostFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdsCostFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a AdsCost.
     * @param {AdsCostCreateArgs} args - Arguments to create a AdsCost.
     * @example
     * // Create one AdsCost
     * const AdsCost = await prisma.adsCost.create({
     *   data: {
     *     // ... data to create a AdsCost
     *   }
     * })
     * 
    **/
    create<T extends AdsCostCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AdsCostCreateArgs<ExtArgs>>
    ): Prisma__AdsCostClient<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many AdsCosts.
     * @param {AdsCostCreateManyArgs} args - Arguments to create many AdsCosts.
     * @example
     * // Create many AdsCosts
     * const adsCost = await prisma.adsCost.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends AdsCostCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdsCostCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AdsCosts and returns the data saved in the database.
     * @param {AdsCostCreateManyAndReturnArgs} args - Arguments to create many AdsCosts.
     * @example
     * // Create many AdsCosts
     * const adsCost = await prisma.adsCost.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AdsCosts and only return the `id`
     * const adsCostWithIdOnly = await prisma.adsCost.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends AdsCostCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, AdsCostCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a AdsCost.
     * @param {AdsCostDeleteArgs} args - Arguments to delete one AdsCost.
     * @example
     * // Delete one AdsCost
     * const AdsCost = await prisma.adsCost.delete({
     *   where: {
     *     // ... filter to delete one AdsCost
     *   }
     * })
     * 
    **/
    delete<T extends AdsCostDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AdsCostDeleteArgs<ExtArgs>>
    ): Prisma__AdsCostClient<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one AdsCost.
     * @param {AdsCostUpdateArgs} args - Arguments to update one AdsCost.
     * @example
     * // Update one AdsCost
     * const adsCost = await prisma.adsCost.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AdsCostUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AdsCostUpdateArgs<ExtArgs>>
    ): Prisma__AdsCostClient<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more AdsCosts.
     * @param {AdsCostDeleteManyArgs} args - Arguments to filter AdsCosts to delete.
     * @example
     * // Delete a few AdsCosts
     * const { count } = await prisma.adsCost.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AdsCostDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AdsCostDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AdsCosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdsCostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AdsCosts
     * const adsCost = await prisma.adsCost.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AdsCostUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AdsCostUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AdsCost.
     * @param {AdsCostUpsertArgs} args - Arguments to update or create a AdsCost.
     * @example
     * // Update or create a AdsCost
     * const adsCost = await prisma.adsCost.upsert({
     *   create: {
     *     // ... data to create a AdsCost
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AdsCost we want to update
     *   }
     * })
    **/
    upsert<T extends AdsCostUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AdsCostUpsertArgs<ExtArgs>>
    ): Prisma__AdsCostClient<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of AdsCosts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdsCostCountArgs} args - Arguments to filter AdsCosts to count.
     * @example
     * // Count the number of AdsCosts
     * const count = await prisma.adsCost.count({
     *   where: {
     *     // ... the filter for the AdsCosts we want to count
     *   }
     * })
    **/
    count<T extends AdsCostCountArgs>(
      args?: Subset<T, AdsCostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AdsCostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AdsCost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdsCostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AdsCostAggregateArgs>(args: Subset<T, AdsCostAggregateArgs>): Prisma.PrismaPromise<GetAdsCostAggregateType<T>>

    /**
     * Group by AdsCost.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AdsCostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AdsCostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AdsCostGroupByArgs['orderBy'] }
        : { orderBy?: AdsCostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AdsCostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAdsCostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AdsCost model
   */
  readonly fields: AdsCostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AdsCost.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AdsCostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    platform<T extends PlatformDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlatformDefaultArgs<ExtArgs>>): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    businessId<T extends BusinessAccDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BusinessAccDefaultArgs<ExtArgs>>): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the AdsCost model
   */ 
  interface AdsCostFieldRefs {
    readonly id: FieldRef<"AdsCost", 'Int'>
    readonly date: FieldRef<"AdsCost", 'DateTime'>
    readonly createAt: FieldRef<"AdsCost", 'DateTime'>
    readonly updatedAt: FieldRef<"AdsCost", 'DateTime'>
    readonly adsCost: FieldRef<"AdsCost", 'Int'>
    readonly memberId: FieldRef<"AdsCost", 'String'>
    readonly platformId: FieldRef<"AdsCost", 'Int'>
    readonly businessAcc: FieldRef<"AdsCost", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * AdsCost findUnique
   */
  export type AdsCostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    /**
     * Filter, which AdsCost to fetch.
     */
    where: AdsCostWhereUniqueInput
  }

  /**
   * AdsCost findUniqueOrThrow
   */
  export type AdsCostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    /**
     * Filter, which AdsCost to fetch.
     */
    where: AdsCostWhereUniqueInput
  }

  /**
   * AdsCost findFirst
   */
  export type AdsCostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    /**
     * Filter, which AdsCost to fetch.
     */
    where?: AdsCostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdsCosts to fetch.
     */
    orderBy?: AdsCostOrderByWithRelationInput | AdsCostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdsCosts.
     */
    cursor?: AdsCostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdsCosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdsCosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdsCosts.
     */
    distinct?: AdsCostScalarFieldEnum | AdsCostScalarFieldEnum[]
  }

  /**
   * AdsCost findFirstOrThrow
   */
  export type AdsCostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    /**
     * Filter, which AdsCost to fetch.
     */
    where?: AdsCostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdsCosts to fetch.
     */
    orderBy?: AdsCostOrderByWithRelationInput | AdsCostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AdsCosts.
     */
    cursor?: AdsCostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdsCosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdsCosts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AdsCosts.
     */
    distinct?: AdsCostScalarFieldEnum | AdsCostScalarFieldEnum[]
  }

  /**
   * AdsCost findMany
   */
  export type AdsCostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    /**
     * Filter, which AdsCosts to fetch.
     */
    where?: AdsCostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AdsCosts to fetch.
     */
    orderBy?: AdsCostOrderByWithRelationInput | AdsCostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AdsCosts.
     */
    cursor?: AdsCostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AdsCosts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AdsCosts.
     */
    skip?: number
    distinct?: AdsCostScalarFieldEnum | AdsCostScalarFieldEnum[]
  }

  /**
   * AdsCost create
   */
  export type AdsCostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    /**
     * The data needed to create a AdsCost.
     */
    data: XOR<AdsCostCreateInput, AdsCostUncheckedCreateInput>
  }

  /**
   * AdsCost createMany
   */
  export type AdsCostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AdsCosts.
     */
    data: AdsCostCreateManyInput | AdsCostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AdsCost createManyAndReturn
   */
  export type AdsCostCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AdsCosts.
     */
    data: AdsCostCreateManyInput | AdsCostCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AdsCost update
   */
  export type AdsCostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    /**
     * The data needed to update a AdsCost.
     */
    data: XOR<AdsCostUpdateInput, AdsCostUncheckedUpdateInput>
    /**
     * Choose, which AdsCost to update.
     */
    where: AdsCostWhereUniqueInput
  }

  /**
   * AdsCost updateMany
   */
  export type AdsCostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AdsCosts.
     */
    data: XOR<AdsCostUpdateManyMutationInput, AdsCostUncheckedUpdateManyInput>
    /**
     * Filter which AdsCosts to update
     */
    where?: AdsCostWhereInput
  }

  /**
   * AdsCost upsert
   */
  export type AdsCostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    /**
     * The filter to search for the AdsCost to update in case it exists.
     */
    where: AdsCostWhereUniqueInput
    /**
     * In case the AdsCost found by the `where` argument doesn't exist, create a new AdsCost with this data.
     */
    create: XOR<AdsCostCreateInput, AdsCostUncheckedCreateInput>
    /**
     * In case the AdsCost was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AdsCostUpdateInput, AdsCostUncheckedUpdateInput>
  }

  /**
   * AdsCost delete
   */
  export type AdsCostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    /**
     * Filter which AdsCost to delete.
     */
    where: AdsCostWhereUniqueInput
  }

  /**
   * AdsCost deleteMany
   */
  export type AdsCostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AdsCosts to delete
     */
    where?: AdsCostWhereInput
  }

  /**
   * AdsCost without action
   */
  export type AdsCostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
  }


  /**
   * Model Expence
   */

  export type AggregateExpence = {
    _count: ExpenceCountAggregateOutputType | null
    _avg: ExpenceAvgAggregateOutputType | null
    _sum: ExpenceSumAggregateOutputType | null
    _min: ExpenceMinAggregateOutputType | null
    _max: ExpenceMaxAggregateOutputType | null
  }

  export type ExpenceAvgAggregateOutputType = {
    id: number | null
    amount: number | null
    businessAcc: number | null
  }

  export type ExpenceSumAggregateOutputType = {
    id: number | null
    amount: number | null
    businessAcc: number | null
  }

  export type ExpenceMinAggregateOutputType = {
    date: Date | null
    createAt: Date | null
    updatedAt: Date | null
    id: number | null
    amount: number | null
    group: string | null
    image: string | null
    businessAcc: number | null
    memberId: string | null
  }

  export type ExpenceMaxAggregateOutputType = {
    date: Date | null
    createAt: Date | null
    updatedAt: Date | null
    id: number | null
    amount: number | null
    group: string | null
    image: string | null
    businessAcc: number | null
    memberId: string | null
  }

  export type ExpenceCountAggregateOutputType = {
    date: number
    createAt: number
    updatedAt: number
    id: number
    amount: number
    group: number
    image: number
    businessAcc: number
    memberId: number
    _all: number
  }


  export type ExpenceAvgAggregateInputType = {
    id?: true
    amount?: true
    businessAcc?: true
  }

  export type ExpenceSumAggregateInputType = {
    id?: true
    amount?: true
    businessAcc?: true
  }

  export type ExpenceMinAggregateInputType = {
    date?: true
    createAt?: true
    updatedAt?: true
    id?: true
    amount?: true
    group?: true
    image?: true
    businessAcc?: true
    memberId?: true
  }

  export type ExpenceMaxAggregateInputType = {
    date?: true
    createAt?: true
    updatedAt?: true
    id?: true
    amount?: true
    group?: true
    image?: true
    businessAcc?: true
    memberId?: true
  }

  export type ExpenceCountAggregateInputType = {
    date?: true
    createAt?: true
    updatedAt?: true
    id?: true
    amount?: true
    group?: true
    image?: true
    businessAcc?: true
    memberId?: true
    _all?: true
  }

  export type ExpenceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expence to aggregate.
     */
    where?: ExpenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expences to fetch.
     */
    orderBy?: ExpenceOrderByWithRelationInput | ExpenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExpenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Expences
    **/
    _count?: true | ExpenceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ExpenceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ExpenceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExpenceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExpenceMaxAggregateInputType
  }

  export type GetExpenceAggregateType<T extends ExpenceAggregateArgs> = {
        [P in keyof T & keyof AggregateExpence]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExpence[P]>
      : GetScalarType<T[P], AggregateExpence[P]>
  }




  export type ExpenceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExpenceWhereInput
    orderBy?: ExpenceOrderByWithAggregationInput | ExpenceOrderByWithAggregationInput[]
    by: ExpenceScalarFieldEnum[] | ExpenceScalarFieldEnum
    having?: ExpenceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExpenceCountAggregateInputType | true
    _avg?: ExpenceAvgAggregateInputType
    _sum?: ExpenceSumAggregateInputType
    _min?: ExpenceMinAggregateInputType
    _max?: ExpenceMaxAggregateInputType
  }

  export type ExpenceGroupByOutputType = {
    date: Date
    createAt: Date
    updatedAt: Date
    id: number
    amount: number
    group: string
    image: string
    businessAcc: number
    memberId: string
    _count: ExpenceCountAggregateOutputType | null
    _avg: ExpenceAvgAggregateOutputType | null
    _sum: ExpenceSumAggregateOutputType | null
    _min: ExpenceMinAggregateOutputType | null
    _max: ExpenceMaxAggregateOutputType | null
  }

  type GetExpenceGroupByPayload<T extends ExpenceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExpenceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExpenceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExpenceGroupByOutputType[P]>
            : GetScalarType<T[P], ExpenceGroupByOutputType[P]>
        }
      >
    >


  export type ExpenceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    date?: boolean
    createAt?: boolean
    updatedAt?: boolean
    id?: boolean
    amount?: boolean
    group?: boolean
    image?: boolean
    businessAcc?: boolean
    memberId?: boolean
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expence"]>

  export type ExpenceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    date?: boolean
    createAt?: boolean
    updatedAt?: boolean
    id?: boolean
    amount?: boolean
    group?: boolean
    image?: boolean
    businessAcc?: boolean
    memberId?: boolean
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["expence"]>

  export type ExpenceSelectScalar = {
    date?: boolean
    createAt?: boolean
    updatedAt?: boolean
    id?: boolean
    amount?: boolean
    group?: boolean
    image?: boolean
    businessAcc?: boolean
    memberId?: boolean
  }

  export type ExpenceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }
  export type ExpenceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    businessId?: boolean | BusinessAccDefaultArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $ExpencePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Expence"
    objects: {
      businessId: Prisma.$BusinessAccPayload<ExtArgs>
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      date: Date
      createAt: Date
      updatedAt: Date
      id: number
      amount: number
      group: string
      image: string
      businessAcc: number
      memberId: string
    }, ExtArgs["result"]["expence"]>
    composites: {}
  }

  type ExpenceGetPayload<S extends boolean | null | undefined | ExpenceDefaultArgs> = $Result.GetResult<Prisma.$ExpencePayload, S>

  type ExpenceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExpenceFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExpenceCountAggregateInputType | true
    }

  export interface ExpenceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Expence'], meta: { name: 'Expence' } }
    /**
     * Find zero or one Expence that matches the filter.
     * @param {ExpenceFindUniqueArgs} args - Arguments to find a Expence
     * @example
     * // Get one Expence
     * const expence = await prisma.expence.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExpenceFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExpenceFindUniqueArgs<ExtArgs>>
    ): Prisma__ExpenceClient<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Expence that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ExpenceFindUniqueOrThrowArgs} args - Arguments to find a Expence
     * @example
     * // Get one Expence
     * const expence = await prisma.expence.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExpenceFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpenceFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExpenceClient<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Expence that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenceFindFirstArgs} args - Arguments to find a Expence
     * @example
     * // Get one Expence
     * const expence = await prisma.expence.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExpenceFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpenceFindFirstArgs<ExtArgs>>
    ): Prisma__ExpenceClient<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Expence that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenceFindFirstOrThrowArgs} args - Arguments to find a Expence
     * @example
     * // Get one Expence
     * const expence = await prisma.expence.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExpenceFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpenceFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExpenceClient<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Expences that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Expences
     * const expences = await prisma.expence.findMany()
     * 
     * // Get first 10 Expences
     * const expences = await prisma.expence.findMany({ take: 10 })
     * 
     * // Only select the `date`
     * const expenceWithDateOnly = await prisma.expence.findMany({ select: { date: true } })
     * 
    **/
    findMany<T extends ExpenceFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpenceFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Expence.
     * @param {ExpenceCreateArgs} args - Arguments to create a Expence.
     * @example
     * // Create one Expence
     * const Expence = await prisma.expence.create({
     *   data: {
     *     // ... data to create a Expence
     *   }
     * })
     * 
    **/
    create<T extends ExpenceCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExpenceCreateArgs<ExtArgs>>
    ): Prisma__ExpenceClient<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Expences.
     * @param {ExpenceCreateManyArgs} args - Arguments to create many Expences.
     * @example
     * // Create many Expences
     * const expence = await prisma.expence.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ExpenceCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpenceCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Expences and returns the data saved in the database.
     * @param {ExpenceCreateManyAndReturnArgs} args - Arguments to create many Expences.
     * @example
     * // Create many Expences
     * const expence = await prisma.expence.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Expences and only return the `date`
     * const expenceWithDateOnly = await prisma.expence.createManyAndReturn({ 
     *   select: { date: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ExpenceCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpenceCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Expence.
     * @param {ExpenceDeleteArgs} args - Arguments to delete one Expence.
     * @example
     * // Delete one Expence
     * const Expence = await prisma.expence.delete({
     *   where: {
     *     // ... filter to delete one Expence
     *   }
     * })
     * 
    **/
    delete<T extends ExpenceDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExpenceDeleteArgs<ExtArgs>>
    ): Prisma__ExpenceClient<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Expence.
     * @param {ExpenceUpdateArgs} args - Arguments to update one Expence.
     * @example
     * // Update one Expence
     * const expence = await prisma.expence.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExpenceUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExpenceUpdateArgs<ExtArgs>>
    ): Prisma__ExpenceClient<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Expences.
     * @param {ExpenceDeleteManyArgs} args - Arguments to filter Expences to delete.
     * @example
     * // Delete a few Expences
     * const { count } = await prisma.expence.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExpenceDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExpenceDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Expences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Expences
     * const expence = await prisma.expence.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExpenceUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExpenceUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Expence.
     * @param {ExpenceUpsertArgs} args - Arguments to update or create a Expence.
     * @example
     * // Update or create a Expence
     * const expence = await prisma.expence.upsert({
     *   create: {
     *     // ... data to create a Expence
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Expence we want to update
     *   }
     * })
    **/
    upsert<T extends ExpenceUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExpenceUpsertArgs<ExtArgs>>
    ): Prisma__ExpenceClient<$Result.GetResult<Prisma.$ExpencePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Expences.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenceCountArgs} args - Arguments to filter Expences to count.
     * @example
     * // Count the number of Expences
     * const count = await prisma.expence.count({
     *   where: {
     *     // ... the filter for the Expences we want to count
     *   }
     * })
    **/
    count<T extends ExpenceCountArgs>(
      args?: Subset<T, ExpenceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExpenceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Expence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExpenceAggregateArgs>(args: Subset<T, ExpenceAggregateArgs>): Prisma.PrismaPromise<GetExpenceAggregateType<T>>

    /**
     * Group by Expence.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExpenceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExpenceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExpenceGroupByArgs['orderBy'] }
        : { orderBy?: ExpenceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExpenceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExpenceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Expence model
   */
  readonly fields: ExpenceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Expence.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExpenceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    businessId<T extends BusinessAccDefaultArgs<ExtArgs> = {}>(args?: Subset<T, BusinessAccDefaultArgs<ExtArgs>>): Prisma__BusinessAccClient<$Result.GetResult<Prisma.$BusinessAccPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Expence model
   */ 
  interface ExpenceFieldRefs {
    readonly date: FieldRef<"Expence", 'DateTime'>
    readonly createAt: FieldRef<"Expence", 'DateTime'>
    readonly updatedAt: FieldRef<"Expence", 'DateTime'>
    readonly id: FieldRef<"Expence", 'Int'>
    readonly amount: FieldRef<"Expence", 'Int'>
    readonly group: FieldRef<"Expence", 'String'>
    readonly image: FieldRef<"Expence", 'String'>
    readonly businessAcc: FieldRef<"Expence", 'Int'>
    readonly memberId: FieldRef<"Expence", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Expence findUnique
   */
  export type ExpenceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    /**
     * Filter, which Expence to fetch.
     */
    where: ExpenceWhereUniqueInput
  }

  /**
   * Expence findUniqueOrThrow
   */
  export type ExpenceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    /**
     * Filter, which Expence to fetch.
     */
    where: ExpenceWhereUniqueInput
  }

  /**
   * Expence findFirst
   */
  export type ExpenceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    /**
     * Filter, which Expence to fetch.
     */
    where?: ExpenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expences to fetch.
     */
    orderBy?: ExpenceOrderByWithRelationInput | ExpenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expences.
     */
    cursor?: ExpenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expences.
     */
    distinct?: ExpenceScalarFieldEnum | ExpenceScalarFieldEnum[]
  }

  /**
   * Expence findFirstOrThrow
   */
  export type ExpenceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    /**
     * Filter, which Expence to fetch.
     */
    where?: ExpenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expences to fetch.
     */
    orderBy?: ExpenceOrderByWithRelationInput | ExpenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Expences.
     */
    cursor?: ExpenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expences.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Expences.
     */
    distinct?: ExpenceScalarFieldEnum | ExpenceScalarFieldEnum[]
  }

  /**
   * Expence findMany
   */
  export type ExpenceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    /**
     * Filter, which Expences to fetch.
     */
    where?: ExpenceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Expences to fetch.
     */
    orderBy?: ExpenceOrderByWithRelationInput | ExpenceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Expences.
     */
    cursor?: ExpenceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Expences from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Expences.
     */
    skip?: number
    distinct?: ExpenceScalarFieldEnum | ExpenceScalarFieldEnum[]
  }

  /**
   * Expence create
   */
  export type ExpenceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    /**
     * The data needed to create a Expence.
     */
    data: XOR<ExpenceCreateInput, ExpenceUncheckedCreateInput>
  }

  /**
   * Expence createMany
   */
  export type ExpenceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Expences.
     */
    data: ExpenceCreateManyInput | ExpenceCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Expence createManyAndReturn
   */
  export type ExpenceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Expences.
     */
    data: ExpenceCreateManyInput | ExpenceCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Expence update
   */
  export type ExpenceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    /**
     * The data needed to update a Expence.
     */
    data: XOR<ExpenceUpdateInput, ExpenceUncheckedUpdateInput>
    /**
     * Choose, which Expence to update.
     */
    where: ExpenceWhereUniqueInput
  }

  /**
   * Expence updateMany
   */
  export type ExpenceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Expences.
     */
    data: XOR<ExpenceUpdateManyMutationInput, ExpenceUncheckedUpdateManyInput>
    /**
     * Filter which Expences to update
     */
    where?: ExpenceWhereInput
  }

  /**
   * Expence upsert
   */
  export type ExpenceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    /**
     * The filter to search for the Expence to update in case it exists.
     */
    where: ExpenceWhereUniqueInput
    /**
     * In case the Expence found by the `where` argument doesn't exist, create a new Expence with this data.
     */
    create: XOR<ExpenceCreateInput, ExpenceUncheckedCreateInput>
    /**
     * In case the Expence was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExpenceUpdateInput, ExpenceUncheckedUpdateInput>
  }

  /**
   * Expence delete
   */
  export type ExpenceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
    /**
     * Filter which Expence to delete.
     */
    where: ExpenceWhereUniqueInput
  }

  /**
   * Expence deleteMany
   */
  export type ExpenceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Expences to delete
     */
    where?: ExpenceWhereInput
  }

  /**
   * Expence without action
   */
  export type ExpenceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Expence
     */
    select?: ExpenceSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ExpenceInclude<ExtArgs> | null
  }


  /**
   * Model Platform
   */

  export type AggregatePlatform = {
    _count: PlatformCountAggregateOutputType | null
    _avg: PlatformAvgAggregateOutputType | null
    _sum: PlatformSumAggregateOutputType | null
    _min: PlatformMinAggregateOutputType | null
    _max: PlatformMaxAggregateOutputType | null
  }

  export type PlatformAvgAggregateOutputType = {
    id: number | null
  }

  export type PlatformSumAggregateOutputType = {
    id: number | null
  }

  export type PlatformMinAggregateOutputType = {
    id: number | null
    platform: string | null
    accName: string | null
    accId: string | null
    createAt: Date | null
    updatedAt: Date | null
  }

  export type PlatformMaxAggregateOutputType = {
    id: number | null
    platform: string | null
    accName: string | null
    accId: string | null
    createAt: Date | null
    updatedAt: Date | null
  }

  export type PlatformCountAggregateOutputType = {
    id: number
    platform: number
    accName: number
    accId: number
    createAt: number
    updatedAt: number
    _all: number
  }


  export type PlatformAvgAggregateInputType = {
    id?: true
  }

  export type PlatformSumAggregateInputType = {
    id?: true
  }

  export type PlatformMinAggregateInputType = {
    id?: true
    platform?: true
    accName?: true
    accId?: true
    createAt?: true
    updatedAt?: true
  }

  export type PlatformMaxAggregateInputType = {
    id?: true
    platform?: true
    accName?: true
    accId?: true
    createAt?: true
    updatedAt?: true
  }

  export type PlatformCountAggregateInputType = {
    id?: true
    platform?: true
    accName?: true
    accId?: true
    createAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlatformAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platform to aggregate.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Platforms
    **/
    _count?: true | PlatformCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlatformAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlatformSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlatformMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlatformMaxAggregateInputType
  }

  export type GetPlatformAggregateType<T extends PlatformAggregateArgs> = {
        [P in keyof T & keyof AggregatePlatform]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlatform[P]>
      : GetScalarType<T[P], AggregatePlatform[P]>
  }




  export type PlatformGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlatformWhereInput
    orderBy?: PlatformOrderByWithAggregationInput | PlatformOrderByWithAggregationInput[]
    by: PlatformScalarFieldEnum[] | PlatformScalarFieldEnum
    having?: PlatformScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlatformCountAggregateInputType | true
    _avg?: PlatformAvgAggregateInputType
    _sum?: PlatformSumAggregateInputType
    _min?: PlatformMinAggregateInputType
    _max?: PlatformMaxAggregateInputType
  }

  export type PlatformGroupByOutputType = {
    id: number
    platform: string
    accName: string
    accId: string
    createAt: Date
    updatedAt: Date
    _count: PlatformCountAggregateOutputType | null
    _avg: PlatformAvgAggregateOutputType | null
    _sum: PlatformSumAggregateOutputType | null
    _min: PlatformMinAggregateOutputType | null
    _max: PlatformMaxAggregateOutputType | null
  }

  type GetPlatformGroupByPayload<T extends PlatformGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlatformGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlatformGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlatformGroupByOutputType[P]>
            : GetScalarType<T[P], PlatformGroupByOutputType[P]>
        }
      >
    >


  export type PlatformSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platform?: boolean
    accName?: boolean
    accId?: boolean
    createAt?: boolean
    updatedAt?: boolean
    platformId?: boolean | Platform$platformIdArgs<ExtArgs>
    _count?: boolean | PlatformCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["platform"]>

  export type PlatformSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    platform?: boolean
    accName?: boolean
    accId?: boolean
    createAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["platform"]>

  export type PlatformSelectScalar = {
    id?: boolean
    platform?: boolean
    accName?: boolean
    accId?: boolean
    createAt?: boolean
    updatedAt?: boolean
  }

  export type PlatformInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    platformId?: boolean | Platform$platformIdArgs<ExtArgs>
    _count?: boolean | PlatformCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PlatformIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $PlatformPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Platform"
    objects: {
      platformId: Prisma.$AdsCostPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      platform: string
      accName: string
      accId: string
      createAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["platform"]>
    composites: {}
  }

  type PlatformGetPayload<S extends boolean | null | undefined | PlatformDefaultArgs> = $Result.GetResult<Prisma.$PlatformPayload, S>

  type PlatformCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlatformFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlatformCountAggregateInputType | true
    }

  export interface PlatformDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Platform'], meta: { name: 'Platform' } }
    /**
     * Find zero or one Platform that matches the filter.
     * @param {PlatformFindUniqueArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlatformFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformFindUniqueArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Platform that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {PlatformFindUniqueOrThrowArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlatformFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Platform that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindFirstArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlatformFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformFindFirstArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Platform that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindFirstOrThrowArgs} args - Arguments to find a Platform
     * @example
     * // Get one Platform
     * const platform = await prisma.platform.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlatformFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Platforms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Platforms
     * const platforms = await prisma.platform.findMany()
     * 
     * // Get first 10 Platforms
     * const platforms = await prisma.platform.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const platformWithIdOnly = await prisma.platform.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlatformFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Platform.
     * @param {PlatformCreateArgs} args - Arguments to create a Platform.
     * @example
     * // Create one Platform
     * const Platform = await prisma.platform.create({
     *   data: {
     *     // ... data to create a Platform
     *   }
     * })
     * 
    **/
    create<T extends PlatformCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformCreateArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Platforms.
     * @param {PlatformCreateManyArgs} args - Arguments to create many Platforms.
     * @example
     * // Create many Platforms
     * const platform = await prisma.platform.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends PlatformCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Platforms and returns the data saved in the database.
     * @param {PlatformCreateManyAndReturnArgs} args - Arguments to create many Platforms.
     * @example
     * // Create many Platforms
     * const platform = await prisma.platform.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Platforms and only return the `id`
     * const platformWithIdOnly = await prisma.platform.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends PlatformCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Platform.
     * @param {PlatformDeleteArgs} args - Arguments to delete one Platform.
     * @example
     * // Delete one Platform
     * const Platform = await prisma.platform.delete({
     *   where: {
     *     // ... filter to delete one Platform
     *   }
     * })
     * 
    **/
    delete<T extends PlatformDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformDeleteArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Platform.
     * @param {PlatformUpdateArgs} args - Arguments to update one Platform.
     * @example
     * // Update one Platform
     * const platform = await prisma.platform.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlatformUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformUpdateArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Platforms.
     * @param {PlatformDeleteManyArgs} args - Arguments to filter Platforms to delete.
     * @example
     * // Delete a few Platforms
     * const { count } = await prisma.platform.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlatformDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlatformDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Platforms
     * const platform = await prisma.platform.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlatformUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Platform.
     * @param {PlatformUpsertArgs} args - Arguments to update or create a Platform.
     * @example
     * // Update or create a Platform
     * const platform = await prisma.platform.upsert({
     *   create: {
     *     // ... data to create a Platform
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Platform we want to update
     *   }
     * })
    **/
    upsert<T extends PlatformUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlatformUpsertArgs<ExtArgs>>
    ): Prisma__PlatformClient<$Result.GetResult<Prisma.$PlatformPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Platforms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformCountArgs} args - Arguments to filter Platforms to count.
     * @example
     * // Count the number of Platforms
     * const count = await prisma.platform.count({
     *   where: {
     *     // ... the filter for the Platforms we want to count
     *   }
     * })
    **/
    count<T extends PlatformCountArgs>(
      args?: Subset<T, PlatformCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlatformCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlatformAggregateArgs>(args: Subset<T, PlatformAggregateArgs>): Prisma.PrismaPromise<GetPlatformAggregateType<T>>

    /**
     * Group by Platform.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlatformGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlatformGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlatformGroupByArgs['orderBy'] }
        : { orderBy?: PlatformGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlatformGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlatformGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Platform model
   */
  readonly fields: PlatformFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Platform.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlatformClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    platformId<T extends Platform$platformIdArgs<ExtArgs> = {}>(args?: Subset<T, Platform$platformIdArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AdsCostPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Platform model
   */ 
  interface PlatformFieldRefs {
    readonly id: FieldRef<"Platform", 'Int'>
    readonly platform: FieldRef<"Platform", 'String'>
    readonly accName: FieldRef<"Platform", 'String'>
    readonly accId: FieldRef<"Platform", 'String'>
    readonly createAt: FieldRef<"Platform", 'DateTime'>
    readonly updatedAt: FieldRef<"Platform", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Platform findUnique
   */
  export type PlatformFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform findUniqueOrThrow
   */
  export type PlatformFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform findFirst
   */
  export type PlatformFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platforms.
     */
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }

  /**
   * Platform findFirstOrThrow
   */
  export type PlatformFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platform to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Platforms.
     */
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }

  /**
   * Platform findMany
   */
  export type PlatformFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter, which Platforms to fetch.
     */
    where?: PlatformWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Platforms to fetch.
     */
    orderBy?: PlatformOrderByWithRelationInput | PlatformOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Platforms.
     */
    cursor?: PlatformWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Platforms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Platforms.
     */
    skip?: number
    distinct?: PlatformScalarFieldEnum | PlatformScalarFieldEnum[]
  }

  /**
   * Platform create
   */
  export type PlatformCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The data needed to create a Platform.
     */
    data: XOR<PlatformCreateInput, PlatformUncheckedCreateInput>
  }

  /**
   * Platform createMany
   */
  export type PlatformCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Platforms.
     */
    data: PlatformCreateManyInput | PlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Platform createManyAndReturn
   */
  export type PlatformCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Platforms.
     */
    data: PlatformCreateManyInput | PlatformCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Platform update
   */
  export type PlatformUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The data needed to update a Platform.
     */
    data: XOR<PlatformUpdateInput, PlatformUncheckedUpdateInput>
    /**
     * Choose, which Platform to update.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform updateMany
   */
  export type PlatformUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Platforms.
     */
    data: XOR<PlatformUpdateManyMutationInput, PlatformUncheckedUpdateManyInput>
    /**
     * Filter which Platforms to update
     */
    where?: PlatformWhereInput
  }

  /**
   * Platform upsert
   */
  export type PlatformUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * The filter to search for the Platform to update in case it exists.
     */
    where: PlatformWhereUniqueInput
    /**
     * In case the Platform found by the `where` argument doesn't exist, create a new Platform with this data.
     */
    create: XOR<PlatformCreateInput, PlatformUncheckedCreateInput>
    /**
     * In case the Platform was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlatformUpdateInput, PlatformUncheckedUpdateInput>
  }

  /**
   * Platform delete
   */
  export type PlatformDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
    /**
     * Filter which Platform to delete.
     */
    where: PlatformWhereUniqueInput
  }

  /**
   * Platform deleteMany
   */
  export type PlatformDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Platforms to delete
     */
    where?: PlatformWhereInput
  }

  /**
   * Platform.platformId
   */
  export type Platform$platformIdArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AdsCost
     */
    select?: AdsCostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AdsCostInclude<ExtArgs> | null
    where?: AdsCostWhereInput
    orderBy?: AdsCostOrderByWithRelationInput | AdsCostOrderByWithRelationInput[]
    cursor?: AdsCostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AdsCostScalarFieldEnum | AdsCostScalarFieldEnum[]
  }

  /**
   * Platform without action
   */
  export type PlatformDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Platform
     */
    select?: PlatformSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlatformInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductAvgAggregateOutputType = {
    id: number | null
    stock: number | null
    price: number | null
    categoryId: number | null
    statusId: number | null
  }

  export type ProductSumAggregateOutputType = {
    id: number | null
    stock: number | null
    price: number | null
    categoryId: number | null
    statusId: number | null
  }

  export type ProductMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    barcode: string | null
    image: string | null
    stock: number | null
    price: number | null
    categoryId: number | null
    memberId: string | null
    statusId: number | null
    createdId: Date | null
    updatedId: Date | null
  }

  export type ProductMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    barcode: string | null
    image: string | null
    stock: number | null
    price: number | null
    categoryId: number | null
    memberId: string | null
    statusId: number | null
    createdId: Date | null
    updatedId: Date | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    description: number
    barcode: number
    image: number
    stock: number
    price: number
    categoryId: number
    memberId: number
    statusId: number
    createdId: number
    updatedId: number
    _all: number
  }


  export type ProductAvgAggregateInputType = {
    id?: true
    stock?: true
    price?: true
    categoryId?: true
    statusId?: true
  }

  export type ProductSumAggregateInputType = {
    id?: true
    stock?: true
    price?: true
    categoryId?: true
    statusId?: true
  }

  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    barcode?: true
    image?: true
    stock?: true
    price?: true
    categoryId?: true
    memberId?: true
    statusId?: true
    createdId?: true
    updatedId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    barcode?: true
    image?: true
    stock?: true
    price?: true
    categoryId?: true
    memberId?: true
    statusId?: true
    createdId?: true
    updatedId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    barcode?: true
    image?: true
    stock?: true
    price?: true
    categoryId?: true
    memberId?: true
    statusId?: true
    createdId?: true
    updatedId?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _avg?: ProductAvgAggregateInputType
    _sum?: ProductSumAggregateInputType
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: number
    name: string
    description: string | null
    barcode: string
    image: string | null
    stock: number
    price: number
    categoryId: number | null
    memberId: string
    statusId: number | null
    createdId: Date
    updatedId: Date
    _count: ProductCountAggregateOutputType | null
    _avg: ProductAvgAggregateOutputType | null
    _sum: ProductSumAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    barcode?: boolean
    image?: boolean
    stock?: boolean
    price?: boolean
    categoryId?: boolean
    memberId?: boolean
    statusId?: boolean
    createdId?: boolean
    updatedId?: boolean
    biilRecord?: boolean | Product$biilRecordArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    barcode?: boolean
    image?: boolean
    stock?: boolean
    price?: boolean
    categoryId?: boolean
    memberId?: boolean
    statusId?: boolean
    createdId?: boolean
    updatedId?: boolean
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    barcode?: boolean
    image?: boolean
    stock?: boolean
    price?: boolean
    categoryId?: boolean
    memberId?: boolean
    statusId?: boolean
    createdId?: boolean
    updatedId?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    biilRecord?: boolean | Product$biilRecordArgs<ExtArgs>
    member?: boolean | MemberDefaultArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    member?: boolean | MemberDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      biilRecord: Prisma.$BillPayload<ExtArgs>[]
      member: Prisma.$MemberPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string | null
      barcode: string
      image: string | null
      stock: number
      price: number
      categoryId: number | null
      memberId: string
      statusId: number | null
      createdId: Date
      updatedId: Date
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProductFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProductFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProductFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
    **/
    create<T extends ProductCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductCreateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
    **/
    createMany<T extends ProductCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
    **/
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'createManyAndReturn'>>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
    **/
    delete<T extends ProductDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProductUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProductDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProductUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
    **/
    upsert<T extends ProductUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>
    ): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    biilRecord<T extends Product$biilRecordArgs<ExtArgs> = {}>(args?: Subset<T, Product$biilRecordArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BillPayload<ExtArgs>, T, 'findMany'> | Null>;

    member<T extends MemberDefaultArgs<ExtArgs> = {}>(args?: Subset<T, MemberDefaultArgs<ExtArgs>>): Prisma__MemberClient<$Result.GetResult<Prisma.$MemberPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'Int'>
    readonly name: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly barcode: FieldRef<"Product", 'String'>
    readonly image: FieldRef<"Product", 'String'>
    readonly stock: FieldRef<"Product", 'Int'>
    readonly price: FieldRef<"Product", 'Int'>
    readonly categoryId: FieldRef<"Product", 'Int'>
    readonly memberId: FieldRef<"Product", 'String'>
    readonly statusId: FieldRef<"Product", 'Int'>
    readonly createdId: FieldRef<"Product", 'DateTime'>
    readonly updatedId: FieldRef<"Product", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.biilRecord
   */
  export type Product$biilRecordArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bill
     */
    select?: BillSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BillInclude<ExtArgs> | null
    where?: BillWhereInput
    orderBy?: BillOrderByWithRelationInput | BillOrderByWithRelationInput[]
    cursor?: BillWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BillScalarFieldEnum | BillScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    avatar: 'avatar',
    createAt: 'createAt',
    updatedAt: 'updatedAt',
    phone: 'phone'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const MemberScalarFieldEnum: {
    uniqueId: 'uniqueId',
    role: 'role',
    permission: 'permission',
    createAt: 'createAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type MemberScalarFieldEnum = (typeof MemberScalarFieldEnum)[keyof typeof MemberScalarFieldEnum]


  export const BusinessAccScalarFieldEnum: {
    id: 'id',
    businessName: 'businessName',
    vatId: 'vatId',
    businessType: 'businessType',
    taxType: 'taxType',
    userId: 'userId',
    memberId: 'memberId'
  };

  export type BusinessAccScalarFieldEnum = (typeof BusinessAccScalarFieldEnum)[keyof typeof BusinessAccScalarFieldEnum]


  export const BillScalarFieldEnum: {
    id: 'id',
    createAt: 'createAt',
    updatedAt: 'updatedAt',
    cName: 'cName',
    cLastname: 'cLastname',
    cPhone: 'cPhone',
    cGender: 'cGender',
    cAdress: 'cAdress',
    cProvince: 'cProvince',
    cPostId: 'cPostId',
    product: 'product',
    payment: 'payment',
    amount: 'amount',
    purcheseAt: 'purcheseAt',
    platform: 'platform',
    cashStatus: 'cashStatus',
    price: 'price',
    imageBill: 'imageBill',
    memberId: 'memberId',
    businessAcc: 'businessAcc'
  };

  export type BillScalarFieldEnum = (typeof BillScalarFieldEnum)[keyof typeof BillScalarFieldEnum]


  export const AdsCostScalarFieldEnum: {
    id: 'id',
    date: 'date',
    createAt: 'createAt',
    updatedAt: 'updatedAt',
    adsCost: 'adsCost',
    memberId: 'memberId',
    platformId: 'platformId',
    businessAcc: 'businessAcc'
  };

  export type AdsCostScalarFieldEnum = (typeof AdsCostScalarFieldEnum)[keyof typeof AdsCostScalarFieldEnum]


  export const ExpenceScalarFieldEnum: {
    date: 'date',
    createAt: 'createAt',
    updatedAt: 'updatedAt',
    id: 'id',
    amount: 'amount',
    group: 'group',
    image: 'image',
    businessAcc: 'businessAcc',
    memberId: 'memberId'
  };

  export type ExpenceScalarFieldEnum = (typeof ExpenceScalarFieldEnum)[keyof typeof ExpenceScalarFieldEnum]


  export const PlatformScalarFieldEnum: {
    id: 'id',
    platform: 'platform',
    accName: 'accName',
    accId: 'accId',
    createAt: 'createAt',
    updatedAt: 'updatedAt'
  };

  export type PlatformScalarFieldEnum = (typeof PlatformScalarFieldEnum)[keyof typeof PlatformScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    barcode: 'barcode',
    image: 'image',
    stock: 'stock',
    price: 'price',
    categoryId: 'categoryId',
    memberId: 'memberId',
    statusId: 'statusId',
    createdId: 'createdId',
    updatedId: 'updatedId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'UserRole'
   */
  export type EnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole'>
    


  /**
   * Reference to a field of type 'UserRole[]'
   */
  export type ListEnumUserRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserRole[]'>
    


  /**
   * Reference to a field of type 'taxType'
   */
  export type EnumtaxTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'taxType'>
    


  /**
   * Reference to a field of type 'taxType[]'
   */
  export type ListEnumtaxTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'taxType[]'>
    


  /**
   * Reference to a field of type 'Gender'
   */
  export type EnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender'>
    


  /**
   * Reference to a field of type 'Gender[]'
   */
  export type ListEnumGenderFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Gender[]'>
    


  /**
   * Reference to a field of type 'Payment'
   */
  export type EnumPaymentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Payment'>
    


  /**
   * Reference to a field of type 'Payment[]'
   */
  export type ListEnumPaymentFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Payment[]'>
    


  /**
   * Reference to a field of type 'SocialMedia'
   */
  export type EnumSocialMediaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SocialMedia'>
    


  /**
   * Reference to a field of type 'SocialMedia[]'
   */
  export type ListEnumSocialMediaFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'SocialMedia[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    phone?: StringFilter<"User"> | string
    business?: BusinessAccListRelationFilter
    member?: MemberListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrder
    business?: BusinessAccOrderByRelationAggregateInput
    member?: MemberOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    phone?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    firstName?: StringFilter<"User"> | string
    lastName?: StringFilter<"User"> | string
    avatar?: StringNullableFilter<"User"> | string | null
    createAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    business?: BusinessAccListRelationFilter
    member?: MemberListRelationFilter
  }, "id" | "email" | "phone">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrderInput | SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    firstName?: StringWithAggregatesFilter<"User"> | string
    lastName?: StringWithAggregatesFilter<"User"> | string
    avatar?: StringNullableWithAggregatesFilter<"User"> | string | null
    createAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    phone?: StringWithAggregatesFilter<"User"> | string
  }

  export type MemberWhereInput = {
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    uniqueId?: StringFilter<"Member"> | string
    role?: EnumUserRoleFilter<"Member"> | $Enums.UserRole
    permission?: StringFilter<"Member"> | string
    createAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
    userId?: IntFilter<"Member"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    business?: BusinessAccListRelationFilter
    bill?: BillListRelationFilter
    adsCost?: AdsCostListRelationFilter
    expence?: ExpenceListRelationFilter
    product?: ProductListRelationFilter
  }

  export type MemberOrderByWithRelationInput = {
    uniqueId?: SortOrder
    role?: SortOrder
    permission?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    business?: BusinessAccOrderByRelationAggregateInput
    bill?: BillOrderByRelationAggregateInput
    adsCost?: AdsCostOrderByRelationAggregateInput
    expence?: ExpenceOrderByRelationAggregateInput
    product?: ProductOrderByRelationAggregateInput
  }

  export type MemberWhereUniqueInput = Prisma.AtLeast<{
    uniqueId?: string
    AND?: MemberWhereInput | MemberWhereInput[]
    OR?: MemberWhereInput[]
    NOT?: MemberWhereInput | MemberWhereInput[]
    role?: EnumUserRoleFilter<"Member"> | $Enums.UserRole
    permission?: StringFilter<"Member"> | string
    createAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
    userId?: IntFilter<"Member"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    business?: BusinessAccListRelationFilter
    bill?: BillListRelationFilter
    adsCost?: AdsCostListRelationFilter
    expence?: ExpenceListRelationFilter
    product?: ProductListRelationFilter
  }, "uniqueId">

  export type MemberOrderByWithAggregationInput = {
    uniqueId?: SortOrder
    role?: SortOrder
    permission?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: MemberCountOrderByAggregateInput
    _avg?: MemberAvgOrderByAggregateInput
    _max?: MemberMaxOrderByAggregateInput
    _min?: MemberMinOrderByAggregateInput
    _sum?: MemberSumOrderByAggregateInput
  }

  export type MemberScalarWhereWithAggregatesInput = {
    AND?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    OR?: MemberScalarWhereWithAggregatesInput[]
    NOT?: MemberScalarWhereWithAggregatesInput | MemberScalarWhereWithAggregatesInput[]
    uniqueId?: StringWithAggregatesFilter<"Member"> | string
    role?: EnumUserRoleWithAggregatesFilter<"Member"> | $Enums.UserRole
    permission?: StringWithAggregatesFilter<"Member"> | string
    createAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Member"> | Date | string
    userId?: IntWithAggregatesFilter<"Member"> | number
  }

  export type BusinessAccWhereInput = {
    AND?: BusinessAccWhereInput | BusinessAccWhereInput[]
    OR?: BusinessAccWhereInput[]
    NOT?: BusinessAccWhereInput | BusinessAccWhereInput[]
    id?: IntFilter<"BusinessAcc"> | number
    businessName?: StringFilter<"BusinessAcc"> | string
    vatId?: StringFilter<"BusinessAcc"> | string
    businessType?: StringFilter<"BusinessAcc"> | string
    taxType?: EnumtaxTypeFilter<"BusinessAcc"> | $Enums.taxType
    userId?: IntFilter<"BusinessAcc"> | number
    memberId?: StringFilter<"BusinessAcc"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    bills?: XOR<MemberRelationFilter, MemberWhereInput>
    billRecord?: BillListRelationFilter
    expenceRecord?: ExpenceListRelationFilter
    adsCostRecord?: AdsCostListRelationFilter
  }

  export type BusinessAccOrderByWithRelationInput = {
    id?: SortOrder
    businessName?: SortOrder
    vatId?: SortOrder
    businessType?: SortOrder
    taxType?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
    user?: UserOrderByWithRelationInput
    bills?: MemberOrderByWithRelationInput
    billRecord?: BillOrderByRelationAggregateInput
    expenceRecord?: ExpenceOrderByRelationAggregateInput
    adsCostRecord?: AdsCostOrderByRelationAggregateInput
  }

  export type BusinessAccWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    businessName?: string
    vatId?: string
    AND?: BusinessAccWhereInput | BusinessAccWhereInput[]
    OR?: BusinessAccWhereInput[]
    NOT?: BusinessAccWhereInput | BusinessAccWhereInput[]
    businessType?: StringFilter<"BusinessAcc"> | string
    taxType?: EnumtaxTypeFilter<"BusinessAcc"> | $Enums.taxType
    userId?: IntFilter<"BusinessAcc"> | number
    memberId?: StringFilter<"BusinessAcc"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    bills?: XOR<MemberRelationFilter, MemberWhereInput>
    billRecord?: BillListRelationFilter
    expenceRecord?: ExpenceListRelationFilter
    adsCostRecord?: AdsCostListRelationFilter
  }, "id" | "businessName" | "vatId">

  export type BusinessAccOrderByWithAggregationInput = {
    id?: SortOrder
    businessName?: SortOrder
    vatId?: SortOrder
    businessType?: SortOrder
    taxType?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
    _count?: BusinessAccCountOrderByAggregateInput
    _avg?: BusinessAccAvgOrderByAggregateInput
    _max?: BusinessAccMaxOrderByAggregateInput
    _min?: BusinessAccMinOrderByAggregateInput
    _sum?: BusinessAccSumOrderByAggregateInput
  }

  export type BusinessAccScalarWhereWithAggregatesInput = {
    AND?: BusinessAccScalarWhereWithAggregatesInput | BusinessAccScalarWhereWithAggregatesInput[]
    OR?: BusinessAccScalarWhereWithAggregatesInput[]
    NOT?: BusinessAccScalarWhereWithAggregatesInput | BusinessAccScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"BusinessAcc"> | number
    businessName?: StringWithAggregatesFilter<"BusinessAcc"> | string
    vatId?: StringWithAggregatesFilter<"BusinessAcc"> | string
    businessType?: StringWithAggregatesFilter<"BusinessAcc"> | string
    taxType?: EnumtaxTypeWithAggregatesFilter<"BusinessAcc"> | $Enums.taxType
    userId?: IntWithAggregatesFilter<"BusinessAcc"> | number
    memberId?: StringWithAggregatesFilter<"BusinessAcc"> | string
  }

  export type BillWhereInput = {
    AND?: BillWhereInput | BillWhereInput[]
    OR?: BillWhereInput[]
    NOT?: BillWhereInput | BillWhereInput[]
    id?: IntFilter<"Bill"> | number
    createAt?: DateTimeFilter<"Bill"> | Date | string
    updatedAt?: DateTimeFilter<"Bill"> | Date | string
    cName?: StringFilter<"Bill"> | string
    cLastname?: StringFilter<"Bill"> | string
    cPhone?: StringFilter<"Bill"> | string
    cGender?: EnumGenderFilter<"Bill"> | $Enums.Gender
    cAdress?: StringFilter<"Bill"> | string
    cProvince?: StringFilter<"Bill"> | string
    cPostId?: StringFilter<"Bill"> | string
    product?: StringFilter<"Bill"> | string
    payment?: EnumPaymentFilter<"Bill"> | $Enums.Payment
    amount?: IntFilter<"Bill"> | number
    purcheseAt?: DateTimeFilter<"Bill"> | Date | string
    platform?: EnumSocialMediaFilter<"Bill"> | $Enums.SocialMedia
    cashStatus?: BoolFilter<"Bill"> | boolean
    price?: IntFilter<"Bill"> | number
    imageBill?: StringNullableFilter<"Bill"> | string | null
    memberId?: StringFilter<"Bill"> | string
    businessAcc?: IntFilter<"Bill"> | number
    productList?: XOR<ProductRelationFilter, ProductWhereInput>
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    businessId?: XOR<BusinessAccRelationFilter, BusinessAccWhereInput>
  }

  export type BillOrderByWithRelationInput = {
    id?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    cName?: SortOrder
    cLastname?: SortOrder
    cPhone?: SortOrder
    cGender?: SortOrder
    cAdress?: SortOrder
    cProvince?: SortOrder
    cPostId?: SortOrder
    product?: SortOrder
    payment?: SortOrder
    amount?: SortOrder
    purcheseAt?: SortOrder
    platform?: SortOrder
    cashStatus?: SortOrder
    price?: SortOrder
    imageBill?: SortOrderInput | SortOrder
    memberId?: SortOrder
    businessAcc?: SortOrder
    productList?: ProductOrderByWithRelationInput
    member?: MemberOrderByWithRelationInput
    businessId?: BusinessAccOrderByWithRelationInput
  }

  export type BillWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: BillWhereInput | BillWhereInput[]
    OR?: BillWhereInput[]
    NOT?: BillWhereInput | BillWhereInput[]
    createAt?: DateTimeFilter<"Bill"> | Date | string
    updatedAt?: DateTimeFilter<"Bill"> | Date | string
    cName?: StringFilter<"Bill"> | string
    cLastname?: StringFilter<"Bill"> | string
    cPhone?: StringFilter<"Bill"> | string
    cGender?: EnumGenderFilter<"Bill"> | $Enums.Gender
    cAdress?: StringFilter<"Bill"> | string
    cProvince?: StringFilter<"Bill"> | string
    cPostId?: StringFilter<"Bill"> | string
    product?: StringFilter<"Bill"> | string
    payment?: EnumPaymentFilter<"Bill"> | $Enums.Payment
    amount?: IntFilter<"Bill"> | number
    purcheseAt?: DateTimeFilter<"Bill"> | Date | string
    platform?: EnumSocialMediaFilter<"Bill"> | $Enums.SocialMedia
    cashStatus?: BoolFilter<"Bill"> | boolean
    price?: IntFilter<"Bill"> | number
    imageBill?: StringNullableFilter<"Bill"> | string | null
    memberId?: StringFilter<"Bill"> | string
    businessAcc?: IntFilter<"Bill"> | number
    productList?: XOR<ProductRelationFilter, ProductWhereInput>
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    businessId?: XOR<BusinessAccRelationFilter, BusinessAccWhereInput>
  }, "id">

  export type BillOrderByWithAggregationInput = {
    id?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    cName?: SortOrder
    cLastname?: SortOrder
    cPhone?: SortOrder
    cGender?: SortOrder
    cAdress?: SortOrder
    cProvince?: SortOrder
    cPostId?: SortOrder
    product?: SortOrder
    payment?: SortOrder
    amount?: SortOrder
    purcheseAt?: SortOrder
    platform?: SortOrder
    cashStatus?: SortOrder
    price?: SortOrder
    imageBill?: SortOrderInput | SortOrder
    memberId?: SortOrder
    businessAcc?: SortOrder
    _count?: BillCountOrderByAggregateInput
    _avg?: BillAvgOrderByAggregateInput
    _max?: BillMaxOrderByAggregateInput
    _min?: BillMinOrderByAggregateInput
    _sum?: BillSumOrderByAggregateInput
  }

  export type BillScalarWhereWithAggregatesInput = {
    AND?: BillScalarWhereWithAggregatesInput | BillScalarWhereWithAggregatesInput[]
    OR?: BillScalarWhereWithAggregatesInput[]
    NOT?: BillScalarWhereWithAggregatesInput | BillScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Bill"> | number
    createAt?: DateTimeWithAggregatesFilter<"Bill"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Bill"> | Date | string
    cName?: StringWithAggregatesFilter<"Bill"> | string
    cLastname?: StringWithAggregatesFilter<"Bill"> | string
    cPhone?: StringWithAggregatesFilter<"Bill"> | string
    cGender?: EnumGenderWithAggregatesFilter<"Bill"> | $Enums.Gender
    cAdress?: StringWithAggregatesFilter<"Bill"> | string
    cProvince?: StringWithAggregatesFilter<"Bill"> | string
    cPostId?: StringWithAggregatesFilter<"Bill"> | string
    product?: StringWithAggregatesFilter<"Bill"> | string
    payment?: EnumPaymentWithAggregatesFilter<"Bill"> | $Enums.Payment
    amount?: IntWithAggregatesFilter<"Bill"> | number
    purcheseAt?: DateTimeWithAggregatesFilter<"Bill"> | Date | string
    platform?: EnumSocialMediaWithAggregatesFilter<"Bill"> | $Enums.SocialMedia
    cashStatus?: BoolWithAggregatesFilter<"Bill"> | boolean
    price?: IntWithAggregatesFilter<"Bill"> | number
    imageBill?: StringNullableWithAggregatesFilter<"Bill"> | string | null
    memberId?: StringWithAggregatesFilter<"Bill"> | string
    businessAcc?: IntWithAggregatesFilter<"Bill"> | number
  }

  export type AdsCostWhereInput = {
    AND?: AdsCostWhereInput | AdsCostWhereInput[]
    OR?: AdsCostWhereInput[]
    NOT?: AdsCostWhereInput | AdsCostWhereInput[]
    id?: IntFilter<"AdsCost"> | number
    date?: DateTimeFilter<"AdsCost"> | Date | string
    createAt?: DateTimeFilter<"AdsCost"> | Date | string
    updatedAt?: DateTimeFilter<"AdsCost"> | Date | string
    adsCost?: IntFilter<"AdsCost"> | number
    memberId?: StringFilter<"AdsCost"> | string
    platformId?: IntFilter<"AdsCost"> | number
    businessAcc?: IntFilter<"AdsCost"> | number
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    platform?: XOR<PlatformRelationFilter, PlatformWhereInput>
    businessId?: XOR<BusinessAccRelationFilter, BusinessAccWhereInput>
  }

  export type AdsCostOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    adsCost?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
    businessAcc?: SortOrder
    member?: MemberOrderByWithRelationInput
    platform?: PlatformOrderByWithRelationInput
    businessId?: BusinessAccOrderByWithRelationInput
  }

  export type AdsCostWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AdsCostWhereInput | AdsCostWhereInput[]
    OR?: AdsCostWhereInput[]
    NOT?: AdsCostWhereInput | AdsCostWhereInput[]
    date?: DateTimeFilter<"AdsCost"> | Date | string
    createAt?: DateTimeFilter<"AdsCost"> | Date | string
    updatedAt?: DateTimeFilter<"AdsCost"> | Date | string
    adsCost?: IntFilter<"AdsCost"> | number
    memberId?: StringFilter<"AdsCost"> | string
    platformId?: IntFilter<"AdsCost"> | number
    businessAcc?: IntFilter<"AdsCost"> | number
    member?: XOR<MemberRelationFilter, MemberWhereInput>
    platform?: XOR<PlatformRelationFilter, PlatformWhereInput>
    businessId?: XOR<BusinessAccRelationFilter, BusinessAccWhereInput>
  }, "id">

  export type AdsCostOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    adsCost?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
    businessAcc?: SortOrder
    _count?: AdsCostCountOrderByAggregateInput
    _avg?: AdsCostAvgOrderByAggregateInput
    _max?: AdsCostMaxOrderByAggregateInput
    _min?: AdsCostMinOrderByAggregateInput
    _sum?: AdsCostSumOrderByAggregateInput
  }

  export type AdsCostScalarWhereWithAggregatesInput = {
    AND?: AdsCostScalarWhereWithAggregatesInput | AdsCostScalarWhereWithAggregatesInput[]
    OR?: AdsCostScalarWhereWithAggregatesInput[]
    NOT?: AdsCostScalarWhereWithAggregatesInput | AdsCostScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"AdsCost"> | number
    date?: DateTimeWithAggregatesFilter<"AdsCost"> | Date | string
    createAt?: DateTimeWithAggregatesFilter<"AdsCost"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"AdsCost"> | Date | string
    adsCost?: IntWithAggregatesFilter<"AdsCost"> | number
    memberId?: StringWithAggregatesFilter<"AdsCost"> | string
    platformId?: IntWithAggregatesFilter<"AdsCost"> | number
    businessAcc?: IntWithAggregatesFilter<"AdsCost"> | number
  }

  export type ExpenceWhereInput = {
    AND?: ExpenceWhereInput | ExpenceWhereInput[]
    OR?: ExpenceWhereInput[]
    NOT?: ExpenceWhereInput | ExpenceWhereInput[]
    date?: DateTimeFilter<"Expence"> | Date | string
    createAt?: DateTimeFilter<"Expence"> | Date | string
    updatedAt?: DateTimeFilter<"Expence"> | Date | string
    id?: IntFilter<"Expence"> | number
    amount?: IntFilter<"Expence"> | number
    group?: StringFilter<"Expence"> | string
    image?: StringFilter<"Expence"> | string
    businessAcc?: IntFilter<"Expence"> | number
    memberId?: StringFilter<"Expence"> | string
    businessId?: XOR<BusinessAccRelationFilter, BusinessAccWhereInput>
    member?: XOR<MemberRelationFilter, MemberWhereInput>
  }

  export type ExpenceOrderByWithRelationInput = {
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    amount?: SortOrder
    group?: SortOrder
    image?: SortOrder
    businessAcc?: SortOrder
    memberId?: SortOrder
    businessId?: BusinessAccOrderByWithRelationInput
    member?: MemberOrderByWithRelationInput
  }

  export type ExpenceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ExpenceWhereInput | ExpenceWhereInput[]
    OR?: ExpenceWhereInput[]
    NOT?: ExpenceWhereInput | ExpenceWhereInput[]
    date?: DateTimeFilter<"Expence"> | Date | string
    createAt?: DateTimeFilter<"Expence"> | Date | string
    updatedAt?: DateTimeFilter<"Expence"> | Date | string
    amount?: IntFilter<"Expence"> | number
    group?: StringFilter<"Expence"> | string
    image?: StringFilter<"Expence"> | string
    businessAcc?: IntFilter<"Expence"> | number
    memberId?: StringFilter<"Expence"> | string
    businessId?: XOR<BusinessAccRelationFilter, BusinessAccWhereInput>
    member?: XOR<MemberRelationFilter, MemberWhereInput>
  }, "id">

  export type ExpenceOrderByWithAggregationInput = {
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    amount?: SortOrder
    group?: SortOrder
    image?: SortOrder
    businessAcc?: SortOrder
    memberId?: SortOrder
    _count?: ExpenceCountOrderByAggregateInput
    _avg?: ExpenceAvgOrderByAggregateInput
    _max?: ExpenceMaxOrderByAggregateInput
    _min?: ExpenceMinOrderByAggregateInput
    _sum?: ExpenceSumOrderByAggregateInput
  }

  export type ExpenceScalarWhereWithAggregatesInput = {
    AND?: ExpenceScalarWhereWithAggregatesInput | ExpenceScalarWhereWithAggregatesInput[]
    OR?: ExpenceScalarWhereWithAggregatesInput[]
    NOT?: ExpenceScalarWhereWithAggregatesInput | ExpenceScalarWhereWithAggregatesInput[]
    date?: DateTimeWithAggregatesFilter<"Expence"> | Date | string
    createAt?: DateTimeWithAggregatesFilter<"Expence"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Expence"> | Date | string
    id?: IntWithAggregatesFilter<"Expence"> | number
    amount?: IntWithAggregatesFilter<"Expence"> | number
    group?: StringWithAggregatesFilter<"Expence"> | string
    image?: StringWithAggregatesFilter<"Expence"> | string
    businessAcc?: IntWithAggregatesFilter<"Expence"> | number
    memberId?: StringWithAggregatesFilter<"Expence"> | string
  }

  export type PlatformWhereInput = {
    AND?: PlatformWhereInput | PlatformWhereInput[]
    OR?: PlatformWhereInput[]
    NOT?: PlatformWhereInput | PlatformWhereInput[]
    id?: IntFilter<"Platform"> | number
    platform?: StringFilter<"Platform"> | string
    accName?: StringFilter<"Platform"> | string
    accId?: StringFilter<"Platform"> | string
    createAt?: DateTimeFilter<"Platform"> | Date | string
    updatedAt?: DateTimeFilter<"Platform"> | Date | string
    platformId?: AdsCostListRelationFilter
  }

  export type PlatformOrderByWithRelationInput = {
    id?: SortOrder
    platform?: SortOrder
    accName?: SortOrder
    accId?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    platformId?: AdsCostOrderByRelationAggregateInput
  }

  export type PlatformWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    platform?: string
    accName?: string
    accId?: string
    AND?: PlatformWhereInput | PlatformWhereInput[]
    OR?: PlatformWhereInput[]
    NOT?: PlatformWhereInput | PlatformWhereInput[]
    createAt?: DateTimeFilter<"Platform"> | Date | string
    updatedAt?: DateTimeFilter<"Platform"> | Date | string
    platformId?: AdsCostListRelationFilter
  }, "id" | "platform" | "accName" | "accId">

  export type PlatformOrderByWithAggregationInput = {
    id?: SortOrder
    platform?: SortOrder
    accName?: SortOrder
    accId?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlatformCountOrderByAggregateInput
    _avg?: PlatformAvgOrderByAggregateInput
    _max?: PlatformMaxOrderByAggregateInput
    _min?: PlatformMinOrderByAggregateInput
    _sum?: PlatformSumOrderByAggregateInput
  }

  export type PlatformScalarWhereWithAggregatesInput = {
    AND?: PlatformScalarWhereWithAggregatesInput | PlatformScalarWhereWithAggregatesInput[]
    OR?: PlatformScalarWhereWithAggregatesInput[]
    NOT?: PlatformScalarWhereWithAggregatesInput | PlatformScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Platform"> | number
    platform?: StringWithAggregatesFilter<"Platform"> | string
    accName?: StringWithAggregatesFilter<"Platform"> | string
    accId?: StringWithAggregatesFilter<"Platform"> | string
    createAt?: DateTimeWithAggregatesFilter<"Platform"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Platform"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    barcode?: StringFilter<"Product"> | string
    image?: StringNullableFilter<"Product"> | string | null
    stock?: IntFilter<"Product"> | number
    price?: IntFilter<"Product"> | number
    categoryId?: IntNullableFilter<"Product"> | number | null
    memberId?: StringFilter<"Product"> | string
    statusId?: IntNullableFilter<"Product"> | number | null
    createdId?: DateTimeFilter<"Product"> | Date | string
    updatedId?: DateTimeFilter<"Product"> | Date | string
    biilRecord?: BillListRelationFilter
    member?: XOR<MemberRelationFilter, MemberWhereInput>
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    barcode?: SortOrder
    image?: SortOrderInput | SortOrder
    stock?: SortOrder
    price?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    memberId?: SortOrder
    statusId?: SortOrderInput | SortOrder
    createdId?: SortOrder
    updatedId?: SortOrder
    biilRecord?: BillOrderByRelationAggregateInput
    member?: MemberOrderByWithRelationInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    name?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    description?: StringNullableFilter<"Product"> | string | null
    barcode?: StringFilter<"Product"> | string
    image?: StringNullableFilter<"Product"> | string | null
    stock?: IntFilter<"Product"> | number
    price?: IntFilter<"Product"> | number
    categoryId?: IntNullableFilter<"Product"> | number | null
    memberId?: StringFilter<"Product"> | string
    statusId?: IntNullableFilter<"Product"> | number | null
    createdId?: DateTimeFilter<"Product"> | Date | string
    updatedId?: DateTimeFilter<"Product"> | Date | string
    biilRecord?: BillListRelationFilter
    member?: XOR<MemberRelationFilter, MemberWhereInput>
  }, "id" | "name">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    barcode?: SortOrder
    image?: SortOrderInput | SortOrder
    stock?: SortOrder
    price?: SortOrder
    categoryId?: SortOrderInput | SortOrder
    memberId?: SortOrder
    statusId?: SortOrderInput | SortOrder
    createdId?: SortOrder
    updatedId?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _avg?: ProductAvgOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
    _sum?: ProductSumOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Product"> | number
    name?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    barcode?: StringWithAggregatesFilter<"Product"> | string
    image?: StringNullableWithAggregatesFilter<"Product"> | string | null
    stock?: IntWithAggregatesFilter<"Product"> | number
    price?: IntWithAggregatesFilter<"Product"> | number
    categoryId?: IntNullableWithAggregatesFilter<"Product"> | number | null
    memberId?: StringWithAggregatesFilter<"Product"> | string
    statusId?: IntNullableWithAggregatesFilter<"Product"> | number | null
    createdId?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedId?: DateTimeWithAggregatesFilter<"Product"> | Date | string
  }

  export type UserCreateInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    createAt?: Date | string
    updatedAt?: Date | string
    phone: string
    business?: BusinessAccCreateNestedManyWithoutUserInput
    member?: MemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    createAt?: Date | string
    updatedAt?: Date | string
    phone: string
    business?: BusinessAccUncheckedCreateNestedManyWithoutUserInput
    member?: MemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    business?: BusinessAccUpdateManyWithoutUserNestedInput
    member?: MemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    business?: BusinessAccUncheckedUpdateManyWithoutUserNestedInput
    member?: MemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    createAt?: Date | string
    updatedAt?: Date | string
    phone: string
  }

  export type UserUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
  }

  export type MemberCreateInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMemberInput
    business?: BusinessAccCreateNestedManyWithoutBillsInput
    bill?: BillCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostCreateNestedManyWithoutMemberInput
    expence?: ExpenceCreateNestedManyWithoutMemberInput
    product?: ProductCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    userId: number
    business?: BusinessAccUncheckedCreateNestedManyWithoutBillsInput
    bill?: BillUncheckedCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostUncheckedCreateNestedManyWithoutMemberInput
    expence?: ExpenceUncheckedCreateNestedManyWithoutMemberInput
    product?: ProductUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberUpdateInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemberNestedInput
    business?: BusinessAccUpdateManyWithoutBillsNestedInput
    bill?: BillUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUpdateManyWithoutMemberNestedInput
    product?: ProductUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    business?: BusinessAccUncheckedUpdateManyWithoutBillsNestedInput
    bill?: BillUncheckedUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUncheckedUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUncheckedUpdateManyWithoutMemberNestedInput
    product?: ProductUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type MemberCreateManyInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    userId: number
  }

  export type MemberUpdateManyMutationInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberUncheckedUpdateManyInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type BusinessAccCreateInput = {
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    user: UserCreateNestedOneWithoutBusinessInput
    bills?: MemberCreateNestedOneWithoutBusinessInput
    billRecord?: BillCreateNestedManyWithoutBusinessIdInput
    expenceRecord?: ExpenceCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccUncheckedCreateInput = {
    id?: number
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    userId: number
    memberId?: string
    billRecord?: BillUncheckedCreateNestedManyWithoutBusinessIdInput
    expenceRecord?: ExpenceUncheckedCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostUncheckedCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccUpdateInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    user?: UserUpdateOneRequiredWithoutBusinessNestedInput
    bills?: MemberUpdateOneRequiredWithoutBusinessNestedInput
    billRecord?: BillUpdateManyWithoutBusinessIdNestedInput
    expenceRecord?: ExpenceUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    userId?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    billRecord?: BillUncheckedUpdateManyWithoutBusinessIdNestedInput
    expenceRecord?: ExpenceUncheckedUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUncheckedUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccCreateManyInput = {
    id?: number
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    userId: number
    memberId?: string
  }

  export type BusinessAccUpdateManyMutationInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
  }

  export type BusinessAccUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    userId?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type BillCreateInput = {
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    productList: ProductCreateNestedOneWithoutBiilRecordInput
    member: MemberCreateNestedOneWithoutBillInput
    businessId: BusinessAccCreateNestedOneWithoutBillRecordInput
  }

  export type BillUncheckedCreateInput = {
    id?: number
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    product: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    memberId: string
    businessAcc: number
  }

  export type BillUpdateInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    productList?: ProductUpdateOneRequiredWithoutBiilRecordNestedInput
    member?: MemberUpdateOneRequiredWithoutBillNestedInput
    businessId?: BusinessAccUpdateOneRequiredWithoutBillRecordNestedInput
  }

  export type BillUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    memberId?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type BillCreateManyInput = {
    id?: number
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    product: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    memberId: string
    businessAcc: number
  }

  export type BillUpdateManyMutationInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type BillUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    memberId?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type AdsCostCreateInput = {
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    member: MemberCreateNestedOneWithoutAdsCostInput
    platform: PlatformCreateNestedOneWithoutPlatformIdInput
    businessId: BusinessAccCreateNestedOneWithoutAdsCostRecordInput
  }

  export type AdsCostUncheckedCreateInput = {
    id?: number
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    memberId: string
    platformId: number
    businessAcc: number
  }

  export type AdsCostUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    member?: MemberUpdateOneRequiredWithoutAdsCostNestedInput
    platform?: PlatformUpdateOneRequiredWithoutPlatformIdNestedInput
    businessId?: BusinessAccUpdateOneRequiredWithoutAdsCostRecordNestedInput
  }

  export type AdsCostUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    platformId?: IntFieldUpdateOperationsInput | number
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type AdsCostCreateManyInput = {
    id?: number
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    memberId: string
    platformId: number
    businessAcc: number
  }

  export type AdsCostUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
  }

  export type AdsCostUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    platformId?: IntFieldUpdateOperationsInput | number
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type ExpenceCreateInput = {
    date: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    amount: number
    group: string
    image: string
    businessId: BusinessAccCreateNestedOneWithoutExpenceRecordInput
    member: MemberCreateNestedOneWithoutExpenceInput
  }

  export type ExpenceUncheckedCreateInput = {
    date: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    id?: number
    amount: number
    group: string
    image: string
    businessAcc: number
    memberId: string
  }

  export type ExpenceUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    businessId?: BusinessAccUpdateOneRequiredWithoutExpenceRecordNestedInput
    member?: MemberUpdateOneRequiredWithoutExpenceNestedInput
  }

  export type ExpenceUncheckedUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenceCreateManyInput = {
    date: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    id?: number
    amount: number
    group: string
    image: string
    businessAcc: number
    memberId: string
  }

  export type ExpenceUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenceUncheckedUpdateManyInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type PlatformCreateInput = {
    platform: string
    accName: string
    accId: string
    createAt?: Date | string
    updatedAt?: Date | string
    platformId?: AdsCostCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUncheckedCreateInput = {
    id?: number
    platform: string
    accName: string
    accId: string
    createAt?: Date | string
    updatedAt?: Date | string
    platformId?: AdsCostUncheckedCreateNestedManyWithoutPlatformInput
  }

  export type PlatformUpdateInput = {
    platform?: StringFieldUpdateOperationsInput | string
    accName?: StringFieldUpdateOperationsInput | string
    accId?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platformId?: AdsCostUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    platform?: StringFieldUpdateOperationsInput | string
    accName?: StringFieldUpdateOperationsInput | string
    accId?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platformId?: AdsCostUncheckedUpdateManyWithoutPlatformNestedInput
  }

  export type PlatformCreateManyInput = {
    id?: number
    platform: string
    accName: string
    accId: string
    createAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlatformUpdateManyMutationInput = {
    platform?: StringFieldUpdateOperationsInput | string
    accName?: StringFieldUpdateOperationsInput | string
    accId?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlatformUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    platform?: StringFieldUpdateOperationsInput | string
    accName?: StringFieldUpdateOperationsInput | string
    accId?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    name: string
    description?: string | null
    barcode: string
    image?: string | null
    stock: number
    price: number
    categoryId?: number | null
    statusId?: number | null
    createdId?: Date | string
    updatedId?: Date | string
    biilRecord?: BillCreateNestedManyWithoutProductListInput
    member: MemberCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: number
    name: string
    description?: string | null
    barcode: string
    image?: string | null
    stock: number
    price: number
    categoryId?: number | null
    memberId: string
    statusId?: number | null
    createdId?: Date | string
    updatedId?: Date | string
    biilRecord?: BillUncheckedCreateNestedManyWithoutProductListInput
  }

  export type ProductUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    statusId?: NullableIntFieldUpdateOperationsInput | number | null
    createdId?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedId?: DateTimeFieldUpdateOperationsInput | Date | string
    biilRecord?: BillUpdateManyWithoutProductListNestedInput
    member?: MemberUpdateOneRequiredWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    memberId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableIntFieldUpdateOperationsInput | number | null
    createdId?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedId?: DateTimeFieldUpdateOperationsInput | Date | string
    biilRecord?: BillUncheckedUpdateManyWithoutProductListNestedInput
  }

  export type ProductCreateManyInput = {
    id?: number
    name: string
    description?: string | null
    barcode: string
    image?: string | null
    stock: number
    price: number
    categoryId?: number | null
    memberId: string
    statusId?: number | null
    createdId?: Date | string
    updatedId?: Date | string
  }

  export type ProductUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    statusId?: NullableIntFieldUpdateOperationsInput | number | null
    createdId?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedId?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    memberId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableIntFieldUpdateOperationsInput | number | null
    createdId?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedId?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type BusinessAccListRelationFilter = {
    every?: BusinessAccWhereInput
    some?: BusinessAccWhereInput
    none?: BusinessAccWhereInput
  }

  export type MemberListRelationFilter = {
    every?: MemberWhereInput
    some?: MemberWhereInput
    none?: MemberWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type BusinessAccOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    phone?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type BillListRelationFilter = {
    every?: BillWhereInput
    some?: BillWhereInput
    none?: BillWhereInput
  }

  export type AdsCostListRelationFilter = {
    every?: AdsCostWhereInput
    some?: AdsCostWhereInput
    none?: AdsCostWhereInput
  }

  export type ExpenceListRelationFilter = {
    every?: ExpenceWhereInput
    some?: ExpenceWhereInput
    none?: ExpenceWhereInput
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type BillOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AdsCostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ExpenceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MemberCountOrderByAggregateInput = {
    uniqueId?: SortOrder
    role?: SortOrder
    permission?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type MemberAvgOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type MemberMaxOrderByAggregateInput = {
    uniqueId?: SortOrder
    role?: SortOrder
    permission?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type MemberMinOrderByAggregateInput = {
    uniqueId?: SortOrder
    role?: SortOrder
    permission?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type MemberSumOrderByAggregateInput = {
    userId?: SortOrder
  }

  export type EnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type EnumtaxTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.taxType | EnumtaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.taxType[] | ListEnumtaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.taxType[] | ListEnumtaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumtaxTypeFilter<$PrismaModel> | $Enums.taxType
  }

  export type MemberRelationFilter = {
    is?: MemberWhereInput
    isNot?: MemberWhereInput
  }

  export type BusinessAccCountOrderByAggregateInput = {
    id?: SortOrder
    businessName?: SortOrder
    vatId?: SortOrder
    businessType?: SortOrder
    taxType?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
  }

  export type BusinessAccAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type BusinessAccMaxOrderByAggregateInput = {
    id?: SortOrder
    businessName?: SortOrder
    vatId?: SortOrder
    businessType?: SortOrder
    taxType?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
  }

  export type BusinessAccMinOrderByAggregateInput = {
    id?: SortOrder
    businessName?: SortOrder
    vatId?: SortOrder
    businessType?: SortOrder
    taxType?: SortOrder
    userId?: SortOrder
    memberId?: SortOrder
  }

  export type BusinessAccSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type EnumtaxTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.taxType | EnumtaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.taxType[] | ListEnumtaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.taxType[] | ListEnumtaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumtaxTypeWithAggregatesFilter<$PrismaModel> | $Enums.taxType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtaxTypeFilter<$PrismaModel>
    _max?: NestedEnumtaxTypeFilter<$PrismaModel>
  }

  export type EnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type EnumPaymentFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentFilter<$PrismaModel> | $Enums.Payment
  }

  export type EnumSocialMediaFilter<$PrismaModel = never> = {
    equals?: $Enums.SocialMedia | EnumSocialMediaFieldRefInput<$PrismaModel>
    in?: $Enums.SocialMedia[] | ListEnumSocialMediaFieldRefInput<$PrismaModel>
    notIn?: $Enums.SocialMedia[] | ListEnumSocialMediaFieldRefInput<$PrismaModel>
    not?: NestedEnumSocialMediaFilter<$PrismaModel> | $Enums.SocialMedia
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type BusinessAccRelationFilter = {
    is?: BusinessAccWhereInput
    isNot?: BusinessAccWhereInput
  }

  export type BillCountOrderByAggregateInput = {
    id?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    cName?: SortOrder
    cLastname?: SortOrder
    cPhone?: SortOrder
    cGender?: SortOrder
    cAdress?: SortOrder
    cProvince?: SortOrder
    cPostId?: SortOrder
    product?: SortOrder
    payment?: SortOrder
    amount?: SortOrder
    purcheseAt?: SortOrder
    platform?: SortOrder
    cashStatus?: SortOrder
    price?: SortOrder
    imageBill?: SortOrder
    memberId?: SortOrder
    businessAcc?: SortOrder
  }

  export type BillAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    businessAcc?: SortOrder
  }

  export type BillMaxOrderByAggregateInput = {
    id?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    cName?: SortOrder
    cLastname?: SortOrder
    cPhone?: SortOrder
    cGender?: SortOrder
    cAdress?: SortOrder
    cProvince?: SortOrder
    cPostId?: SortOrder
    product?: SortOrder
    payment?: SortOrder
    amount?: SortOrder
    purcheseAt?: SortOrder
    platform?: SortOrder
    cashStatus?: SortOrder
    price?: SortOrder
    imageBill?: SortOrder
    memberId?: SortOrder
    businessAcc?: SortOrder
  }

  export type BillMinOrderByAggregateInput = {
    id?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    cName?: SortOrder
    cLastname?: SortOrder
    cPhone?: SortOrder
    cGender?: SortOrder
    cAdress?: SortOrder
    cProvince?: SortOrder
    cPostId?: SortOrder
    product?: SortOrder
    payment?: SortOrder
    amount?: SortOrder
    purcheseAt?: SortOrder
    platform?: SortOrder
    cashStatus?: SortOrder
    price?: SortOrder
    imageBill?: SortOrder
    memberId?: SortOrder
    businessAcc?: SortOrder
  }

  export type BillSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    price?: SortOrder
    businessAcc?: SortOrder
  }

  export type EnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type EnumPaymentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentWithAggregatesFilter<$PrismaModel> | $Enums.Payment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentFilter<$PrismaModel>
    _max?: NestedEnumPaymentFilter<$PrismaModel>
  }

  export type EnumSocialMediaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SocialMedia | EnumSocialMediaFieldRefInput<$PrismaModel>
    in?: $Enums.SocialMedia[] | ListEnumSocialMediaFieldRefInput<$PrismaModel>
    notIn?: $Enums.SocialMedia[] | ListEnumSocialMediaFieldRefInput<$PrismaModel>
    not?: NestedEnumSocialMediaWithAggregatesFilter<$PrismaModel> | $Enums.SocialMedia
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSocialMediaFilter<$PrismaModel>
    _max?: NestedEnumSocialMediaFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PlatformRelationFilter = {
    is?: PlatformWhereInput
    isNot?: PlatformWhereInput
  }

  export type AdsCostCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    adsCost?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
    businessAcc?: SortOrder
  }

  export type AdsCostAvgOrderByAggregateInput = {
    id?: SortOrder
    adsCost?: SortOrder
    platformId?: SortOrder
    businessAcc?: SortOrder
  }

  export type AdsCostMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    adsCost?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
    businessAcc?: SortOrder
  }

  export type AdsCostMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    adsCost?: SortOrder
    memberId?: SortOrder
    platformId?: SortOrder
    businessAcc?: SortOrder
  }

  export type AdsCostSumOrderByAggregateInput = {
    id?: SortOrder
    adsCost?: SortOrder
    platformId?: SortOrder
    businessAcc?: SortOrder
  }

  export type ExpenceCountOrderByAggregateInput = {
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    amount?: SortOrder
    group?: SortOrder
    image?: SortOrder
    businessAcc?: SortOrder
    memberId?: SortOrder
  }

  export type ExpenceAvgOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    businessAcc?: SortOrder
  }

  export type ExpenceMaxOrderByAggregateInput = {
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    amount?: SortOrder
    group?: SortOrder
    image?: SortOrder
    businessAcc?: SortOrder
    memberId?: SortOrder
  }

  export type ExpenceMinOrderByAggregateInput = {
    date?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
    id?: SortOrder
    amount?: SortOrder
    group?: SortOrder
    image?: SortOrder
    businessAcc?: SortOrder
    memberId?: SortOrder
  }

  export type ExpenceSumOrderByAggregateInput = {
    id?: SortOrder
    amount?: SortOrder
    businessAcc?: SortOrder
  }

  export type PlatformCountOrderByAggregateInput = {
    id?: SortOrder
    platform?: SortOrder
    accName?: SortOrder
    accId?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlatformAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type PlatformMaxOrderByAggregateInput = {
    id?: SortOrder
    platform?: SortOrder
    accName?: SortOrder
    accId?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlatformMinOrderByAggregateInput = {
    id?: SortOrder
    platform?: SortOrder
    accName?: SortOrder
    accId?: SortOrder
    createAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlatformSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    barcode?: SortOrder
    image?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    memberId?: SortOrder
    statusId?: SortOrder
    createdId?: SortOrder
    updatedId?: SortOrder
  }

  export type ProductAvgOrderByAggregateInput = {
    id?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    statusId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    barcode?: SortOrder
    image?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    memberId?: SortOrder
    statusId?: SortOrder
    createdId?: SortOrder
    updatedId?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    barcode?: SortOrder
    image?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    memberId?: SortOrder
    statusId?: SortOrder
    createdId?: SortOrder
    updatedId?: SortOrder
  }

  export type ProductSumOrderByAggregateInput = {
    id?: SortOrder
    stock?: SortOrder
    price?: SortOrder
    categoryId?: SortOrder
    statusId?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type BusinessAccCreateNestedManyWithoutUserInput = {
    create?: XOR<BusinessAccCreateWithoutUserInput, BusinessAccUncheckedCreateWithoutUserInput> | BusinessAccCreateWithoutUserInput[] | BusinessAccUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BusinessAccCreateOrConnectWithoutUserInput | BusinessAccCreateOrConnectWithoutUserInput[]
    createMany?: BusinessAccCreateManyUserInputEnvelope
    connect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
  }

  export type MemberCreateNestedManyWithoutUserInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type BusinessAccUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BusinessAccCreateWithoutUserInput, BusinessAccUncheckedCreateWithoutUserInput> | BusinessAccCreateWithoutUserInput[] | BusinessAccUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BusinessAccCreateOrConnectWithoutUserInput | BusinessAccCreateOrConnectWithoutUserInput[]
    createMany?: BusinessAccCreateManyUserInputEnvelope
    connect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
  }

  export type MemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type BusinessAccUpdateManyWithoutUserNestedInput = {
    create?: XOR<BusinessAccCreateWithoutUserInput, BusinessAccUncheckedCreateWithoutUserInput> | BusinessAccCreateWithoutUserInput[] | BusinessAccUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BusinessAccCreateOrConnectWithoutUserInput | BusinessAccCreateOrConnectWithoutUserInput[]
    upsert?: BusinessAccUpsertWithWhereUniqueWithoutUserInput | BusinessAccUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BusinessAccCreateManyUserInputEnvelope
    set?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    disconnect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    delete?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    connect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    update?: BusinessAccUpdateWithWhereUniqueWithoutUserInput | BusinessAccUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BusinessAccUpdateManyWithWhereWithoutUserInput | BusinessAccUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BusinessAccScalarWhereInput | BusinessAccScalarWhereInput[]
  }

  export type MemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutUserInput | MemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutUserInput | MemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutUserInput | MemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BusinessAccUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BusinessAccCreateWithoutUserInput, BusinessAccUncheckedCreateWithoutUserInput> | BusinessAccCreateWithoutUserInput[] | BusinessAccUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BusinessAccCreateOrConnectWithoutUserInput | BusinessAccCreateOrConnectWithoutUserInput[]
    upsert?: BusinessAccUpsertWithWhereUniqueWithoutUserInput | BusinessAccUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BusinessAccCreateManyUserInputEnvelope
    set?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    disconnect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    delete?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    connect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    update?: BusinessAccUpdateWithWhereUniqueWithoutUserInput | BusinessAccUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BusinessAccUpdateManyWithWhereWithoutUserInput | BusinessAccUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BusinessAccScalarWhereInput | BusinessAccScalarWhereInput[]
  }

  export type MemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput> | MemberCreateWithoutUserInput[] | MemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MemberCreateOrConnectWithoutUserInput | MemberCreateOrConnectWithoutUserInput[]
    upsert?: MemberUpsertWithWhereUniqueWithoutUserInput | MemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MemberCreateManyUserInputEnvelope
    set?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    disconnect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    delete?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    connect?: MemberWhereUniqueInput | MemberWhereUniqueInput[]
    update?: MemberUpdateWithWhereUniqueWithoutUserInput | MemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MemberUpdateManyWithWhereWithoutUserInput | MemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MemberScalarWhereInput | MemberScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMemberInput = {
    create?: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberInput
    connect?: UserWhereUniqueInput
  }

  export type BusinessAccCreateNestedManyWithoutBillsInput = {
    create?: XOR<BusinessAccCreateWithoutBillsInput, BusinessAccUncheckedCreateWithoutBillsInput> | BusinessAccCreateWithoutBillsInput[] | BusinessAccUncheckedCreateWithoutBillsInput[]
    connectOrCreate?: BusinessAccCreateOrConnectWithoutBillsInput | BusinessAccCreateOrConnectWithoutBillsInput[]
    createMany?: BusinessAccCreateManyBillsInputEnvelope
    connect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
  }

  export type BillCreateNestedManyWithoutMemberInput = {
    create?: XOR<BillCreateWithoutMemberInput, BillUncheckedCreateWithoutMemberInput> | BillCreateWithoutMemberInput[] | BillUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: BillCreateOrConnectWithoutMemberInput | BillCreateOrConnectWithoutMemberInput[]
    createMany?: BillCreateManyMemberInputEnvelope
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
  }

  export type AdsCostCreateNestedManyWithoutMemberInput = {
    create?: XOR<AdsCostCreateWithoutMemberInput, AdsCostUncheckedCreateWithoutMemberInput> | AdsCostCreateWithoutMemberInput[] | AdsCostUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutMemberInput | AdsCostCreateOrConnectWithoutMemberInput[]
    createMany?: AdsCostCreateManyMemberInputEnvelope
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
  }

  export type ExpenceCreateNestedManyWithoutMemberInput = {
    create?: XOR<ExpenceCreateWithoutMemberInput, ExpenceUncheckedCreateWithoutMemberInput> | ExpenceCreateWithoutMemberInput[] | ExpenceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ExpenceCreateOrConnectWithoutMemberInput | ExpenceCreateOrConnectWithoutMemberInput[]
    createMany?: ExpenceCreateManyMemberInputEnvelope
    connect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
  }

  export type ProductCreateNestedManyWithoutMemberInput = {
    create?: XOR<ProductCreateWithoutMemberInput, ProductUncheckedCreateWithoutMemberInput> | ProductCreateWithoutMemberInput[] | ProductUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutMemberInput | ProductCreateOrConnectWithoutMemberInput[]
    createMany?: ProductCreateManyMemberInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type BusinessAccUncheckedCreateNestedManyWithoutBillsInput = {
    create?: XOR<BusinessAccCreateWithoutBillsInput, BusinessAccUncheckedCreateWithoutBillsInput> | BusinessAccCreateWithoutBillsInput[] | BusinessAccUncheckedCreateWithoutBillsInput[]
    connectOrCreate?: BusinessAccCreateOrConnectWithoutBillsInput | BusinessAccCreateOrConnectWithoutBillsInput[]
    createMany?: BusinessAccCreateManyBillsInputEnvelope
    connect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
  }

  export type BillUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<BillCreateWithoutMemberInput, BillUncheckedCreateWithoutMemberInput> | BillCreateWithoutMemberInput[] | BillUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: BillCreateOrConnectWithoutMemberInput | BillCreateOrConnectWithoutMemberInput[]
    createMany?: BillCreateManyMemberInputEnvelope
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
  }

  export type AdsCostUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<AdsCostCreateWithoutMemberInput, AdsCostUncheckedCreateWithoutMemberInput> | AdsCostCreateWithoutMemberInput[] | AdsCostUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutMemberInput | AdsCostCreateOrConnectWithoutMemberInput[]
    createMany?: AdsCostCreateManyMemberInputEnvelope
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
  }

  export type ExpenceUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<ExpenceCreateWithoutMemberInput, ExpenceUncheckedCreateWithoutMemberInput> | ExpenceCreateWithoutMemberInput[] | ExpenceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ExpenceCreateOrConnectWithoutMemberInput | ExpenceCreateOrConnectWithoutMemberInput[]
    createMany?: ExpenceCreateManyMemberInputEnvelope
    connect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutMemberInput = {
    create?: XOR<ProductCreateWithoutMemberInput, ProductUncheckedCreateWithoutMemberInput> | ProductCreateWithoutMemberInput[] | ProductUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutMemberInput | ProductCreateOrConnectWithoutMemberInput[]
    createMany?: ProductCreateManyMemberInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type EnumUserRoleFieldUpdateOperationsInput = {
    set?: $Enums.UserRole
  }

  export type UserUpdateOneRequiredWithoutMemberNestedInput = {
    create?: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutMemberInput
    upsert?: UserUpsertWithoutMemberInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMemberInput, UserUpdateWithoutMemberInput>, UserUncheckedUpdateWithoutMemberInput>
  }

  export type BusinessAccUpdateManyWithoutBillsNestedInput = {
    create?: XOR<BusinessAccCreateWithoutBillsInput, BusinessAccUncheckedCreateWithoutBillsInput> | BusinessAccCreateWithoutBillsInput[] | BusinessAccUncheckedCreateWithoutBillsInput[]
    connectOrCreate?: BusinessAccCreateOrConnectWithoutBillsInput | BusinessAccCreateOrConnectWithoutBillsInput[]
    upsert?: BusinessAccUpsertWithWhereUniqueWithoutBillsInput | BusinessAccUpsertWithWhereUniqueWithoutBillsInput[]
    createMany?: BusinessAccCreateManyBillsInputEnvelope
    set?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    disconnect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    delete?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    connect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    update?: BusinessAccUpdateWithWhereUniqueWithoutBillsInput | BusinessAccUpdateWithWhereUniqueWithoutBillsInput[]
    updateMany?: BusinessAccUpdateManyWithWhereWithoutBillsInput | BusinessAccUpdateManyWithWhereWithoutBillsInput[]
    deleteMany?: BusinessAccScalarWhereInput | BusinessAccScalarWhereInput[]
  }

  export type BillUpdateManyWithoutMemberNestedInput = {
    create?: XOR<BillCreateWithoutMemberInput, BillUncheckedCreateWithoutMemberInput> | BillCreateWithoutMemberInput[] | BillUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: BillCreateOrConnectWithoutMemberInput | BillCreateOrConnectWithoutMemberInput[]
    upsert?: BillUpsertWithWhereUniqueWithoutMemberInput | BillUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: BillCreateManyMemberInputEnvelope
    set?: BillWhereUniqueInput | BillWhereUniqueInput[]
    disconnect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    delete?: BillWhereUniqueInput | BillWhereUniqueInput[]
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    update?: BillUpdateWithWhereUniqueWithoutMemberInput | BillUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: BillUpdateManyWithWhereWithoutMemberInput | BillUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: BillScalarWhereInput | BillScalarWhereInput[]
  }

  export type AdsCostUpdateManyWithoutMemberNestedInput = {
    create?: XOR<AdsCostCreateWithoutMemberInput, AdsCostUncheckedCreateWithoutMemberInput> | AdsCostCreateWithoutMemberInput[] | AdsCostUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutMemberInput | AdsCostCreateOrConnectWithoutMemberInput[]
    upsert?: AdsCostUpsertWithWhereUniqueWithoutMemberInput | AdsCostUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: AdsCostCreateManyMemberInputEnvelope
    set?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    disconnect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    delete?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    update?: AdsCostUpdateWithWhereUniqueWithoutMemberInput | AdsCostUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: AdsCostUpdateManyWithWhereWithoutMemberInput | AdsCostUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: AdsCostScalarWhereInput | AdsCostScalarWhereInput[]
  }

  export type ExpenceUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ExpenceCreateWithoutMemberInput, ExpenceUncheckedCreateWithoutMemberInput> | ExpenceCreateWithoutMemberInput[] | ExpenceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ExpenceCreateOrConnectWithoutMemberInput | ExpenceCreateOrConnectWithoutMemberInput[]
    upsert?: ExpenceUpsertWithWhereUniqueWithoutMemberInput | ExpenceUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ExpenceCreateManyMemberInputEnvelope
    set?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    disconnect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    delete?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    connect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    update?: ExpenceUpdateWithWhereUniqueWithoutMemberInput | ExpenceUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ExpenceUpdateManyWithWhereWithoutMemberInput | ExpenceUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ExpenceScalarWhereInput | ExpenceScalarWhereInput[]
  }

  export type ProductUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ProductCreateWithoutMemberInput, ProductUncheckedCreateWithoutMemberInput> | ProductCreateWithoutMemberInput[] | ProductUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutMemberInput | ProductCreateOrConnectWithoutMemberInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutMemberInput | ProductUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ProductCreateManyMemberInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutMemberInput | ProductUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutMemberInput | ProductUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type BusinessAccUncheckedUpdateManyWithoutBillsNestedInput = {
    create?: XOR<BusinessAccCreateWithoutBillsInput, BusinessAccUncheckedCreateWithoutBillsInput> | BusinessAccCreateWithoutBillsInput[] | BusinessAccUncheckedCreateWithoutBillsInput[]
    connectOrCreate?: BusinessAccCreateOrConnectWithoutBillsInput | BusinessAccCreateOrConnectWithoutBillsInput[]
    upsert?: BusinessAccUpsertWithWhereUniqueWithoutBillsInput | BusinessAccUpsertWithWhereUniqueWithoutBillsInput[]
    createMany?: BusinessAccCreateManyBillsInputEnvelope
    set?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    disconnect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    delete?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    connect?: BusinessAccWhereUniqueInput | BusinessAccWhereUniqueInput[]
    update?: BusinessAccUpdateWithWhereUniqueWithoutBillsInput | BusinessAccUpdateWithWhereUniqueWithoutBillsInput[]
    updateMany?: BusinessAccUpdateManyWithWhereWithoutBillsInput | BusinessAccUpdateManyWithWhereWithoutBillsInput[]
    deleteMany?: BusinessAccScalarWhereInput | BusinessAccScalarWhereInput[]
  }

  export type BillUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<BillCreateWithoutMemberInput, BillUncheckedCreateWithoutMemberInput> | BillCreateWithoutMemberInput[] | BillUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: BillCreateOrConnectWithoutMemberInput | BillCreateOrConnectWithoutMemberInput[]
    upsert?: BillUpsertWithWhereUniqueWithoutMemberInput | BillUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: BillCreateManyMemberInputEnvelope
    set?: BillWhereUniqueInput | BillWhereUniqueInput[]
    disconnect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    delete?: BillWhereUniqueInput | BillWhereUniqueInput[]
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    update?: BillUpdateWithWhereUniqueWithoutMemberInput | BillUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: BillUpdateManyWithWhereWithoutMemberInput | BillUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: BillScalarWhereInput | BillScalarWhereInput[]
  }

  export type AdsCostUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<AdsCostCreateWithoutMemberInput, AdsCostUncheckedCreateWithoutMemberInput> | AdsCostCreateWithoutMemberInput[] | AdsCostUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutMemberInput | AdsCostCreateOrConnectWithoutMemberInput[]
    upsert?: AdsCostUpsertWithWhereUniqueWithoutMemberInput | AdsCostUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: AdsCostCreateManyMemberInputEnvelope
    set?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    disconnect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    delete?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    update?: AdsCostUpdateWithWhereUniqueWithoutMemberInput | AdsCostUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: AdsCostUpdateManyWithWhereWithoutMemberInput | AdsCostUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: AdsCostScalarWhereInput | AdsCostScalarWhereInput[]
  }

  export type ExpenceUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ExpenceCreateWithoutMemberInput, ExpenceUncheckedCreateWithoutMemberInput> | ExpenceCreateWithoutMemberInput[] | ExpenceUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ExpenceCreateOrConnectWithoutMemberInput | ExpenceCreateOrConnectWithoutMemberInput[]
    upsert?: ExpenceUpsertWithWhereUniqueWithoutMemberInput | ExpenceUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ExpenceCreateManyMemberInputEnvelope
    set?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    disconnect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    delete?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    connect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    update?: ExpenceUpdateWithWhereUniqueWithoutMemberInput | ExpenceUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ExpenceUpdateManyWithWhereWithoutMemberInput | ExpenceUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ExpenceScalarWhereInput | ExpenceScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutMemberNestedInput = {
    create?: XOR<ProductCreateWithoutMemberInput, ProductUncheckedCreateWithoutMemberInput> | ProductCreateWithoutMemberInput[] | ProductUncheckedCreateWithoutMemberInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutMemberInput | ProductCreateOrConnectWithoutMemberInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutMemberInput | ProductUpsertWithWhereUniqueWithoutMemberInput[]
    createMany?: ProductCreateManyMemberInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutMemberInput | ProductUpdateWithWhereUniqueWithoutMemberInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutMemberInput | ProductUpdateManyWithWhereWithoutMemberInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutBusinessInput = {
    create?: XOR<UserCreateWithoutBusinessInput, UserUncheckedCreateWithoutBusinessInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessInput
    connect?: UserWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutBusinessInput = {
    create?: XOR<MemberCreateWithoutBusinessInput, MemberUncheckedCreateWithoutBusinessInput>
    connectOrCreate?: MemberCreateOrConnectWithoutBusinessInput
    connect?: MemberWhereUniqueInput
  }

  export type BillCreateNestedManyWithoutBusinessIdInput = {
    create?: XOR<BillCreateWithoutBusinessIdInput, BillUncheckedCreateWithoutBusinessIdInput> | BillCreateWithoutBusinessIdInput[] | BillUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: BillCreateOrConnectWithoutBusinessIdInput | BillCreateOrConnectWithoutBusinessIdInput[]
    createMany?: BillCreateManyBusinessIdInputEnvelope
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
  }

  export type ExpenceCreateNestedManyWithoutBusinessIdInput = {
    create?: XOR<ExpenceCreateWithoutBusinessIdInput, ExpenceUncheckedCreateWithoutBusinessIdInput> | ExpenceCreateWithoutBusinessIdInput[] | ExpenceUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: ExpenceCreateOrConnectWithoutBusinessIdInput | ExpenceCreateOrConnectWithoutBusinessIdInput[]
    createMany?: ExpenceCreateManyBusinessIdInputEnvelope
    connect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
  }

  export type AdsCostCreateNestedManyWithoutBusinessIdInput = {
    create?: XOR<AdsCostCreateWithoutBusinessIdInput, AdsCostUncheckedCreateWithoutBusinessIdInput> | AdsCostCreateWithoutBusinessIdInput[] | AdsCostUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutBusinessIdInput | AdsCostCreateOrConnectWithoutBusinessIdInput[]
    createMany?: AdsCostCreateManyBusinessIdInputEnvelope
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
  }

  export type BillUncheckedCreateNestedManyWithoutBusinessIdInput = {
    create?: XOR<BillCreateWithoutBusinessIdInput, BillUncheckedCreateWithoutBusinessIdInput> | BillCreateWithoutBusinessIdInput[] | BillUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: BillCreateOrConnectWithoutBusinessIdInput | BillCreateOrConnectWithoutBusinessIdInput[]
    createMany?: BillCreateManyBusinessIdInputEnvelope
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
  }

  export type ExpenceUncheckedCreateNestedManyWithoutBusinessIdInput = {
    create?: XOR<ExpenceCreateWithoutBusinessIdInput, ExpenceUncheckedCreateWithoutBusinessIdInput> | ExpenceCreateWithoutBusinessIdInput[] | ExpenceUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: ExpenceCreateOrConnectWithoutBusinessIdInput | ExpenceCreateOrConnectWithoutBusinessIdInput[]
    createMany?: ExpenceCreateManyBusinessIdInputEnvelope
    connect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
  }

  export type AdsCostUncheckedCreateNestedManyWithoutBusinessIdInput = {
    create?: XOR<AdsCostCreateWithoutBusinessIdInput, AdsCostUncheckedCreateWithoutBusinessIdInput> | AdsCostCreateWithoutBusinessIdInput[] | AdsCostUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutBusinessIdInput | AdsCostCreateOrConnectWithoutBusinessIdInput[]
    createMany?: AdsCostCreateManyBusinessIdInputEnvelope
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
  }

  export type EnumtaxTypeFieldUpdateOperationsInput = {
    set?: $Enums.taxType
  }

  export type UserUpdateOneRequiredWithoutBusinessNestedInput = {
    create?: XOR<UserCreateWithoutBusinessInput, UserUncheckedCreateWithoutBusinessInput>
    connectOrCreate?: UserCreateOrConnectWithoutBusinessInput
    upsert?: UserUpsertWithoutBusinessInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBusinessInput, UserUpdateWithoutBusinessInput>, UserUncheckedUpdateWithoutBusinessInput>
  }

  export type MemberUpdateOneRequiredWithoutBusinessNestedInput = {
    create?: XOR<MemberCreateWithoutBusinessInput, MemberUncheckedCreateWithoutBusinessInput>
    connectOrCreate?: MemberCreateOrConnectWithoutBusinessInput
    upsert?: MemberUpsertWithoutBusinessInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutBusinessInput, MemberUpdateWithoutBusinessInput>, MemberUncheckedUpdateWithoutBusinessInput>
  }

  export type BillUpdateManyWithoutBusinessIdNestedInput = {
    create?: XOR<BillCreateWithoutBusinessIdInput, BillUncheckedCreateWithoutBusinessIdInput> | BillCreateWithoutBusinessIdInput[] | BillUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: BillCreateOrConnectWithoutBusinessIdInput | BillCreateOrConnectWithoutBusinessIdInput[]
    upsert?: BillUpsertWithWhereUniqueWithoutBusinessIdInput | BillUpsertWithWhereUniqueWithoutBusinessIdInput[]
    createMany?: BillCreateManyBusinessIdInputEnvelope
    set?: BillWhereUniqueInput | BillWhereUniqueInput[]
    disconnect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    delete?: BillWhereUniqueInput | BillWhereUniqueInput[]
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    update?: BillUpdateWithWhereUniqueWithoutBusinessIdInput | BillUpdateWithWhereUniqueWithoutBusinessIdInput[]
    updateMany?: BillUpdateManyWithWhereWithoutBusinessIdInput | BillUpdateManyWithWhereWithoutBusinessIdInput[]
    deleteMany?: BillScalarWhereInput | BillScalarWhereInput[]
  }

  export type ExpenceUpdateManyWithoutBusinessIdNestedInput = {
    create?: XOR<ExpenceCreateWithoutBusinessIdInput, ExpenceUncheckedCreateWithoutBusinessIdInput> | ExpenceCreateWithoutBusinessIdInput[] | ExpenceUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: ExpenceCreateOrConnectWithoutBusinessIdInput | ExpenceCreateOrConnectWithoutBusinessIdInput[]
    upsert?: ExpenceUpsertWithWhereUniqueWithoutBusinessIdInput | ExpenceUpsertWithWhereUniqueWithoutBusinessIdInput[]
    createMany?: ExpenceCreateManyBusinessIdInputEnvelope
    set?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    disconnect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    delete?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    connect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    update?: ExpenceUpdateWithWhereUniqueWithoutBusinessIdInput | ExpenceUpdateWithWhereUniqueWithoutBusinessIdInput[]
    updateMany?: ExpenceUpdateManyWithWhereWithoutBusinessIdInput | ExpenceUpdateManyWithWhereWithoutBusinessIdInput[]
    deleteMany?: ExpenceScalarWhereInput | ExpenceScalarWhereInput[]
  }

  export type AdsCostUpdateManyWithoutBusinessIdNestedInput = {
    create?: XOR<AdsCostCreateWithoutBusinessIdInput, AdsCostUncheckedCreateWithoutBusinessIdInput> | AdsCostCreateWithoutBusinessIdInput[] | AdsCostUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutBusinessIdInput | AdsCostCreateOrConnectWithoutBusinessIdInput[]
    upsert?: AdsCostUpsertWithWhereUniqueWithoutBusinessIdInput | AdsCostUpsertWithWhereUniqueWithoutBusinessIdInput[]
    createMany?: AdsCostCreateManyBusinessIdInputEnvelope
    set?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    disconnect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    delete?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    update?: AdsCostUpdateWithWhereUniqueWithoutBusinessIdInput | AdsCostUpdateWithWhereUniqueWithoutBusinessIdInput[]
    updateMany?: AdsCostUpdateManyWithWhereWithoutBusinessIdInput | AdsCostUpdateManyWithWhereWithoutBusinessIdInput[]
    deleteMany?: AdsCostScalarWhereInput | AdsCostScalarWhereInput[]
  }

  export type BillUncheckedUpdateManyWithoutBusinessIdNestedInput = {
    create?: XOR<BillCreateWithoutBusinessIdInput, BillUncheckedCreateWithoutBusinessIdInput> | BillCreateWithoutBusinessIdInput[] | BillUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: BillCreateOrConnectWithoutBusinessIdInput | BillCreateOrConnectWithoutBusinessIdInput[]
    upsert?: BillUpsertWithWhereUniqueWithoutBusinessIdInput | BillUpsertWithWhereUniqueWithoutBusinessIdInput[]
    createMany?: BillCreateManyBusinessIdInputEnvelope
    set?: BillWhereUniqueInput | BillWhereUniqueInput[]
    disconnect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    delete?: BillWhereUniqueInput | BillWhereUniqueInput[]
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    update?: BillUpdateWithWhereUniqueWithoutBusinessIdInput | BillUpdateWithWhereUniqueWithoutBusinessIdInput[]
    updateMany?: BillUpdateManyWithWhereWithoutBusinessIdInput | BillUpdateManyWithWhereWithoutBusinessIdInput[]
    deleteMany?: BillScalarWhereInput | BillScalarWhereInput[]
  }

  export type ExpenceUncheckedUpdateManyWithoutBusinessIdNestedInput = {
    create?: XOR<ExpenceCreateWithoutBusinessIdInput, ExpenceUncheckedCreateWithoutBusinessIdInput> | ExpenceCreateWithoutBusinessIdInput[] | ExpenceUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: ExpenceCreateOrConnectWithoutBusinessIdInput | ExpenceCreateOrConnectWithoutBusinessIdInput[]
    upsert?: ExpenceUpsertWithWhereUniqueWithoutBusinessIdInput | ExpenceUpsertWithWhereUniqueWithoutBusinessIdInput[]
    createMany?: ExpenceCreateManyBusinessIdInputEnvelope
    set?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    disconnect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    delete?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    connect?: ExpenceWhereUniqueInput | ExpenceWhereUniqueInput[]
    update?: ExpenceUpdateWithWhereUniqueWithoutBusinessIdInput | ExpenceUpdateWithWhereUniqueWithoutBusinessIdInput[]
    updateMany?: ExpenceUpdateManyWithWhereWithoutBusinessIdInput | ExpenceUpdateManyWithWhereWithoutBusinessIdInput[]
    deleteMany?: ExpenceScalarWhereInput | ExpenceScalarWhereInput[]
  }

  export type AdsCostUncheckedUpdateManyWithoutBusinessIdNestedInput = {
    create?: XOR<AdsCostCreateWithoutBusinessIdInput, AdsCostUncheckedCreateWithoutBusinessIdInput> | AdsCostCreateWithoutBusinessIdInput[] | AdsCostUncheckedCreateWithoutBusinessIdInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutBusinessIdInput | AdsCostCreateOrConnectWithoutBusinessIdInput[]
    upsert?: AdsCostUpsertWithWhereUniqueWithoutBusinessIdInput | AdsCostUpsertWithWhereUniqueWithoutBusinessIdInput[]
    createMany?: AdsCostCreateManyBusinessIdInputEnvelope
    set?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    disconnect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    delete?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    update?: AdsCostUpdateWithWhereUniqueWithoutBusinessIdInput | AdsCostUpdateWithWhereUniqueWithoutBusinessIdInput[]
    updateMany?: AdsCostUpdateManyWithWhereWithoutBusinessIdInput | AdsCostUpdateManyWithWhereWithoutBusinessIdInput[]
    deleteMany?: AdsCostScalarWhereInput | AdsCostScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutBiilRecordInput = {
    create?: XOR<ProductCreateWithoutBiilRecordInput, ProductUncheckedCreateWithoutBiilRecordInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBiilRecordInput
    connect?: ProductWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutBillInput = {
    create?: XOR<MemberCreateWithoutBillInput, MemberUncheckedCreateWithoutBillInput>
    connectOrCreate?: MemberCreateOrConnectWithoutBillInput
    connect?: MemberWhereUniqueInput
  }

  export type BusinessAccCreateNestedOneWithoutBillRecordInput = {
    create?: XOR<BusinessAccCreateWithoutBillRecordInput, BusinessAccUncheckedCreateWithoutBillRecordInput>
    connectOrCreate?: BusinessAccCreateOrConnectWithoutBillRecordInput
    connect?: BusinessAccWhereUniqueInput
  }

  export type EnumGenderFieldUpdateOperationsInput = {
    set?: $Enums.Gender
  }

  export type EnumPaymentFieldUpdateOperationsInput = {
    set?: $Enums.Payment
  }

  export type EnumSocialMediaFieldUpdateOperationsInput = {
    set?: $Enums.SocialMedia
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ProductUpdateOneRequiredWithoutBiilRecordNestedInput = {
    create?: XOR<ProductCreateWithoutBiilRecordInput, ProductUncheckedCreateWithoutBiilRecordInput>
    connectOrCreate?: ProductCreateOrConnectWithoutBiilRecordInput
    upsert?: ProductUpsertWithoutBiilRecordInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutBiilRecordInput, ProductUpdateWithoutBiilRecordInput>, ProductUncheckedUpdateWithoutBiilRecordInput>
  }

  export type MemberUpdateOneRequiredWithoutBillNestedInput = {
    create?: XOR<MemberCreateWithoutBillInput, MemberUncheckedCreateWithoutBillInput>
    connectOrCreate?: MemberCreateOrConnectWithoutBillInput
    upsert?: MemberUpsertWithoutBillInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutBillInput, MemberUpdateWithoutBillInput>, MemberUncheckedUpdateWithoutBillInput>
  }

  export type BusinessAccUpdateOneRequiredWithoutBillRecordNestedInput = {
    create?: XOR<BusinessAccCreateWithoutBillRecordInput, BusinessAccUncheckedCreateWithoutBillRecordInput>
    connectOrCreate?: BusinessAccCreateOrConnectWithoutBillRecordInput
    upsert?: BusinessAccUpsertWithoutBillRecordInput
    connect?: BusinessAccWhereUniqueInput
    update?: XOR<XOR<BusinessAccUpdateToOneWithWhereWithoutBillRecordInput, BusinessAccUpdateWithoutBillRecordInput>, BusinessAccUncheckedUpdateWithoutBillRecordInput>
  }

  export type MemberCreateNestedOneWithoutAdsCostInput = {
    create?: XOR<MemberCreateWithoutAdsCostInput, MemberUncheckedCreateWithoutAdsCostInput>
    connectOrCreate?: MemberCreateOrConnectWithoutAdsCostInput
    connect?: MemberWhereUniqueInput
  }

  export type PlatformCreateNestedOneWithoutPlatformIdInput = {
    create?: XOR<PlatformCreateWithoutPlatformIdInput, PlatformUncheckedCreateWithoutPlatformIdInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutPlatformIdInput
    connect?: PlatformWhereUniqueInput
  }

  export type BusinessAccCreateNestedOneWithoutAdsCostRecordInput = {
    create?: XOR<BusinessAccCreateWithoutAdsCostRecordInput, BusinessAccUncheckedCreateWithoutAdsCostRecordInput>
    connectOrCreate?: BusinessAccCreateOrConnectWithoutAdsCostRecordInput
    connect?: BusinessAccWhereUniqueInput
  }

  export type MemberUpdateOneRequiredWithoutAdsCostNestedInput = {
    create?: XOR<MemberCreateWithoutAdsCostInput, MemberUncheckedCreateWithoutAdsCostInput>
    connectOrCreate?: MemberCreateOrConnectWithoutAdsCostInput
    upsert?: MemberUpsertWithoutAdsCostInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutAdsCostInput, MemberUpdateWithoutAdsCostInput>, MemberUncheckedUpdateWithoutAdsCostInput>
  }

  export type PlatformUpdateOneRequiredWithoutPlatformIdNestedInput = {
    create?: XOR<PlatformCreateWithoutPlatformIdInput, PlatformUncheckedCreateWithoutPlatformIdInput>
    connectOrCreate?: PlatformCreateOrConnectWithoutPlatformIdInput
    upsert?: PlatformUpsertWithoutPlatformIdInput
    connect?: PlatformWhereUniqueInput
    update?: XOR<XOR<PlatformUpdateToOneWithWhereWithoutPlatformIdInput, PlatformUpdateWithoutPlatformIdInput>, PlatformUncheckedUpdateWithoutPlatformIdInput>
  }

  export type BusinessAccUpdateOneRequiredWithoutAdsCostRecordNestedInput = {
    create?: XOR<BusinessAccCreateWithoutAdsCostRecordInput, BusinessAccUncheckedCreateWithoutAdsCostRecordInput>
    connectOrCreate?: BusinessAccCreateOrConnectWithoutAdsCostRecordInput
    upsert?: BusinessAccUpsertWithoutAdsCostRecordInput
    connect?: BusinessAccWhereUniqueInput
    update?: XOR<XOR<BusinessAccUpdateToOneWithWhereWithoutAdsCostRecordInput, BusinessAccUpdateWithoutAdsCostRecordInput>, BusinessAccUncheckedUpdateWithoutAdsCostRecordInput>
  }

  export type BusinessAccCreateNestedOneWithoutExpenceRecordInput = {
    create?: XOR<BusinessAccCreateWithoutExpenceRecordInput, BusinessAccUncheckedCreateWithoutExpenceRecordInput>
    connectOrCreate?: BusinessAccCreateOrConnectWithoutExpenceRecordInput
    connect?: BusinessAccWhereUniqueInput
  }

  export type MemberCreateNestedOneWithoutExpenceInput = {
    create?: XOR<MemberCreateWithoutExpenceInput, MemberUncheckedCreateWithoutExpenceInput>
    connectOrCreate?: MemberCreateOrConnectWithoutExpenceInput
    connect?: MemberWhereUniqueInput
  }

  export type BusinessAccUpdateOneRequiredWithoutExpenceRecordNestedInput = {
    create?: XOR<BusinessAccCreateWithoutExpenceRecordInput, BusinessAccUncheckedCreateWithoutExpenceRecordInput>
    connectOrCreate?: BusinessAccCreateOrConnectWithoutExpenceRecordInput
    upsert?: BusinessAccUpsertWithoutExpenceRecordInput
    connect?: BusinessAccWhereUniqueInput
    update?: XOR<XOR<BusinessAccUpdateToOneWithWhereWithoutExpenceRecordInput, BusinessAccUpdateWithoutExpenceRecordInput>, BusinessAccUncheckedUpdateWithoutExpenceRecordInput>
  }

  export type MemberUpdateOneRequiredWithoutExpenceNestedInput = {
    create?: XOR<MemberCreateWithoutExpenceInput, MemberUncheckedCreateWithoutExpenceInput>
    connectOrCreate?: MemberCreateOrConnectWithoutExpenceInput
    upsert?: MemberUpsertWithoutExpenceInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutExpenceInput, MemberUpdateWithoutExpenceInput>, MemberUncheckedUpdateWithoutExpenceInput>
  }

  export type AdsCostCreateNestedManyWithoutPlatformInput = {
    create?: XOR<AdsCostCreateWithoutPlatformInput, AdsCostUncheckedCreateWithoutPlatformInput> | AdsCostCreateWithoutPlatformInput[] | AdsCostUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutPlatformInput | AdsCostCreateOrConnectWithoutPlatformInput[]
    createMany?: AdsCostCreateManyPlatformInputEnvelope
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
  }

  export type AdsCostUncheckedCreateNestedManyWithoutPlatformInput = {
    create?: XOR<AdsCostCreateWithoutPlatformInput, AdsCostUncheckedCreateWithoutPlatformInput> | AdsCostCreateWithoutPlatformInput[] | AdsCostUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutPlatformInput | AdsCostCreateOrConnectWithoutPlatformInput[]
    createMany?: AdsCostCreateManyPlatformInputEnvelope
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
  }

  export type AdsCostUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<AdsCostCreateWithoutPlatformInput, AdsCostUncheckedCreateWithoutPlatformInput> | AdsCostCreateWithoutPlatformInput[] | AdsCostUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutPlatformInput | AdsCostCreateOrConnectWithoutPlatformInput[]
    upsert?: AdsCostUpsertWithWhereUniqueWithoutPlatformInput | AdsCostUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: AdsCostCreateManyPlatformInputEnvelope
    set?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    disconnect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    delete?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    update?: AdsCostUpdateWithWhereUniqueWithoutPlatformInput | AdsCostUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: AdsCostUpdateManyWithWhereWithoutPlatformInput | AdsCostUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: AdsCostScalarWhereInput | AdsCostScalarWhereInput[]
  }

  export type AdsCostUncheckedUpdateManyWithoutPlatformNestedInput = {
    create?: XOR<AdsCostCreateWithoutPlatformInput, AdsCostUncheckedCreateWithoutPlatformInput> | AdsCostCreateWithoutPlatformInput[] | AdsCostUncheckedCreateWithoutPlatformInput[]
    connectOrCreate?: AdsCostCreateOrConnectWithoutPlatformInput | AdsCostCreateOrConnectWithoutPlatformInput[]
    upsert?: AdsCostUpsertWithWhereUniqueWithoutPlatformInput | AdsCostUpsertWithWhereUniqueWithoutPlatformInput[]
    createMany?: AdsCostCreateManyPlatformInputEnvelope
    set?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    disconnect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    delete?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    connect?: AdsCostWhereUniqueInput | AdsCostWhereUniqueInput[]
    update?: AdsCostUpdateWithWhereUniqueWithoutPlatformInput | AdsCostUpdateWithWhereUniqueWithoutPlatformInput[]
    updateMany?: AdsCostUpdateManyWithWhereWithoutPlatformInput | AdsCostUpdateManyWithWhereWithoutPlatformInput[]
    deleteMany?: AdsCostScalarWhereInput | AdsCostScalarWhereInput[]
  }

  export type BillCreateNestedManyWithoutProductListInput = {
    create?: XOR<BillCreateWithoutProductListInput, BillUncheckedCreateWithoutProductListInput> | BillCreateWithoutProductListInput[] | BillUncheckedCreateWithoutProductListInput[]
    connectOrCreate?: BillCreateOrConnectWithoutProductListInput | BillCreateOrConnectWithoutProductListInput[]
    createMany?: BillCreateManyProductListInputEnvelope
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
  }

  export type MemberCreateNestedOneWithoutProductInput = {
    create?: XOR<MemberCreateWithoutProductInput, MemberUncheckedCreateWithoutProductInput>
    connectOrCreate?: MemberCreateOrConnectWithoutProductInput
    connect?: MemberWhereUniqueInput
  }

  export type BillUncheckedCreateNestedManyWithoutProductListInput = {
    create?: XOR<BillCreateWithoutProductListInput, BillUncheckedCreateWithoutProductListInput> | BillCreateWithoutProductListInput[] | BillUncheckedCreateWithoutProductListInput[]
    connectOrCreate?: BillCreateOrConnectWithoutProductListInput | BillCreateOrConnectWithoutProductListInput[]
    createMany?: BillCreateManyProductListInputEnvelope
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type BillUpdateManyWithoutProductListNestedInput = {
    create?: XOR<BillCreateWithoutProductListInput, BillUncheckedCreateWithoutProductListInput> | BillCreateWithoutProductListInput[] | BillUncheckedCreateWithoutProductListInput[]
    connectOrCreate?: BillCreateOrConnectWithoutProductListInput | BillCreateOrConnectWithoutProductListInput[]
    upsert?: BillUpsertWithWhereUniqueWithoutProductListInput | BillUpsertWithWhereUniqueWithoutProductListInput[]
    createMany?: BillCreateManyProductListInputEnvelope
    set?: BillWhereUniqueInput | BillWhereUniqueInput[]
    disconnect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    delete?: BillWhereUniqueInput | BillWhereUniqueInput[]
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    update?: BillUpdateWithWhereUniqueWithoutProductListInput | BillUpdateWithWhereUniqueWithoutProductListInput[]
    updateMany?: BillUpdateManyWithWhereWithoutProductListInput | BillUpdateManyWithWhereWithoutProductListInput[]
    deleteMany?: BillScalarWhereInput | BillScalarWhereInput[]
  }

  export type MemberUpdateOneRequiredWithoutProductNestedInput = {
    create?: XOR<MemberCreateWithoutProductInput, MemberUncheckedCreateWithoutProductInput>
    connectOrCreate?: MemberCreateOrConnectWithoutProductInput
    upsert?: MemberUpsertWithoutProductInput
    connect?: MemberWhereUniqueInput
    update?: XOR<XOR<MemberUpdateToOneWithWhereWithoutProductInput, MemberUpdateWithoutProductInput>, MemberUncheckedUpdateWithoutProductInput>
  }

  export type BillUncheckedUpdateManyWithoutProductListNestedInput = {
    create?: XOR<BillCreateWithoutProductListInput, BillUncheckedCreateWithoutProductListInput> | BillCreateWithoutProductListInput[] | BillUncheckedCreateWithoutProductListInput[]
    connectOrCreate?: BillCreateOrConnectWithoutProductListInput | BillCreateOrConnectWithoutProductListInput[]
    upsert?: BillUpsertWithWhereUniqueWithoutProductListInput | BillUpsertWithWhereUniqueWithoutProductListInput[]
    createMany?: BillCreateManyProductListInputEnvelope
    set?: BillWhereUniqueInput | BillWhereUniqueInput[]
    disconnect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    delete?: BillWhereUniqueInput | BillWhereUniqueInput[]
    connect?: BillWhereUniqueInput | BillWhereUniqueInput[]
    update?: BillUpdateWithWhereUniqueWithoutProductListInput | BillUpdateWithWhereUniqueWithoutProductListInput[]
    updateMany?: BillUpdateManyWithWhereWithoutProductListInput | BillUpdateManyWithWhereWithoutProductListInput[]
    deleteMany?: BillScalarWhereInput | BillScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumUserRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleFilter<$PrismaModel> | $Enums.UserRole
  }

  export type NestedEnumUserRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserRole | EnumUserRoleFieldRefInput<$PrismaModel>
    in?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserRole[] | ListEnumUserRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumUserRoleWithAggregatesFilter<$PrismaModel> | $Enums.UserRole
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserRoleFilter<$PrismaModel>
    _max?: NestedEnumUserRoleFilter<$PrismaModel>
  }

  export type NestedEnumtaxTypeFilter<$PrismaModel = never> = {
    equals?: $Enums.taxType | EnumtaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.taxType[] | ListEnumtaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.taxType[] | ListEnumtaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumtaxTypeFilter<$PrismaModel> | $Enums.taxType
  }

  export type NestedEnumtaxTypeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.taxType | EnumtaxTypeFieldRefInput<$PrismaModel>
    in?: $Enums.taxType[] | ListEnumtaxTypeFieldRefInput<$PrismaModel>
    notIn?: $Enums.taxType[] | ListEnumtaxTypeFieldRefInput<$PrismaModel>
    not?: NestedEnumtaxTypeWithAggregatesFilter<$PrismaModel> | $Enums.taxType
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumtaxTypeFilter<$PrismaModel>
    _max?: NestedEnumtaxTypeFilter<$PrismaModel>
  }

  export type NestedEnumGenderFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderFilter<$PrismaModel> | $Enums.Gender
  }

  export type NestedEnumPaymentFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentFilter<$PrismaModel> | $Enums.Payment
  }

  export type NestedEnumSocialMediaFilter<$PrismaModel = never> = {
    equals?: $Enums.SocialMedia | EnumSocialMediaFieldRefInput<$PrismaModel>
    in?: $Enums.SocialMedia[] | ListEnumSocialMediaFieldRefInput<$PrismaModel>
    notIn?: $Enums.SocialMedia[] | ListEnumSocialMediaFieldRefInput<$PrismaModel>
    not?: NestedEnumSocialMediaFilter<$PrismaModel> | $Enums.SocialMedia
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedEnumGenderWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Gender | EnumGenderFieldRefInput<$PrismaModel>
    in?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    notIn?: $Enums.Gender[] | ListEnumGenderFieldRefInput<$PrismaModel>
    not?: NestedEnumGenderWithAggregatesFilter<$PrismaModel> | $Enums.Gender
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumGenderFilter<$PrismaModel>
    _max?: NestedEnumGenderFilter<$PrismaModel>
  }

  export type NestedEnumPaymentWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Payment | EnumPaymentFieldRefInput<$PrismaModel>
    in?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    notIn?: $Enums.Payment[] | ListEnumPaymentFieldRefInput<$PrismaModel>
    not?: NestedEnumPaymentWithAggregatesFilter<$PrismaModel> | $Enums.Payment
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPaymentFilter<$PrismaModel>
    _max?: NestedEnumPaymentFilter<$PrismaModel>
  }

  export type NestedEnumSocialMediaWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.SocialMedia | EnumSocialMediaFieldRefInput<$PrismaModel>
    in?: $Enums.SocialMedia[] | ListEnumSocialMediaFieldRefInput<$PrismaModel>
    notIn?: $Enums.SocialMedia[] | ListEnumSocialMediaFieldRefInput<$PrismaModel>
    not?: NestedEnumSocialMediaWithAggregatesFilter<$PrismaModel> | $Enums.SocialMedia
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumSocialMediaFilter<$PrismaModel>
    _max?: NestedEnumSocialMediaFilter<$PrismaModel>
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type BusinessAccCreateWithoutUserInput = {
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    bills?: MemberCreateNestedOneWithoutBusinessInput
    billRecord?: BillCreateNestedManyWithoutBusinessIdInput
    expenceRecord?: ExpenceCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccUncheckedCreateWithoutUserInput = {
    id?: number
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    memberId?: string
    billRecord?: BillUncheckedCreateNestedManyWithoutBusinessIdInput
    expenceRecord?: ExpenceUncheckedCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostUncheckedCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccCreateOrConnectWithoutUserInput = {
    where: BusinessAccWhereUniqueInput
    create: XOR<BusinessAccCreateWithoutUserInput, BusinessAccUncheckedCreateWithoutUserInput>
  }

  export type BusinessAccCreateManyUserInputEnvelope = {
    data: BusinessAccCreateManyUserInput | BusinessAccCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MemberCreateWithoutUserInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    business?: BusinessAccCreateNestedManyWithoutBillsInput
    bill?: BillCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostCreateNestedManyWithoutMemberInput
    expence?: ExpenceCreateNestedManyWithoutMemberInput
    product?: ProductCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutUserInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    business?: BusinessAccUncheckedCreateNestedManyWithoutBillsInput
    bill?: BillUncheckedCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostUncheckedCreateNestedManyWithoutMemberInput
    expence?: ExpenceUncheckedCreateNestedManyWithoutMemberInput
    product?: ProductUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutUserInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
  }

  export type MemberCreateManyUserInputEnvelope = {
    data: MemberCreateManyUserInput | MemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BusinessAccUpsertWithWhereUniqueWithoutUserInput = {
    where: BusinessAccWhereUniqueInput
    update: XOR<BusinessAccUpdateWithoutUserInput, BusinessAccUncheckedUpdateWithoutUserInput>
    create: XOR<BusinessAccCreateWithoutUserInput, BusinessAccUncheckedCreateWithoutUserInput>
  }

  export type BusinessAccUpdateWithWhereUniqueWithoutUserInput = {
    where: BusinessAccWhereUniqueInput
    data: XOR<BusinessAccUpdateWithoutUserInput, BusinessAccUncheckedUpdateWithoutUserInput>
  }

  export type BusinessAccUpdateManyWithWhereWithoutUserInput = {
    where: BusinessAccScalarWhereInput
    data: XOR<BusinessAccUpdateManyMutationInput, BusinessAccUncheckedUpdateManyWithoutUserInput>
  }

  export type BusinessAccScalarWhereInput = {
    AND?: BusinessAccScalarWhereInput | BusinessAccScalarWhereInput[]
    OR?: BusinessAccScalarWhereInput[]
    NOT?: BusinessAccScalarWhereInput | BusinessAccScalarWhereInput[]
    id?: IntFilter<"BusinessAcc"> | number
    businessName?: StringFilter<"BusinessAcc"> | string
    vatId?: StringFilter<"BusinessAcc"> | string
    businessType?: StringFilter<"BusinessAcc"> | string
    taxType?: EnumtaxTypeFilter<"BusinessAcc"> | $Enums.taxType
    userId?: IntFilter<"BusinessAcc"> | number
    memberId?: StringFilter<"BusinessAcc"> | string
  }

  export type MemberUpsertWithWhereUniqueWithoutUserInput = {
    where: MemberWhereUniqueInput
    update: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
    create: XOR<MemberCreateWithoutUserInput, MemberUncheckedCreateWithoutUserInput>
  }

  export type MemberUpdateWithWhereUniqueWithoutUserInput = {
    where: MemberWhereUniqueInput
    data: XOR<MemberUpdateWithoutUserInput, MemberUncheckedUpdateWithoutUserInput>
  }

  export type MemberUpdateManyWithWhereWithoutUserInput = {
    where: MemberScalarWhereInput
    data: XOR<MemberUpdateManyMutationInput, MemberUncheckedUpdateManyWithoutUserInput>
  }

  export type MemberScalarWhereInput = {
    AND?: MemberScalarWhereInput | MemberScalarWhereInput[]
    OR?: MemberScalarWhereInput[]
    NOT?: MemberScalarWhereInput | MemberScalarWhereInput[]
    uniqueId?: StringFilter<"Member"> | string
    role?: EnumUserRoleFilter<"Member"> | $Enums.UserRole
    permission?: StringFilter<"Member"> | string
    createAt?: DateTimeFilter<"Member"> | Date | string
    updatedAt?: DateTimeFilter<"Member"> | Date | string
    userId?: IntFilter<"Member"> | number
  }

  export type UserCreateWithoutMemberInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    createAt?: Date | string
    updatedAt?: Date | string
    phone: string
    business?: BusinessAccCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMemberInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    createAt?: Date | string
    updatedAt?: Date | string
    phone: string
    business?: BusinessAccUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
  }

  export type BusinessAccCreateWithoutBillsInput = {
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    user: UserCreateNestedOneWithoutBusinessInput
    billRecord?: BillCreateNestedManyWithoutBusinessIdInput
    expenceRecord?: ExpenceCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccUncheckedCreateWithoutBillsInput = {
    id?: number
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    userId: number
    billRecord?: BillUncheckedCreateNestedManyWithoutBusinessIdInput
    expenceRecord?: ExpenceUncheckedCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostUncheckedCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccCreateOrConnectWithoutBillsInput = {
    where: BusinessAccWhereUniqueInput
    create: XOR<BusinessAccCreateWithoutBillsInput, BusinessAccUncheckedCreateWithoutBillsInput>
  }

  export type BusinessAccCreateManyBillsInputEnvelope = {
    data: BusinessAccCreateManyBillsInput | BusinessAccCreateManyBillsInput[]
    skipDuplicates?: boolean
  }

  export type BillCreateWithoutMemberInput = {
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    productList: ProductCreateNestedOneWithoutBiilRecordInput
    businessId: BusinessAccCreateNestedOneWithoutBillRecordInput
  }

  export type BillUncheckedCreateWithoutMemberInput = {
    id?: number
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    product: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    businessAcc: number
  }

  export type BillCreateOrConnectWithoutMemberInput = {
    where: BillWhereUniqueInput
    create: XOR<BillCreateWithoutMemberInput, BillUncheckedCreateWithoutMemberInput>
  }

  export type BillCreateManyMemberInputEnvelope = {
    data: BillCreateManyMemberInput | BillCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type AdsCostCreateWithoutMemberInput = {
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    platform: PlatformCreateNestedOneWithoutPlatformIdInput
    businessId: BusinessAccCreateNestedOneWithoutAdsCostRecordInput
  }

  export type AdsCostUncheckedCreateWithoutMemberInput = {
    id?: number
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    platformId: number
    businessAcc: number
  }

  export type AdsCostCreateOrConnectWithoutMemberInput = {
    where: AdsCostWhereUniqueInput
    create: XOR<AdsCostCreateWithoutMemberInput, AdsCostUncheckedCreateWithoutMemberInput>
  }

  export type AdsCostCreateManyMemberInputEnvelope = {
    data: AdsCostCreateManyMemberInput | AdsCostCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type ExpenceCreateWithoutMemberInput = {
    date: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    amount: number
    group: string
    image: string
    businessId: BusinessAccCreateNestedOneWithoutExpenceRecordInput
  }

  export type ExpenceUncheckedCreateWithoutMemberInput = {
    date: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    id?: number
    amount: number
    group: string
    image: string
    businessAcc: number
  }

  export type ExpenceCreateOrConnectWithoutMemberInput = {
    where: ExpenceWhereUniqueInput
    create: XOR<ExpenceCreateWithoutMemberInput, ExpenceUncheckedCreateWithoutMemberInput>
  }

  export type ExpenceCreateManyMemberInputEnvelope = {
    data: ExpenceCreateManyMemberInput | ExpenceCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type ProductCreateWithoutMemberInput = {
    name: string
    description?: string | null
    barcode: string
    image?: string | null
    stock: number
    price: number
    categoryId?: number | null
    statusId?: number | null
    createdId?: Date | string
    updatedId?: Date | string
    biilRecord?: BillCreateNestedManyWithoutProductListInput
  }

  export type ProductUncheckedCreateWithoutMemberInput = {
    id?: number
    name: string
    description?: string | null
    barcode: string
    image?: string | null
    stock: number
    price: number
    categoryId?: number | null
    statusId?: number | null
    createdId?: Date | string
    updatedId?: Date | string
    biilRecord?: BillUncheckedCreateNestedManyWithoutProductListInput
  }

  export type ProductCreateOrConnectWithoutMemberInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutMemberInput, ProductUncheckedCreateWithoutMemberInput>
  }

  export type ProductCreateManyMemberInputEnvelope = {
    data: ProductCreateManyMemberInput | ProductCreateManyMemberInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutMemberInput = {
    update: XOR<UserUpdateWithoutMemberInput, UserUncheckedUpdateWithoutMemberInput>
    create: XOR<UserCreateWithoutMemberInput, UserUncheckedCreateWithoutMemberInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMemberInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMemberInput, UserUncheckedUpdateWithoutMemberInput>
  }

  export type UserUpdateWithoutMemberInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    business?: BusinessAccUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    business?: BusinessAccUncheckedUpdateManyWithoutUserNestedInput
  }

  export type BusinessAccUpsertWithWhereUniqueWithoutBillsInput = {
    where: BusinessAccWhereUniqueInput
    update: XOR<BusinessAccUpdateWithoutBillsInput, BusinessAccUncheckedUpdateWithoutBillsInput>
    create: XOR<BusinessAccCreateWithoutBillsInput, BusinessAccUncheckedCreateWithoutBillsInput>
  }

  export type BusinessAccUpdateWithWhereUniqueWithoutBillsInput = {
    where: BusinessAccWhereUniqueInput
    data: XOR<BusinessAccUpdateWithoutBillsInput, BusinessAccUncheckedUpdateWithoutBillsInput>
  }

  export type BusinessAccUpdateManyWithWhereWithoutBillsInput = {
    where: BusinessAccScalarWhereInput
    data: XOR<BusinessAccUpdateManyMutationInput, BusinessAccUncheckedUpdateManyWithoutBillsInput>
  }

  export type BillUpsertWithWhereUniqueWithoutMemberInput = {
    where: BillWhereUniqueInput
    update: XOR<BillUpdateWithoutMemberInput, BillUncheckedUpdateWithoutMemberInput>
    create: XOR<BillCreateWithoutMemberInput, BillUncheckedCreateWithoutMemberInput>
  }

  export type BillUpdateWithWhereUniqueWithoutMemberInput = {
    where: BillWhereUniqueInput
    data: XOR<BillUpdateWithoutMemberInput, BillUncheckedUpdateWithoutMemberInput>
  }

  export type BillUpdateManyWithWhereWithoutMemberInput = {
    where: BillScalarWhereInput
    data: XOR<BillUpdateManyMutationInput, BillUncheckedUpdateManyWithoutMemberInput>
  }

  export type BillScalarWhereInput = {
    AND?: BillScalarWhereInput | BillScalarWhereInput[]
    OR?: BillScalarWhereInput[]
    NOT?: BillScalarWhereInput | BillScalarWhereInput[]
    id?: IntFilter<"Bill"> | number
    createAt?: DateTimeFilter<"Bill"> | Date | string
    updatedAt?: DateTimeFilter<"Bill"> | Date | string
    cName?: StringFilter<"Bill"> | string
    cLastname?: StringFilter<"Bill"> | string
    cPhone?: StringFilter<"Bill"> | string
    cGender?: EnumGenderFilter<"Bill"> | $Enums.Gender
    cAdress?: StringFilter<"Bill"> | string
    cProvince?: StringFilter<"Bill"> | string
    cPostId?: StringFilter<"Bill"> | string
    product?: StringFilter<"Bill"> | string
    payment?: EnumPaymentFilter<"Bill"> | $Enums.Payment
    amount?: IntFilter<"Bill"> | number
    purcheseAt?: DateTimeFilter<"Bill"> | Date | string
    platform?: EnumSocialMediaFilter<"Bill"> | $Enums.SocialMedia
    cashStatus?: BoolFilter<"Bill"> | boolean
    price?: IntFilter<"Bill"> | number
    imageBill?: StringNullableFilter<"Bill"> | string | null
    memberId?: StringFilter<"Bill"> | string
    businessAcc?: IntFilter<"Bill"> | number
  }

  export type AdsCostUpsertWithWhereUniqueWithoutMemberInput = {
    where: AdsCostWhereUniqueInput
    update: XOR<AdsCostUpdateWithoutMemberInput, AdsCostUncheckedUpdateWithoutMemberInput>
    create: XOR<AdsCostCreateWithoutMemberInput, AdsCostUncheckedCreateWithoutMemberInput>
  }

  export type AdsCostUpdateWithWhereUniqueWithoutMemberInput = {
    where: AdsCostWhereUniqueInput
    data: XOR<AdsCostUpdateWithoutMemberInput, AdsCostUncheckedUpdateWithoutMemberInput>
  }

  export type AdsCostUpdateManyWithWhereWithoutMemberInput = {
    where: AdsCostScalarWhereInput
    data: XOR<AdsCostUpdateManyMutationInput, AdsCostUncheckedUpdateManyWithoutMemberInput>
  }

  export type AdsCostScalarWhereInput = {
    AND?: AdsCostScalarWhereInput | AdsCostScalarWhereInput[]
    OR?: AdsCostScalarWhereInput[]
    NOT?: AdsCostScalarWhereInput | AdsCostScalarWhereInput[]
    id?: IntFilter<"AdsCost"> | number
    date?: DateTimeFilter<"AdsCost"> | Date | string
    createAt?: DateTimeFilter<"AdsCost"> | Date | string
    updatedAt?: DateTimeFilter<"AdsCost"> | Date | string
    adsCost?: IntFilter<"AdsCost"> | number
    memberId?: StringFilter<"AdsCost"> | string
    platformId?: IntFilter<"AdsCost"> | number
    businessAcc?: IntFilter<"AdsCost"> | number
  }

  export type ExpenceUpsertWithWhereUniqueWithoutMemberInput = {
    where: ExpenceWhereUniqueInput
    update: XOR<ExpenceUpdateWithoutMemberInput, ExpenceUncheckedUpdateWithoutMemberInput>
    create: XOR<ExpenceCreateWithoutMemberInput, ExpenceUncheckedCreateWithoutMemberInput>
  }

  export type ExpenceUpdateWithWhereUniqueWithoutMemberInput = {
    where: ExpenceWhereUniqueInput
    data: XOR<ExpenceUpdateWithoutMemberInput, ExpenceUncheckedUpdateWithoutMemberInput>
  }

  export type ExpenceUpdateManyWithWhereWithoutMemberInput = {
    where: ExpenceScalarWhereInput
    data: XOR<ExpenceUpdateManyMutationInput, ExpenceUncheckedUpdateManyWithoutMemberInput>
  }

  export type ExpenceScalarWhereInput = {
    AND?: ExpenceScalarWhereInput | ExpenceScalarWhereInput[]
    OR?: ExpenceScalarWhereInput[]
    NOT?: ExpenceScalarWhereInput | ExpenceScalarWhereInput[]
    date?: DateTimeFilter<"Expence"> | Date | string
    createAt?: DateTimeFilter<"Expence"> | Date | string
    updatedAt?: DateTimeFilter<"Expence"> | Date | string
    id?: IntFilter<"Expence"> | number
    amount?: IntFilter<"Expence"> | number
    group?: StringFilter<"Expence"> | string
    image?: StringFilter<"Expence"> | string
    businessAcc?: IntFilter<"Expence"> | number
    memberId?: StringFilter<"Expence"> | string
  }

  export type ProductUpsertWithWhereUniqueWithoutMemberInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutMemberInput, ProductUncheckedUpdateWithoutMemberInput>
    create: XOR<ProductCreateWithoutMemberInput, ProductUncheckedCreateWithoutMemberInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutMemberInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutMemberInput, ProductUncheckedUpdateWithoutMemberInput>
  }

  export type ProductUpdateManyWithWhereWithoutMemberInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutMemberInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: IntFilter<"Product"> | number
    name?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    barcode?: StringFilter<"Product"> | string
    image?: StringNullableFilter<"Product"> | string | null
    stock?: IntFilter<"Product"> | number
    price?: IntFilter<"Product"> | number
    categoryId?: IntNullableFilter<"Product"> | number | null
    memberId?: StringFilter<"Product"> | string
    statusId?: IntNullableFilter<"Product"> | number | null
    createdId?: DateTimeFilter<"Product"> | Date | string
    updatedId?: DateTimeFilter<"Product"> | Date | string
  }

  export type UserCreateWithoutBusinessInput = {
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    createAt?: Date | string
    updatedAt?: Date | string
    phone: string
    member?: MemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBusinessInput = {
    id?: number
    email: string
    password: string
    firstName: string
    lastName: string
    avatar?: string | null
    createAt?: Date | string
    updatedAt?: Date | string
    phone: string
    member?: MemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBusinessInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBusinessInput, UserUncheckedCreateWithoutBusinessInput>
  }

  export type MemberCreateWithoutBusinessInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMemberInput
    bill?: BillCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostCreateNestedManyWithoutMemberInput
    expence?: ExpenceCreateNestedManyWithoutMemberInput
    product?: ProductCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutBusinessInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    userId: number
    bill?: BillUncheckedCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostUncheckedCreateNestedManyWithoutMemberInput
    expence?: ExpenceUncheckedCreateNestedManyWithoutMemberInput
    product?: ProductUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutBusinessInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutBusinessInput, MemberUncheckedCreateWithoutBusinessInput>
  }

  export type BillCreateWithoutBusinessIdInput = {
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    productList: ProductCreateNestedOneWithoutBiilRecordInput
    member: MemberCreateNestedOneWithoutBillInput
  }

  export type BillUncheckedCreateWithoutBusinessIdInput = {
    id?: number
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    product: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    memberId: string
  }

  export type BillCreateOrConnectWithoutBusinessIdInput = {
    where: BillWhereUniqueInput
    create: XOR<BillCreateWithoutBusinessIdInput, BillUncheckedCreateWithoutBusinessIdInput>
  }

  export type BillCreateManyBusinessIdInputEnvelope = {
    data: BillCreateManyBusinessIdInput | BillCreateManyBusinessIdInput[]
    skipDuplicates?: boolean
  }

  export type ExpenceCreateWithoutBusinessIdInput = {
    date: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    amount: number
    group: string
    image: string
    member: MemberCreateNestedOneWithoutExpenceInput
  }

  export type ExpenceUncheckedCreateWithoutBusinessIdInput = {
    date: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    id?: number
    amount: number
    group: string
    image: string
    memberId: string
  }

  export type ExpenceCreateOrConnectWithoutBusinessIdInput = {
    where: ExpenceWhereUniqueInput
    create: XOR<ExpenceCreateWithoutBusinessIdInput, ExpenceUncheckedCreateWithoutBusinessIdInput>
  }

  export type ExpenceCreateManyBusinessIdInputEnvelope = {
    data: ExpenceCreateManyBusinessIdInput | ExpenceCreateManyBusinessIdInput[]
    skipDuplicates?: boolean
  }

  export type AdsCostCreateWithoutBusinessIdInput = {
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    member: MemberCreateNestedOneWithoutAdsCostInput
    platform: PlatformCreateNestedOneWithoutPlatformIdInput
  }

  export type AdsCostUncheckedCreateWithoutBusinessIdInput = {
    id?: number
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    memberId: string
    platformId: number
  }

  export type AdsCostCreateOrConnectWithoutBusinessIdInput = {
    where: AdsCostWhereUniqueInput
    create: XOR<AdsCostCreateWithoutBusinessIdInput, AdsCostUncheckedCreateWithoutBusinessIdInput>
  }

  export type AdsCostCreateManyBusinessIdInputEnvelope = {
    data: AdsCostCreateManyBusinessIdInput | AdsCostCreateManyBusinessIdInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutBusinessInput = {
    update: XOR<UserUpdateWithoutBusinessInput, UserUncheckedUpdateWithoutBusinessInput>
    create: XOR<UserCreateWithoutBusinessInput, UserUncheckedCreateWithoutBusinessInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBusinessInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBusinessInput, UserUncheckedUpdateWithoutBusinessInput>
  }

  export type UserUpdateWithoutBusinessInput = {
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    member?: MemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBusinessInput = {
    id?: IntFieldUpdateOperationsInput | number
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: NullableStringFieldUpdateOperationsInput | string | null
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    phone?: StringFieldUpdateOperationsInput | string
    member?: MemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type MemberUpsertWithoutBusinessInput = {
    update: XOR<MemberUpdateWithoutBusinessInput, MemberUncheckedUpdateWithoutBusinessInput>
    create: XOR<MemberCreateWithoutBusinessInput, MemberUncheckedCreateWithoutBusinessInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutBusinessInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutBusinessInput, MemberUncheckedUpdateWithoutBusinessInput>
  }

  export type MemberUpdateWithoutBusinessInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemberNestedInput
    bill?: BillUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUpdateManyWithoutMemberNestedInput
    product?: ProductUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutBusinessInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    bill?: BillUncheckedUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUncheckedUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUncheckedUpdateManyWithoutMemberNestedInput
    product?: ProductUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type BillUpsertWithWhereUniqueWithoutBusinessIdInput = {
    where: BillWhereUniqueInput
    update: XOR<BillUpdateWithoutBusinessIdInput, BillUncheckedUpdateWithoutBusinessIdInput>
    create: XOR<BillCreateWithoutBusinessIdInput, BillUncheckedCreateWithoutBusinessIdInput>
  }

  export type BillUpdateWithWhereUniqueWithoutBusinessIdInput = {
    where: BillWhereUniqueInput
    data: XOR<BillUpdateWithoutBusinessIdInput, BillUncheckedUpdateWithoutBusinessIdInput>
  }

  export type BillUpdateManyWithWhereWithoutBusinessIdInput = {
    where: BillScalarWhereInput
    data: XOR<BillUpdateManyMutationInput, BillUncheckedUpdateManyWithoutBusinessIdInput>
  }

  export type ExpenceUpsertWithWhereUniqueWithoutBusinessIdInput = {
    where: ExpenceWhereUniqueInput
    update: XOR<ExpenceUpdateWithoutBusinessIdInput, ExpenceUncheckedUpdateWithoutBusinessIdInput>
    create: XOR<ExpenceCreateWithoutBusinessIdInput, ExpenceUncheckedCreateWithoutBusinessIdInput>
  }

  export type ExpenceUpdateWithWhereUniqueWithoutBusinessIdInput = {
    where: ExpenceWhereUniqueInput
    data: XOR<ExpenceUpdateWithoutBusinessIdInput, ExpenceUncheckedUpdateWithoutBusinessIdInput>
  }

  export type ExpenceUpdateManyWithWhereWithoutBusinessIdInput = {
    where: ExpenceScalarWhereInput
    data: XOR<ExpenceUpdateManyMutationInput, ExpenceUncheckedUpdateManyWithoutBusinessIdInput>
  }

  export type AdsCostUpsertWithWhereUniqueWithoutBusinessIdInput = {
    where: AdsCostWhereUniqueInput
    update: XOR<AdsCostUpdateWithoutBusinessIdInput, AdsCostUncheckedUpdateWithoutBusinessIdInput>
    create: XOR<AdsCostCreateWithoutBusinessIdInput, AdsCostUncheckedCreateWithoutBusinessIdInput>
  }

  export type AdsCostUpdateWithWhereUniqueWithoutBusinessIdInput = {
    where: AdsCostWhereUniqueInput
    data: XOR<AdsCostUpdateWithoutBusinessIdInput, AdsCostUncheckedUpdateWithoutBusinessIdInput>
  }

  export type AdsCostUpdateManyWithWhereWithoutBusinessIdInput = {
    where: AdsCostScalarWhereInput
    data: XOR<AdsCostUpdateManyMutationInput, AdsCostUncheckedUpdateManyWithoutBusinessIdInput>
  }

  export type ProductCreateWithoutBiilRecordInput = {
    name: string
    description?: string | null
    barcode: string
    image?: string | null
    stock: number
    price: number
    categoryId?: number | null
    statusId?: number | null
    createdId?: Date | string
    updatedId?: Date | string
    member: MemberCreateNestedOneWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutBiilRecordInput = {
    id?: number
    name: string
    description?: string | null
    barcode: string
    image?: string | null
    stock: number
    price: number
    categoryId?: number | null
    memberId: string
    statusId?: number | null
    createdId?: Date | string
    updatedId?: Date | string
  }

  export type ProductCreateOrConnectWithoutBiilRecordInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutBiilRecordInput, ProductUncheckedCreateWithoutBiilRecordInput>
  }

  export type MemberCreateWithoutBillInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMemberInput
    business?: BusinessAccCreateNestedManyWithoutBillsInput
    adsCost?: AdsCostCreateNestedManyWithoutMemberInput
    expence?: ExpenceCreateNestedManyWithoutMemberInput
    product?: ProductCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutBillInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    userId: number
    business?: BusinessAccUncheckedCreateNestedManyWithoutBillsInput
    adsCost?: AdsCostUncheckedCreateNestedManyWithoutMemberInput
    expence?: ExpenceUncheckedCreateNestedManyWithoutMemberInput
    product?: ProductUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutBillInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutBillInput, MemberUncheckedCreateWithoutBillInput>
  }

  export type BusinessAccCreateWithoutBillRecordInput = {
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    user: UserCreateNestedOneWithoutBusinessInput
    bills?: MemberCreateNestedOneWithoutBusinessInput
    expenceRecord?: ExpenceCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccUncheckedCreateWithoutBillRecordInput = {
    id?: number
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    userId: number
    memberId?: string
    expenceRecord?: ExpenceUncheckedCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostUncheckedCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccCreateOrConnectWithoutBillRecordInput = {
    where: BusinessAccWhereUniqueInput
    create: XOR<BusinessAccCreateWithoutBillRecordInput, BusinessAccUncheckedCreateWithoutBillRecordInput>
  }

  export type ProductUpsertWithoutBiilRecordInput = {
    update: XOR<ProductUpdateWithoutBiilRecordInput, ProductUncheckedUpdateWithoutBiilRecordInput>
    create: XOR<ProductCreateWithoutBiilRecordInput, ProductUncheckedCreateWithoutBiilRecordInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutBiilRecordInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutBiilRecordInput, ProductUncheckedUpdateWithoutBiilRecordInput>
  }

  export type ProductUpdateWithoutBiilRecordInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    statusId?: NullableIntFieldUpdateOperationsInput | number | null
    createdId?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedId?: DateTimeFieldUpdateOperationsInput | Date | string
    member?: MemberUpdateOneRequiredWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutBiilRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    memberId?: StringFieldUpdateOperationsInput | string
    statusId?: NullableIntFieldUpdateOperationsInput | number | null
    createdId?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedId?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type MemberUpsertWithoutBillInput = {
    update: XOR<MemberUpdateWithoutBillInput, MemberUncheckedUpdateWithoutBillInput>
    create: XOR<MemberCreateWithoutBillInput, MemberUncheckedCreateWithoutBillInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutBillInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutBillInput, MemberUncheckedUpdateWithoutBillInput>
  }

  export type MemberUpdateWithoutBillInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemberNestedInput
    business?: BusinessAccUpdateManyWithoutBillsNestedInput
    adsCost?: AdsCostUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUpdateManyWithoutMemberNestedInput
    product?: ProductUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutBillInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    business?: BusinessAccUncheckedUpdateManyWithoutBillsNestedInput
    adsCost?: AdsCostUncheckedUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUncheckedUpdateManyWithoutMemberNestedInput
    product?: ProductUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type BusinessAccUpsertWithoutBillRecordInput = {
    update: XOR<BusinessAccUpdateWithoutBillRecordInput, BusinessAccUncheckedUpdateWithoutBillRecordInput>
    create: XOR<BusinessAccCreateWithoutBillRecordInput, BusinessAccUncheckedCreateWithoutBillRecordInput>
    where?: BusinessAccWhereInput
  }

  export type BusinessAccUpdateToOneWithWhereWithoutBillRecordInput = {
    where?: BusinessAccWhereInput
    data: XOR<BusinessAccUpdateWithoutBillRecordInput, BusinessAccUncheckedUpdateWithoutBillRecordInput>
  }

  export type BusinessAccUpdateWithoutBillRecordInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    user?: UserUpdateOneRequiredWithoutBusinessNestedInput
    bills?: MemberUpdateOneRequiredWithoutBusinessNestedInput
    expenceRecord?: ExpenceUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccUncheckedUpdateWithoutBillRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    userId?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    expenceRecord?: ExpenceUncheckedUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUncheckedUpdateManyWithoutBusinessIdNestedInput
  }

  export type MemberCreateWithoutAdsCostInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMemberInput
    business?: BusinessAccCreateNestedManyWithoutBillsInput
    bill?: BillCreateNestedManyWithoutMemberInput
    expence?: ExpenceCreateNestedManyWithoutMemberInput
    product?: ProductCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutAdsCostInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    userId: number
    business?: BusinessAccUncheckedCreateNestedManyWithoutBillsInput
    bill?: BillUncheckedCreateNestedManyWithoutMemberInput
    expence?: ExpenceUncheckedCreateNestedManyWithoutMemberInput
    product?: ProductUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutAdsCostInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutAdsCostInput, MemberUncheckedCreateWithoutAdsCostInput>
  }

  export type PlatformCreateWithoutPlatformIdInput = {
    platform: string
    accName: string
    accId: string
    createAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlatformUncheckedCreateWithoutPlatformIdInput = {
    id?: number
    platform: string
    accName: string
    accId: string
    createAt?: Date | string
    updatedAt?: Date | string
  }

  export type PlatformCreateOrConnectWithoutPlatformIdInput = {
    where: PlatformWhereUniqueInput
    create: XOR<PlatformCreateWithoutPlatformIdInput, PlatformUncheckedCreateWithoutPlatformIdInput>
  }

  export type BusinessAccCreateWithoutAdsCostRecordInput = {
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    user: UserCreateNestedOneWithoutBusinessInput
    bills?: MemberCreateNestedOneWithoutBusinessInput
    billRecord?: BillCreateNestedManyWithoutBusinessIdInput
    expenceRecord?: ExpenceCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccUncheckedCreateWithoutAdsCostRecordInput = {
    id?: number
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    userId: number
    memberId?: string
    billRecord?: BillUncheckedCreateNestedManyWithoutBusinessIdInput
    expenceRecord?: ExpenceUncheckedCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccCreateOrConnectWithoutAdsCostRecordInput = {
    where: BusinessAccWhereUniqueInput
    create: XOR<BusinessAccCreateWithoutAdsCostRecordInput, BusinessAccUncheckedCreateWithoutAdsCostRecordInput>
  }

  export type MemberUpsertWithoutAdsCostInput = {
    update: XOR<MemberUpdateWithoutAdsCostInput, MemberUncheckedUpdateWithoutAdsCostInput>
    create: XOR<MemberCreateWithoutAdsCostInput, MemberUncheckedCreateWithoutAdsCostInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutAdsCostInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutAdsCostInput, MemberUncheckedUpdateWithoutAdsCostInput>
  }

  export type MemberUpdateWithoutAdsCostInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemberNestedInput
    business?: BusinessAccUpdateManyWithoutBillsNestedInput
    bill?: BillUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUpdateManyWithoutMemberNestedInput
    product?: ProductUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutAdsCostInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    business?: BusinessAccUncheckedUpdateManyWithoutBillsNestedInput
    bill?: BillUncheckedUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUncheckedUpdateManyWithoutMemberNestedInput
    product?: ProductUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type PlatformUpsertWithoutPlatformIdInput = {
    update: XOR<PlatformUpdateWithoutPlatformIdInput, PlatformUncheckedUpdateWithoutPlatformIdInput>
    create: XOR<PlatformCreateWithoutPlatformIdInput, PlatformUncheckedCreateWithoutPlatformIdInput>
    where?: PlatformWhereInput
  }

  export type PlatformUpdateToOneWithWhereWithoutPlatformIdInput = {
    where?: PlatformWhereInput
    data: XOR<PlatformUpdateWithoutPlatformIdInput, PlatformUncheckedUpdateWithoutPlatformIdInput>
  }

  export type PlatformUpdateWithoutPlatformIdInput = {
    platform?: StringFieldUpdateOperationsInput | string
    accName?: StringFieldUpdateOperationsInput | string
    accId?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlatformUncheckedUpdateWithoutPlatformIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    platform?: StringFieldUpdateOperationsInput | string
    accName?: StringFieldUpdateOperationsInput | string
    accId?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessAccUpsertWithoutAdsCostRecordInput = {
    update: XOR<BusinessAccUpdateWithoutAdsCostRecordInput, BusinessAccUncheckedUpdateWithoutAdsCostRecordInput>
    create: XOR<BusinessAccCreateWithoutAdsCostRecordInput, BusinessAccUncheckedCreateWithoutAdsCostRecordInput>
    where?: BusinessAccWhereInput
  }

  export type BusinessAccUpdateToOneWithWhereWithoutAdsCostRecordInput = {
    where?: BusinessAccWhereInput
    data: XOR<BusinessAccUpdateWithoutAdsCostRecordInput, BusinessAccUncheckedUpdateWithoutAdsCostRecordInput>
  }

  export type BusinessAccUpdateWithoutAdsCostRecordInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    user?: UserUpdateOneRequiredWithoutBusinessNestedInput
    bills?: MemberUpdateOneRequiredWithoutBusinessNestedInput
    billRecord?: BillUpdateManyWithoutBusinessIdNestedInput
    expenceRecord?: ExpenceUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccUncheckedUpdateWithoutAdsCostRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    userId?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    billRecord?: BillUncheckedUpdateManyWithoutBusinessIdNestedInput
    expenceRecord?: ExpenceUncheckedUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccCreateWithoutExpenceRecordInput = {
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    user: UserCreateNestedOneWithoutBusinessInput
    bills?: MemberCreateNestedOneWithoutBusinessInput
    billRecord?: BillCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccUncheckedCreateWithoutExpenceRecordInput = {
    id?: number
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    userId: number
    memberId?: string
    billRecord?: BillUncheckedCreateNestedManyWithoutBusinessIdInput
    adsCostRecord?: AdsCostUncheckedCreateNestedManyWithoutBusinessIdInput
  }

  export type BusinessAccCreateOrConnectWithoutExpenceRecordInput = {
    where: BusinessAccWhereUniqueInput
    create: XOR<BusinessAccCreateWithoutExpenceRecordInput, BusinessAccUncheckedCreateWithoutExpenceRecordInput>
  }

  export type MemberCreateWithoutExpenceInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMemberInput
    business?: BusinessAccCreateNestedManyWithoutBillsInput
    bill?: BillCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostCreateNestedManyWithoutMemberInput
    product?: ProductCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutExpenceInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    userId: number
    business?: BusinessAccUncheckedCreateNestedManyWithoutBillsInput
    bill?: BillUncheckedCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostUncheckedCreateNestedManyWithoutMemberInput
    product?: ProductUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutExpenceInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutExpenceInput, MemberUncheckedCreateWithoutExpenceInput>
  }

  export type BusinessAccUpsertWithoutExpenceRecordInput = {
    update: XOR<BusinessAccUpdateWithoutExpenceRecordInput, BusinessAccUncheckedUpdateWithoutExpenceRecordInput>
    create: XOR<BusinessAccCreateWithoutExpenceRecordInput, BusinessAccUncheckedCreateWithoutExpenceRecordInput>
    where?: BusinessAccWhereInput
  }

  export type BusinessAccUpdateToOneWithWhereWithoutExpenceRecordInput = {
    where?: BusinessAccWhereInput
    data: XOR<BusinessAccUpdateWithoutExpenceRecordInput, BusinessAccUncheckedUpdateWithoutExpenceRecordInput>
  }

  export type BusinessAccUpdateWithoutExpenceRecordInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    user?: UserUpdateOneRequiredWithoutBusinessNestedInput
    bills?: MemberUpdateOneRequiredWithoutBusinessNestedInput
    billRecord?: BillUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccUncheckedUpdateWithoutExpenceRecordInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    userId?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    billRecord?: BillUncheckedUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUncheckedUpdateManyWithoutBusinessIdNestedInput
  }

  export type MemberUpsertWithoutExpenceInput = {
    update: XOR<MemberUpdateWithoutExpenceInput, MemberUncheckedUpdateWithoutExpenceInput>
    create: XOR<MemberCreateWithoutExpenceInput, MemberUncheckedCreateWithoutExpenceInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutExpenceInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutExpenceInput, MemberUncheckedUpdateWithoutExpenceInput>
  }

  export type MemberUpdateWithoutExpenceInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemberNestedInput
    business?: BusinessAccUpdateManyWithoutBillsNestedInput
    bill?: BillUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUpdateManyWithoutMemberNestedInput
    product?: ProductUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutExpenceInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    business?: BusinessAccUncheckedUpdateManyWithoutBillsNestedInput
    bill?: BillUncheckedUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUncheckedUpdateManyWithoutMemberNestedInput
    product?: ProductUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type AdsCostCreateWithoutPlatformInput = {
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    member: MemberCreateNestedOneWithoutAdsCostInput
    businessId: BusinessAccCreateNestedOneWithoutAdsCostRecordInput
  }

  export type AdsCostUncheckedCreateWithoutPlatformInput = {
    id?: number
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    memberId: string
    businessAcc: number
  }

  export type AdsCostCreateOrConnectWithoutPlatformInput = {
    where: AdsCostWhereUniqueInput
    create: XOR<AdsCostCreateWithoutPlatformInput, AdsCostUncheckedCreateWithoutPlatformInput>
  }

  export type AdsCostCreateManyPlatformInputEnvelope = {
    data: AdsCostCreateManyPlatformInput | AdsCostCreateManyPlatformInput[]
    skipDuplicates?: boolean
  }

  export type AdsCostUpsertWithWhereUniqueWithoutPlatformInput = {
    where: AdsCostWhereUniqueInput
    update: XOR<AdsCostUpdateWithoutPlatformInput, AdsCostUncheckedUpdateWithoutPlatformInput>
    create: XOR<AdsCostCreateWithoutPlatformInput, AdsCostUncheckedCreateWithoutPlatformInput>
  }

  export type AdsCostUpdateWithWhereUniqueWithoutPlatformInput = {
    where: AdsCostWhereUniqueInput
    data: XOR<AdsCostUpdateWithoutPlatformInput, AdsCostUncheckedUpdateWithoutPlatformInput>
  }

  export type AdsCostUpdateManyWithWhereWithoutPlatformInput = {
    where: AdsCostScalarWhereInput
    data: XOR<AdsCostUpdateManyMutationInput, AdsCostUncheckedUpdateManyWithoutPlatformInput>
  }

  export type BillCreateWithoutProductListInput = {
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    member: MemberCreateNestedOneWithoutBillInput
    businessId: BusinessAccCreateNestedOneWithoutBillRecordInput
  }

  export type BillUncheckedCreateWithoutProductListInput = {
    id?: number
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    memberId: string
    businessAcc: number
  }

  export type BillCreateOrConnectWithoutProductListInput = {
    where: BillWhereUniqueInput
    create: XOR<BillCreateWithoutProductListInput, BillUncheckedCreateWithoutProductListInput>
  }

  export type BillCreateManyProductListInputEnvelope = {
    data: BillCreateManyProductListInput | BillCreateManyProductListInput[]
    skipDuplicates?: boolean
  }

  export type MemberCreateWithoutProductInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutMemberInput
    business?: BusinessAccCreateNestedManyWithoutBillsInput
    bill?: BillCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostCreateNestedManyWithoutMemberInput
    expence?: ExpenceCreateNestedManyWithoutMemberInput
  }

  export type MemberUncheckedCreateWithoutProductInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
    userId: number
    business?: BusinessAccUncheckedCreateNestedManyWithoutBillsInput
    bill?: BillUncheckedCreateNestedManyWithoutMemberInput
    adsCost?: AdsCostUncheckedCreateNestedManyWithoutMemberInput
    expence?: ExpenceUncheckedCreateNestedManyWithoutMemberInput
  }

  export type MemberCreateOrConnectWithoutProductInput = {
    where: MemberWhereUniqueInput
    create: XOR<MemberCreateWithoutProductInput, MemberUncheckedCreateWithoutProductInput>
  }

  export type BillUpsertWithWhereUniqueWithoutProductListInput = {
    where: BillWhereUniqueInput
    update: XOR<BillUpdateWithoutProductListInput, BillUncheckedUpdateWithoutProductListInput>
    create: XOR<BillCreateWithoutProductListInput, BillUncheckedCreateWithoutProductListInput>
  }

  export type BillUpdateWithWhereUniqueWithoutProductListInput = {
    where: BillWhereUniqueInput
    data: XOR<BillUpdateWithoutProductListInput, BillUncheckedUpdateWithoutProductListInput>
  }

  export type BillUpdateManyWithWhereWithoutProductListInput = {
    where: BillScalarWhereInput
    data: XOR<BillUpdateManyMutationInput, BillUncheckedUpdateManyWithoutProductListInput>
  }

  export type MemberUpsertWithoutProductInput = {
    update: XOR<MemberUpdateWithoutProductInput, MemberUncheckedUpdateWithoutProductInput>
    create: XOR<MemberCreateWithoutProductInput, MemberUncheckedCreateWithoutProductInput>
    where?: MemberWhereInput
  }

  export type MemberUpdateToOneWithWhereWithoutProductInput = {
    where?: MemberWhereInput
    data: XOR<MemberUpdateWithoutProductInput, MemberUncheckedUpdateWithoutProductInput>
  }

  export type MemberUpdateWithoutProductInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutMemberNestedInput
    business?: BusinessAccUpdateManyWithoutBillsNestedInput
    bill?: BillUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutProductInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    business?: BusinessAccUncheckedUpdateManyWithoutBillsNestedInput
    bill?: BillUncheckedUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUncheckedUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type BusinessAccCreateManyUserInput = {
    id?: number
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    memberId?: string
  }

  export type MemberCreateManyUserInput = {
    uniqueId?: string
    role?: $Enums.UserRole
    permission: string
    createAt?: Date | string
    updatedAt?: Date | string
  }

  export type BusinessAccUpdateWithoutUserInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    bills?: MemberUpdateOneRequiredWithoutBusinessNestedInput
    billRecord?: BillUpdateManyWithoutBusinessIdNestedInput
    expenceRecord?: ExpenceUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    memberId?: StringFieldUpdateOperationsInput | string
    billRecord?: BillUncheckedUpdateManyWithoutBusinessIdNestedInput
    expenceRecord?: ExpenceUncheckedUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUncheckedUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type MemberUpdateWithoutUserInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    business?: BusinessAccUpdateManyWithoutBillsNestedInput
    bill?: BillUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUpdateManyWithoutMemberNestedInput
    product?: ProductUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateWithoutUserInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    business?: BusinessAccUncheckedUpdateManyWithoutBillsNestedInput
    bill?: BillUncheckedUpdateManyWithoutMemberNestedInput
    adsCost?: AdsCostUncheckedUpdateManyWithoutMemberNestedInput
    expence?: ExpenceUncheckedUpdateManyWithoutMemberNestedInput
    product?: ProductUncheckedUpdateManyWithoutMemberNestedInput
  }

  export type MemberUncheckedUpdateManyWithoutUserInput = {
    uniqueId?: StringFieldUpdateOperationsInput | string
    role?: EnumUserRoleFieldUpdateOperationsInput | $Enums.UserRole
    permission?: StringFieldUpdateOperationsInput | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BusinessAccCreateManyBillsInput = {
    id?: number
    businessName: string
    vatId: string
    businessType: string
    taxType?: $Enums.taxType
    userId: number
  }

  export type BillCreateManyMemberInput = {
    id?: number
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    product: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    businessAcc: number
  }

  export type AdsCostCreateManyMemberInput = {
    id?: number
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    platformId: number
    businessAcc: number
  }

  export type ExpenceCreateManyMemberInput = {
    date: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    id?: number
    amount: number
    group: string
    image: string
    businessAcc: number
  }

  export type ProductCreateManyMemberInput = {
    id?: number
    name: string
    description?: string | null
    barcode: string
    image?: string | null
    stock: number
    price: number
    categoryId?: number | null
    statusId?: number | null
    createdId?: Date | string
    updatedId?: Date | string
  }

  export type BusinessAccUpdateWithoutBillsInput = {
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    user?: UserUpdateOneRequiredWithoutBusinessNestedInput
    billRecord?: BillUpdateManyWithoutBusinessIdNestedInput
    expenceRecord?: ExpenceUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccUncheckedUpdateWithoutBillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    userId?: IntFieldUpdateOperationsInput | number
    billRecord?: BillUncheckedUpdateManyWithoutBusinessIdNestedInput
    expenceRecord?: ExpenceUncheckedUpdateManyWithoutBusinessIdNestedInput
    adsCostRecord?: AdsCostUncheckedUpdateManyWithoutBusinessIdNestedInput
  }

  export type BusinessAccUncheckedUpdateManyWithoutBillsInput = {
    id?: IntFieldUpdateOperationsInput | number
    businessName?: StringFieldUpdateOperationsInput | string
    vatId?: StringFieldUpdateOperationsInput | string
    businessType?: StringFieldUpdateOperationsInput | string
    taxType?: EnumtaxTypeFieldUpdateOperationsInput | $Enums.taxType
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type BillUpdateWithoutMemberInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    productList?: ProductUpdateOneRequiredWithoutBiilRecordNestedInput
    businessId?: BusinessAccUpdateOneRequiredWithoutBillRecordNestedInput
  }

  export type BillUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type BillUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type AdsCostUpdateWithoutMemberInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    platform?: PlatformUpdateOneRequiredWithoutPlatformIdNestedInput
    businessId?: BusinessAccUpdateOneRequiredWithoutAdsCostRecordNestedInput
  }

  export type AdsCostUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type AdsCostUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    platformId?: IntFieldUpdateOperationsInput | number
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type ExpenceUpdateWithoutMemberInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    businessId?: BusinessAccUpdateOneRequiredWithoutExpenceRecordNestedInput
  }

  export type ExpenceUncheckedUpdateWithoutMemberInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type ExpenceUncheckedUpdateManyWithoutMemberInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type ProductUpdateWithoutMemberInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    statusId?: NullableIntFieldUpdateOperationsInput | number | null
    createdId?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedId?: DateTimeFieldUpdateOperationsInput | Date | string
    biilRecord?: BillUpdateManyWithoutProductListNestedInput
  }

  export type ProductUncheckedUpdateWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    statusId?: NullableIntFieldUpdateOperationsInput | number | null
    createdId?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedId?: DateTimeFieldUpdateOperationsInput | Date | string
    biilRecord?: BillUncheckedUpdateManyWithoutProductListNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutMemberInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    barcode?: StringFieldUpdateOperationsInput | string
    image?: NullableStringFieldUpdateOperationsInput | string | null
    stock?: IntFieldUpdateOperationsInput | number
    price?: IntFieldUpdateOperationsInput | number
    categoryId?: NullableIntFieldUpdateOperationsInput | number | null
    statusId?: NullableIntFieldUpdateOperationsInput | number | null
    createdId?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedId?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type BillCreateManyBusinessIdInput = {
    id?: number
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    product: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    memberId: string
  }

  export type ExpenceCreateManyBusinessIdInput = {
    date: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    id?: number
    amount: number
    group: string
    image: string
    memberId: string
  }

  export type AdsCostCreateManyBusinessIdInput = {
    id?: number
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    memberId: string
    platformId: number
  }

  export type BillUpdateWithoutBusinessIdInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    productList?: ProductUpdateOneRequiredWithoutBiilRecordNestedInput
    member?: MemberUpdateOneRequiredWithoutBillNestedInput
  }

  export type BillUncheckedUpdateWithoutBusinessIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type BillUncheckedUpdateManyWithoutBusinessIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    product?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenceUpdateWithoutBusinessIdInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    member?: MemberUpdateOneRequiredWithoutExpenceNestedInput
  }

  export type ExpenceUncheckedUpdateWithoutBusinessIdInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type ExpenceUncheckedUpdateManyWithoutBusinessIdInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    id?: IntFieldUpdateOperationsInput | number
    amount?: IntFieldUpdateOperationsInput | number
    group?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    memberId?: StringFieldUpdateOperationsInput | string
  }

  export type AdsCostUpdateWithoutBusinessIdInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    member?: MemberUpdateOneRequiredWithoutAdsCostNestedInput
    platform?: PlatformUpdateOneRequiredWithoutPlatformIdNestedInput
  }

  export type AdsCostUncheckedUpdateWithoutBusinessIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type AdsCostUncheckedUpdateManyWithoutBusinessIdInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    platformId?: IntFieldUpdateOperationsInput | number
  }

  export type AdsCostCreateManyPlatformInput = {
    id?: number
    date?: Date | string
    createAt?: Date | string
    updatedAt?: Date | string
    adsCost: number
    memberId: string
    businessAcc: number
  }

  export type AdsCostUpdateWithoutPlatformInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    member?: MemberUpdateOneRequiredWithoutAdsCostNestedInput
    businessId?: BusinessAccUpdateOneRequiredWithoutAdsCostRecordNestedInput
  }

  export type AdsCostUncheckedUpdateWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type AdsCostUncheckedUpdateManyWithoutPlatformInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    adsCost?: IntFieldUpdateOperationsInput | number
    memberId?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type BillCreateManyProductListInput = {
    id?: number
    createAt?: Date | string
    updatedAt?: Date | string
    cName: string
    cLastname: string
    cPhone: string
    cGender: $Enums.Gender
    cAdress: string
    cProvince: string
    cPostId: string
    payment: $Enums.Payment
    amount: number
    purcheseAt?: Date | string
    platform: $Enums.SocialMedia
    cashStatus?: boolean
    price: number
    imageBill?: string | null
    memberId: string
    businessAcc: number
  }

  export type BillUpdateWithoutProductListInput = {
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    member?: MemberUpdateOneRequiredWithoutBillNestedInput
    businessId?: BusinessAccUpdateOneRequiredWithoutBillRecordNestedInput
  }

  export type BillUncheckedUpdateWithoutProductListInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    memberId?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
  }

  export type BillUncheckedUpdateManyWithoutProductListInput = {
    id?: IntFieldUpdateOperationsInput | number
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    cName?: StringFieldUpdateOperationsInput | string
    cLastname?: StringFieldUpdateOperationsInput | string
    cPhone?: StringFieldUpdateOperationsInput | string
    cGender?: EnumGenderFieldUpdateOperationsInput | $Enums.Gender
    cAdress?: StringFieldUpdateOperationsInput | string
    cProvince?: StringFieldUpdateOperationsInput | string
    cPostId?: StringFieldUpdateOperationsInput | string
    payment?: EnumPaymentFieldUpdateOperationsInput | $Enums.Payment
    amount?: IntFieldUpdateOperationsInput | number
    purcheseAt?: DateTimeFieldUpdateOperationsInput | Date | string
    platform?: EnumSocialMediaFieldUpdateOperationsInput | $Enums.SocialMedia
    cashStatus?: BoolFieldUpdateOperationsInput | boolean
    price?: IntFieldUpdateOperationsInput | number
    imageBill?: NullableStringFieldUpdateOperationsInput | string | null
    memberId?: StringFieldUpdateOperationsInput | string
    businessAcc?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberCountOutputTypeDefaultArgs instead
     */
    export type MemberCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BusinessAccCountOutputTypeDefaultArgs instead
     */
    export type BusinessAccCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BusinessAccCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlatformCountOutputTypeDefaultArgs instead
     */
    export type PlatformCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlatformCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MemberDefaultArgs instead
     */
    export type MemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BusinessAccDefaultArgs instead
     */
    export type BusinessAccArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BusinessAccDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BillDefaultArgs instead
     */
    export type BillArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BillDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AdsCostDefaultArgs instead
     */
    export type AdsCostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AdsCostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExpenceDefaultArgs instead
     */
    export type ExpenceArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExpenceDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlatformDefaultArgs instead
     */
    export type PlatformArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlatformDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}